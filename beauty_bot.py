from dotenv import load_dotenv
import os

load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')

import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes,
    MessageHandler, filters
)
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, timedelta
from google_sheets import add_to_google_sheet

ADMIN_ID = int(os.environ["ADMIN_ID"])
scheduler = BackgroundScheduler()

def init_db():
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS bookings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            phone TEXT,
            procedure TEXT,
            date TEXT,
            time TEXT,
            user_id INTEGER
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS schedule (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT,
            times TEXT
        )
    """)
    conn.commit()
    conn.close()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏", callback_data='book')],
        [InlineKeyboardButton("üìÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –º—ñ–π –∑–∞–ø–∏—Å", callback_data='check_booking')]
    ]
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=InlineKeyboardMarkup(keyboard))

async def schedule_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return
    await update.message.reply_text(
        "–í–≤–µ–¥—ñ—Ç—å –≥—Ä–∞—Ñ—ñ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n\n28.05: 14:00,15:00,16:00\n29.05: 15:00,16:00"
    )
    context.user_data['step'] = 'set_schedule'

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'book':
        keyboard = [
            [InlineKeyboardButton("–ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤", callback_data='proc_brows')],
            [InlineKeyboardButton("–§–∞—Ä–±—É–≤–∞–Ω–Ω—è —Ç–∞ –∫–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤", callback_data='proc_tint_brows')],
            [InlineKeyboardButton("–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤", callback_data='proc_lam_brows')],
            [InlineKeyboardButton("–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π", callback_data='proc_lam_lashes')]
        ]
        await query.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É:", reply_markup=InlineKeyboardMarkup(keyboard))
        context.user_data.clear()

    elif query.data == 'check_booking':
        await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (—Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏):")
        context.user_data['step'] = 'check_phone'

    elif query.data.startswith('proc_'):
        proc_map = {
            'proc_brows': '–ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤',
            'proc_tint_brows': '–§–∞—Ä–±—É–≤–∞–Ω–Ω—è —Ç–∞ –∫–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤',
            'proc_lam_brows': '–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤',
            'proc_lam_lashes': '–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π'
        }
        context.user_data['procedure'] = proc_map[query.data]
        # --- –ö–Ω–æ–ø–∫–∏ –¥–∞—Ç –Ω–∞ 14 –¥–Ω—ñ–≤ ---
        dates = []
        today = datetime.now().date()
        for i in range(14):
            d = today + timedelta(days=i)
            dates.append(d.strftime("%d.%m"))
        keyboard = [
            [InlineKeyboardButton(date, callback_data=f'date_{date}')] for date in dates
        ]
        await query.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É:", reply_markup=InlineKeyboardMarkup(keyboard))
        context.user_data['step'] = None

    elif query.data.startswith('date_'):
        date = query.data.replace('date_', '')
        context.user_data['date'] = date
        # --- –ì—Ä–∞—Ñ—ñ–∫ –∑ –±–∞–∑–∏ –∞–±–æ –∞–≤—Ç–æ ---
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT times FROM schedule WHERE date = ?", (date,))
        row = c.fetchone()
        conn.close()
        if row:
            times = [t.strip() for t in row[0].split(',')]
        else:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ (–±—É–¥–Ω—ñ/–≤–∏—Ö—ñ–¥–Ω—ñ)
            day = datetime.strptime(date + f".{datetime.now().year}", "%d.%m.%Y").weekday()
            if day < 5:
                times = [f"{h:02d}:00" for h in range(14, 19)]
            else:
                times = [f"{h:02d}:00" for h in range(11, 19)]
        # –í–∏–ª—É—á–∞—î–º–æ –≤–∂–µ –∑–∞–π–Ω—è—Ç—ñ –≥–æ–¥–∏–Ω–∏
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT time FROM bookings WHERE date = ?", (date,))
        booked_times = [row[0] for row in c.fetchall()]
        conn.close()
        free_times = [t for t in times if t not in booked_times]

        if not free_times:
            await query.message.reply_text("–ù–∞ —Ü—é –¥–∞—Ç—É –≤—Å—ñ –≥–æ–¥–∏–Ω–∏ –∑–∞–π–Ω—è—Ç—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –¥–∞—Ç—É.")
            return

        keyboard = [
            [InlineKeyboardButton(time, callback_data=f"time_{time}")]
            for time in free_times
        ]
        await query.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data['step'] = None

    elif query.data.startswith("time_"):
        time = query.data.replace("time_", "")
        context.user_data['time'] = time
        await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë —Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –Ü–≤–∞–Ω–µ–Ω–∫–æ –ú–∞—Ä—ñ—è, 0931234567):")
        context.user_data['step'] = 'get_fullinfo'

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_step = context.user_data.get('step')
    text = update.message.text

    if user_step == 'set_schedule' and update.effective_user.id == ADMIN_ID:
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("DELETE FROM schedule")
        for line in text.strip().split('\n'):
            if ':' in line:
                date, times = line.split(':', 1)
                c.execute("INSERT INTO schedule (date, times) VALUES (?, ?)", (date.strip(), times.strip()))
        conn.commit()
        conn.close()
        await update.message.reply_text("–ì—Ä–∞—Ñ—ñ–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
        context.user_data['step'] = None
        return

    if user_step == 'get_fullinfo':
        context.user_data['fullinfo'] = text
        procedure = context.user_data.get('procedure')
        date = context.user_data.get('date')
        time = context.user_data.get('time')
        fullinfo = context.user_data.get('fullinfo')
        user_id = update.effective_user.id

        try:
            name, phone = [s.strip() for s in fullinfo.split(',', 1)]
        except Exception:
            name, phone = fullinfo.strip(), "N/A"

        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("INSERT INTO bookings (user_id, name, phone, procedure, date, time) VALUES (?, ?, ?, ?, ?, ?)",
                  (user_id, name, phone, procedure, date, time))
        conn.commit()
        conn.close()

        add_to_google_sheet(name, "", phone, procedure, date, time)

        keyboard = [
            [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏", callback_data='book')],
            [InlineKeyboardButton("üìÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –º—ñ–π –∑–∞–ø–∏—Å", callback_data='check_booking')]
        ]
        await update.message.reply_text(
            f"‚úÖ –í–∞—Å –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ {procedure} {date} –æ {time}. –î—è–∫—É—î–º–æ, {name}!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

        # –ê–¥–º—ñ–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"""üì• –ù–æ–≤–∏–π –∑–∞–ø–∏—Å:
–ü–Ü–ë/–¢–µ–ª–µ—Ñ–æ–Ω: {name} / {phone}
–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {procedure}
–î–∞—Ç–∞: {date} –æ {time}"""
        )

        # –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–∞ –¥–æ–±—É –æ 10:00
        event_time = datetime.strptime(f"{date} {time}", "%d.%m %H:%M")
        remind_day = event_time - timedelta(days=1)
        remind_time = remind_day.replace(hour=10, minute=0, second=0, microsecond=0)
        now = datetime.now()
        if remind_time > now:
            scheduler.add_job(
                send_reminder,
                'date',
                run_date=remind_time,
                args=[user_id, procedure, date, time]
            )
            scheduler.start()

        context.user_data.clear()

    elif user_step == 'check_phone':
        phone = text.strip()
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT name, procedure, date, time FROM bookings WHERE phone LIKE ?", (f"%{phone}%",))
        rows = c.fetchall()
        conn.close()
        if rows:
            reply = "–í–∞—à—ñ –∑–∞–ø–∏—Å–∏:\n" + "\n".join(
                [f"{name}, {procedure}, {date} –æ {time}" for name, procedure, date, time in rows]
            )
        else:
            reply = "–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        await update.message.reply_text(reply)
        context.user_data['step'] = None

    else:
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫ /start")

async def send_reminder(user_id, procedure, date, time):
    from telegram import Bot
    bot = Bot(token=TOKEN)
    try:
        await bot.send_message(
            chat_id=user_id,
            text=f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è! –í–∞—à –∑–∞–ø–∏—Å: {procedure} {date} –æ {time}."
        )
    except Exception as e:
        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {e}")

# –î–æ–¥–∞—Ç–∫–æ–≤–æ: –∫–æ–º–∞–Ω–¥–∞ /mybookings (–∑–∞–ø–∏—Å–∏ –¥–ª—è user_id)
async def mybookings_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT procedure, date, time FROM bookings WHERE user_id=?", (user_id,))
    rows = c.fetchall()
    conn.close()
    if rows:
        reply = "–í–∞—à—ñ –∑–∞–ø–∏—Å–∏:\n" + "\n".join([f"{proc}, {date} –æ {time}" for proc, date, time in rows])
    else:
        reply = "–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    await update.message.reply_text(reply)

set_schedule_handler = schedule_handler

def main():
    init_db()
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("schedule", schedule_handler))
    app.add_handler(CommandHandler("set_schedule", set_schedule_handler))
    app.add_handler(CommandHandler("mybookings", mybookings_handler))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    app.run_polling()

if __name__ == "__main__":
    main()

from dotenv import load_dotenv
import os

load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMIN_ID = int(os.environ["ADMIN_ID"])
MASTER_PHONE = "+380976853623"

import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes,
    MessageHandler, filters
)
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, timedelta
from google_sheets import add_to_google_sheet

scheduler = BackgroundScheduler()

INSTAGRAM_LINK = "https://www.instagram.com/safroniuk_brows_lashes?utm_source=ig_web_button_share_sheet&igsh=ZDNlZDc0MzIxNw=="

def init_db():
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS bookings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            phone TEXT,
            procedure TEXT,
            date TEXT,
            time TEXT,
            user_id INTEGER,
            status TEXT DEFAULT '–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è'
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS schedule (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT,
            times TEXT
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS deleted_days (
            date TEXT PRIMARY KEY
        )
    """)
    conn.commit()
    conn.close()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üëë –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É", callback_data='book')],
        [InlineKeyboardButton("üìã –ú–æ—ó –∑–∞–ø–∏—Å–∏", callback_data='check_booking')],
        [InlineKeyboardButton("üì∏ Instagram", callback_data='instagram')],
        [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
    ]
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–¥–º—ñ–Ω–∞
    if update.effective_user.id == ADMIN_ID:
        keyboard.append([InlineKeyboardButton("üóìÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫", callback_data='edit_schedule')])
    await update.message.reply_text(
        "‚ú® –í—ñ—Ç–∞—é –≤ beauty-–±–æ—Ç—ñ! –¢—É—Ç –∫–æ–∂–Ω–∞ –¥—ñ–≤—á–∏–Ω–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —á–∞—Å –¥–ª—è —Å–µ–±–µ —Ç–∞ —Å–≤–æ–≥–æ –æ–±—Ä–∞–∑—É üíñ\n\n"
        "–û–±–∏—Ä–∞–π –¥—ñ—é –Ω–∏–∂—á–µ ‚Äî —ñ –≥–∞–π–¥–∞ –¥–æ –∫—Ä–∞—Å–∏! üå∏",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id == ADMIN_ID:
        text = (
            "üëë *–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*\n\n"
            "/start ‚Äî –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
            "/mybookings ‚Äî –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–≤–æ—ó –∑–∞–ø–∏—Å–∏\n"
            "/help ‚Äî —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —Ç–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
            "/instagram ‚Äî Instagram –º–∞–π—Å—Ç—Ä–∞\n"
            "/calendar ‚Äî –∫–∞–ª–µ–Ω–¥–∞—Ä –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ (–∞–¥–º—ñ–Ω—É)\n"
            "/weekcalendar ‚Äî –∫–∞–ª–µ–Ω–¥–∞—Ä –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å (–∞–¥–º—ñ–Ω—É)\n\n"
            "*–ê–¥–º—ñ–Ω—É –¥–æ—Å—Ç—É–ø–Ω–æ:*\n"
            "/schedule ‚Äî –∑–º—ñ–Ω–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ (—Ç–µ–∫—Å—Ç–æ–º)\n"
            "/edit_schedule ‚Äî —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏\n"
            "/delete_day ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ –¥–µ–Ω—å –∑ –≥—Ä–∞—Ñ—ñ–∫–∞"
        )
    else:
        text = (
            "‚ú® *–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*\n\n"
            "/start ‚Äî –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
            "/mybookings ‚Äî –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–≤–æ—ó –∑–∞–ø–∏—Å–∏\n"
            "/help ‚Äî —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —Ç–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
            "/instagram ‚Äî Instagram –º–∞–π—Å—Ç—Ä–∞"
        )
    text += f"\n\nüìû –ú–∞–π—Å—Ç–µ—Ä: {MASTER_PHONE}"
    await update.message.reply_text(text, parse_mode='Markdown')

async def instagram_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üå∏ *–ü—ñ–¥–ø–∏—Å—É–π—Å—è –Ω–∞ –º—ñ–π Instagram!* üå∏\n\n"
        "–¢—É—Ç —Ç–∏ –∑–Ω–∞–π–¥–µ—à –º–æ—ó —Ä–æ–±–æ—Ç–∏, –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏, –∞–∫—Ç—É–∞–ª—å–Ω—ñ –∞–∫—Ü—ñ—ó —ñ —Ç—Ä–æ—Ö–∏ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è –¥–ª—è —Å–µ–±–µ:\n"
        f"{INSTAGRAM_LINK}\n\n"
        "üëë @safroniuk_brows_lashes ‚Äî —Ä–∞–∑–æ–º –¥–æ –∫—Ä–∞—Å–∏!"
    )
    text += f"\n\nüìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∑–∞–ø–∏—Å—É/–∑–≤ º—è–∑–∫—É: {MASTER_PHONE}"
    if hasattr(update, "message") and update.message:
        await update.message.reply_text(text, parse_mode="Markdown", disable_web_page_preview=False)
    else:
        await update.callback_query.message.reply_text(text, parse_mode="Markdown", disable_web_page_preview=False)

# ---------- –ù–û–í–ò–ô –ë–õ–û–ö: —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ ----------

async def edit_schedule_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return
    await show_schedule_days(update, context)

async def show_schedule_days(update_or_query, context):
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT date, times FROM schedule ORDER BY date")
    days = c.fetchall()
    conn.close()
    keyboard = []
    for day, times in days:
        keyboard.append([
            InlineKeyboardButton(f"{day}", callback_data=f"edit_day_{day}"),
            InlineKeyboardButton("‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delday_{day}")
        ])
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –¥–µ–Ω—å", callback_data="add_day")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")])
    if hasattr(update_or_query, 'message') and update_or_query.message:
        await update_or_query.message.reply_text("üóìÔ∏è –û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update_or_query.edit_message_text("üóìÔ∏è –û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:", reply_markup=InlineKeyboardMarkup(keyboard))

async def show_edit_day(update, context, day):
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT times FROM schedule WHERE date=?", (day,))
    row = c.fetchone()
    conn.close()
    times = [t.strip() for t in row[0].split(',')] if row and row[0] else []
    keyboard = []
    for t in times:
        keyboard.append([InlineKeyboardButton(f"{t}", callback_data=f"none"), InlineKeyboardButton("‚ùå", callback_data=f"delhour_{day}_{t}")])
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –≥–æ–¥–∏–Ω—É", callback_data=f"addhour_{day}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –¥–Ω—ñ–≤", callback_data="edit_schedule")])
    await update.callback_query.edit_message_text(f"–ì–æ–¥–∏–Ω–∏ –¥–ª—è {day}:", reply_markup=InlineKeyboardMarkup(keyboard))

async def add_day_handler(update, context):
    await update.callback_query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ 31.05:")
    context.user_data["step"] = "add_day"

async def process_add_day(update, context):
    day = update.message.text.strip()
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT 1 FROM schedule WHERE date=?", (day,))
    if c.fetchone():
        await update.message.reply_text("–¢–∞–∫–∏–π –¥–µ–Ω—å –≤–∂–µ —î —É –≥—Ä–∞—Ñ—ñ–∫—É.")
    else:
        c.execute("INSERT INTO schedule (date, times) VALUES (?, ?)", (day, ""))
        conn.commit()
        await update.message.reply_text(f"–î–µ–Ω—å {day} –¥–æ–¥–∞–Ω–æ –¥–æ –≥—Ä–∞—Ñ—ñ–∫–∞!")
    conn.close()
    context.user_data["step"] = None
    await show_schedule_days(update, context)

async def delday_handler(update, context, day):
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("DELETE FROM schedule WHERE date=?", (day,))
    conn.commit()
    conn.close()
    await update.callback_query.edit_message_text(f"–î–µ–Ω—å {day} –≤–∏–¥–∞–ª–µ–Ω–æ.")
    await show_schedule_days(update, context)

async def delhour_handler(update, context, day, hour):
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT times FROM schedule WHERE date=?", (day,))
    row = c.fetchone()
    times = [t.strip() for t in row[0].split(',')] if row and row[0] else []
    times = [t for t in times if t != hour]
    c.execute("UPDATE schedule SET times=? WHERE date=?", (",".join(times), day))
    conn.commit()
    conn.close()
    await show_edit_day(update, context, day)

async def addhour_start(update, context, day):
    context.user_data["step"] = "add_hour"
    context.user_data["add_hour_day"] = day
    await update.callback_query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –≥–æ–¥–∏–Ω—É –¥–ª—è –¥–Ω—è " + day + " —É —Ñ–æ—Ä–º–∞—Ç—ñ 15:00:")

async def process_addhour(update, context):
    day = context.user_data.get("add_hour_day")
    hour = update.message.text.strip()
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT times FROM schedule WHERE date=?", (day,))
    row = c.fetchone()
    times = [t.strip() for t in row[0].split(',')] if row and row[0] else []
    if hour in times:
        await update.message.reply_text("–¢–∞–∫–∞ –≥–æ–¥–∏–Ω–∞ –≤–∂–µ —î.")
    else:
        times.append(hour)
        times = sorted(times)  # –°–æ—Ä—Ç—É—î–º–æ –≥–æ–¥–∏–Ω–∏
        c.execute("UPDATE schedule SET times=? WHERE date=?", (",".join(times), day))
        conn.commit()
        await update.message.reply_text(f"–ì–æ–¥–∏–Ω—É {hour} –¥–æ–¥–∞–Ω–æ.")
    conn.close()
    context.user_data["step"] = None
    context.user_data["add_hour_day"] = None
    await show_edit_day(update, context, day)

# ----------- /–∫—ñ–Ω–µ—Ü—å –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫—É ----------

async def schedule_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return
    await update.message.reply_text(
        "üóìÔ∏è –í–≤–µ–¥—ñ—Ç—å –≥—Ä–∞—Ñ—ñ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n\n28.05: 14:00,15:00,16:00\n29.05: 15:00,16:00"
    )
    context.user_data['step'] = 'set_schedule'

async def delete_day_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return
    today = datetime.now().date()
    dates = set()
    for i in range(7):
        d = today + timedelta(days=i)
        dates.add(d.strftime("%d.%m"))
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT DISTINCT date FROM schedule")
    for row in c.fetchall():
        dates.add(row[0])
    conn.close()
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT date FROM deleted_days")
    deleted = {row[0] for row in c.fetchall()}
    conn.close()
    dates = [d for d in dates if d not in deleted]
    dates = sorted(list(dates), key=lambda x: datetime.strptime(x + f".{datetime.now().year}", "%d.%m.%Y"))
    if not dates:
        await update.message.reply_text("–ù–µ–º–∞—î –¥–Ω—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
        return
    keyboard = [
        [InlineKeyboardButton(f"‚ùå {date}", callback_data=f"delday_{date}")] for date in dates
    ]
    await update.message.reply_text("üóëÔ∏è –û–±–µ—Ä–∏ –¥–µ–Ω—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è (–≤—ñ–Ω –∑–Ω–∏–∫–Ω–µ –¥–ª—è –∑–∞–ø–∏—Å—É):", reply_markup=InlineKeyboardMarkup(keyboard))
    context.user_data['step'] = None

async def calendar_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return

    today = datetime.now().date()
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute(
        "SELECT date, time, procedure, name, phone, status FROM bookings "
        "WHERE date=? ORDER BY date, time", (today.strftime("%d.%m"),)
    )
    rows = c.fetchall()
    conn.close()

    if not rows:
        await update.message.reply_text("–°—å–æ–≥–æ–¥–Ω—ñ –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î.")
        return

    text = f"üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ {today.strftime('%d.%m.%Y')}:\n\n"
    for rec in rows:
        date, time, procedure, name, phone, status = rec
        text += (
            f"üïí {time} ‚Äî {procedure}\n"
            f"üë§ {name}, üì± {phone}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
        )
    await update.message.reply_text(text)

# --- –î–∞–ª—ñ –∑–∞–ª–∏—à–∞—î–º–æ —Ç–≤—ñ–π –æ—Å–Ω–æ–≤–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–µ–∑ –∑–º—ñ–Ω ---

# –°—é–¥–∏ –¥–æ–¥–∞–π –≤—Å—ñ —Å–≤–æ—ó —ñ–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó (button_handler, text_handler, mybookings_handler, send_reminder, week_calendar_handler, —ñ —Ç.–¥.)
# –û—Å—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π button_handler –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –Ω–æ–≤–∏—Ö –∫–Ω–æ–ø–æ–∫:

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # --- –ù–û–í–Ü –≥—ñ–ª–∫–∏ –¥–ª—è edit_schedule ---
    if query.data == 'edit_schedule':
        await show_schedule_days(update, context)
        return
    if query.data == 'add_day':
        await add_day_handler(update, context)
        return
    if query.data.startswith('edit_day_'):
        day = query.data.replace('edit_day_', '')
        await show_edit_day(update, context, day)
        return
    if query.data.startswith('delday_'):
        day = query.data.replace('delday_', '')
        await delday_handler(update, context, day)
        return
    if query.data.startswith('delhour_'):
        part = query.data.replace('delhour_', '')
        day, hour = part.split('_')
        await delhour_handler(update, context, day, hour)
        return
    if query.data.startswith('addhour_'):
        day = query.data.replace('addhour_', '')
        await addhour_start(update, context, day)
        return

    # --- –Ü–Ω—à—ñ callback-–∏ –∑ —Ç–≤–æ–≥–æ –∫–æ–¥—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ book, confirm, cancel —ñ —Ç.–¥. ---
    # ...

# --- –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–Ω—è/–≥–æ–¥–∏–Ω–∏ (user_data["step"]) ---
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_step = context.user_data.get('step')
    text = update.message.text

    if user_step == 'set_schedule' and update.effective_user.id == ADMIN_ID:
        # (—Ü–µ–π –±–ª–æ–∫ –∑–∞–ª–∏—à —è–∫ –±—É–≤)
        # ...
        return

    if user_step == "add_day":
        await process_add_day(update, context)
        return

    if user_step == "add_hour":
        await process_addhour(update, context)
        return

    # (–¥–∞–ª—ñ —Ç–≤—ñ–π —Å—Ç–∞—Ä–∏–π text_handler...)

# --- main ---
def main():
    init_db()
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_handler))
    app.add_handler(CommandHandler("instagram", instagram_handler))
    app.add_handler(CommandHandler("calendar", calendar_handler))
    app.add_handler(CommandHandler("weekcalendar", calendar_handler))
    app.add_handler(CommandHandler("schedule", schedule_handler))
    app.add_handler(CommandHandler("set_schedule", schedule_handler))
    app.add_handler(CommandHandler("edit_schedule", edit_schedule_handler))
    app.add_handler(CommandHandler("delete_day", delete_day_handler))
    # –¥–æ–¥–∞–π —Å–≤–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω—å, –∑–∞–ø–∏—Å—É, –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —ñ —Ç.–¥.
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    app.run_polling()

if __name__ == "__main__":
    main()

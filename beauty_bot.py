from dotenv import load_dotenv
import os

load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')

import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes,
    MessageHandler, filters
)
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, timedelta
from google_sheets import add_to_google_sheet

ADMIN_ID = int(os.environ["ADMIN_ID"])
scheduler = BackgroundScheduler()

INSTAGRAM_LINK = "https://www.instagram.com/safroniuk_brows_lashes?igsh=YXRkZW90eDEwcXI5"

PROCEDURE_OPTIONS = [
    ("‚ú® –ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤ (—ñ–¥–µ–∞–ª—å–Ω–∞ —Ñ–æ—Ä–º–∞)", "proc_brows"),
    ("üé® –§–∞—Ä–±—É–≤–∞–Ω–Ω—è + –∫–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤", "proc_tint_brows"),
    ("üåü –õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤ (WOW-–µ—Ñ–µ–∫—Ç)", "proc_lam_brows"),
    ("üëÅÔ∏è –õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π (–≤–∏—Ä–∞–∑–Ω–∏–π –ø–æ–≥–ª—è–¥)", "proc_lam_lashes"),
]

def init_db():
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS bookings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            phone TEXT,
            procedure TEXT,
            date TEXT,
            time TEXT,
            user_id INTEGER,
            status TEXT DEFAULT '–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è'
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS schedule (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT,
            times TEXT
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS deleted_days (
            date TEXT PRIMARY KEY
        )
    """)
    conn.commit()
    conn.close()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üëë –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É", callback_data='book')],
        [InlineKeyboardButton("üìã –ú–æ—ó –∑–∞–ø–∏—Å–∏", callback_data='check_booking')],
        [InlineKeyboardButton("üì∏ Instagram", callback_data='instagram')],
        [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
    ]
    await update.message.reply_text(
        "üëë –í—ñ—Ç–∞—é –≤ beauty-–±–æ—Ç—ñ! –¢—É—Ç –∫–æ–∂–Ω–∞ –¥—ñ–≤—á–∏–Ω–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —á–∞—Å –¥–ª—è —Å–µ–±–µ —Ç–∞ —Å–≤–æ–≥–æ –æ–±—Ä–∞–∑—É ‚ú®\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id == ADMIN_ID:
        text = (
            "üëë *–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*\n\n"
            "/start ‚Äî –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
            "/mybookings ‚Äî –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–≤–æ—ó –∑–∞–ø–∏—Å–∏\n"
            "/help ‚Äî —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —Ç–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
            "/instagram ‚Äî Instagram –º–∞–π—Å—Ç—Ä–∞\n"
            "/calendar ‚Äî –∫–∞–ª–µ–Ω–¥–∞—Ä –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ (–∞–¥–º—ñ–Ω—É)\n"
            "/weekcalendar ‚Äî –∫–∞–ª–µ–Ω–¥–∞—Ä –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å (–∞–¥–º—ñ–Ω—É)\n\n"
            "*–ê–¥–º—ñ–Ω—É –¥–æ—Å—Ç—É–ø–Ω–æ:*\n"
            "/schedule ‚Äî –∑–º—ñ–Ω–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫\n"
            "/set_schedule ‚Äî –∑–º—ñ–Ω–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)\n"
            "/delete_day ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ –¥–µ–Ω—å –∑ –≥—Ä–∞—Ñ—ñ–∫–∞"
        )
    else:
        text = (
            "‚ú® *–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*\n\n"
            "/start ‚Äî –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
            "/mybookings ‚Äî –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–≤–æ—ó –∑–∞–ø–∏—Å–∏\n"
            "/help ‚Äî —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —Ç–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
            "/instagram ‚Äî Instagram –º–∞–π—Å—Ç—Ä–∞"
        )
    await update.message.reply_text(text, parse_mode='Markdown')

async def instagram_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üå∏ *–ü—ñ–¥–ø–∏—Å—É–π—Å—è –Ω–∞ –Ω–∞—à Instagram!* üå∏\n\n"
        "–¢—É—Ç —Ç–∏ –∑–Ω–∞–π–¥–µ—à —â–µ –±—ñ–ª—å—à–µ —Ñ–æ—Ç–æ —Ä–æ–±—ñ—Ç, –∫–æ—Ä–∏—Å–Ω–∏—Ö –ø–æ—Ä–∞–¥ —Ç–∞ –∞–∫—Ü—ñ–π –¥–ª—è —Å–≤–æ—ó—Ö –∫–ª—ñ—î–Ω—Ç–æ–∫:\n"
        f"{INSTAGRAM_LINK}\n\n"
        "üëë –ó–±–µ—Ä–µ–∂–∏ —Å–æ–±—ñ —ñ–¥–µ—ó —Ç–∞ –¥—ñ–ª–∏—Å—å —ñ–∑ –ø–æ–¥—Ä—É–≥–∞–º–∏!"
    )
    if hasattr(update, "message") and update.message:
        await update.message.reply_text(text, parse_mode="Markdown", disable_web_page_preview=False)
    else:
        await update.callback_query.message.reply_text(text, parse_mode="Markdown", disable_web_page_preview=False)

async def schedule_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return
    await update.message.reply_text(
        "üóìÔ∏è –í–≤–µ–¥—ñ—Ç—å –≥—Ä–∞—Ñ—ñ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n\n28.05: 14:00,15:00,16:00\n29.05: 15:00,16:00"
    )
    context.user_data['step'] = 'set_schedule'

async def delete_day_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return
    today = datetime.now().date()
    dates = set()
    for i in range(7):
        d = today + timedelta(days=i)
        dates.add(d.strftime("%d.%m"))
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT DISTINCT date FROM schedule")
    for row in c.fetchall():
        dates.add(row[0])
    conn.close()
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT date FROM deleted_days")
    deleted = {row[0] for row in c.fetchall()}
    conn.close()
    dates = [d for d in dates if d not in deleted]
    dates = sorted(list(dates), key=lambda x: datetime.strptime(x + f".{datetime.now().year}", "%d.%m.%Y"))
    if not dates:
        await update.message.reply_text("–ù–µ–º–∞—î –¥–Ω—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
        return
    keyboard = [
        [InlineKeyboardButton(f"‚ùå {date}", callback_data=f"delday_{date}")] for date in dates
    ]
    await update.message.reply_text("üóëÔ∏è –û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è (–≤—ñ–Ω –∑–Ω–∏–∫–Ω–µ –¥–ª—è –∑–∞–ø–∏—Å—É):", reply_markup=InlineKeyboardMarkup(keyboard))
    context.user_data['step'] = None

async def calendar_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return

    today = datetime.now().date()
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute(
        "SELECT date, time, procedure, name, phone, status FROM bookings "
        "WHERE date=? ORDER BY date, time", (today.strftime("%d.%m"),)
    )
    rows = c.fetchall()
    conn.close()

    if not rows:
        await update.message.reply_text("–°—å–æ–≥–æ–¥–Ω—ñ –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î.")
        return

    text = f"üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ {today.strftime('%d.%m.%Y')}:\n\n"
    for rec in rows:
        date, time, procedure, name, phone, status = rec
        text += (
            f"üïí {time} ‚Äî {procedure}\n"
            f"üë§ {name}, üì± {phone}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
        )
    await update.message.reply_text(text)

async def week_calendar_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return

    today = datetime.now().date()
    week_dates = [(today + timedelta(days=i)).strftime("%d.%m") for i in range(7)]
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute(
        f"SELECT date, time, procedure, name, phone, status FROM bookings "
        f"WHERE date IN ({','.join(['?']*len(week_dates))}) ORDER BY date, time", week_dates
    )
    rows = c.fetchall()
    conn.close()

    if not rows:
        await update.message.reply_text("–ù–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î.")
        return

    text = "üìÜ –ó–∞–ø–∏—Å–∏ –Ω–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å:\n\n"
    for rec in rows:
        date, time, procedure, name, phone, status = rec
        text += (
            f"üìÖ {date} üïí {time} ‚Äî {procedure}\n"
            f"üë§ {name}, üì± {phone}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
        )
    await update.message.reply_text(text)

async def show_procedure_multi_select(query, context):
    selected = context.user_data.get('procedures', [])
    keyboard = []
    for title, code in PROCEDURE_OPTIONS:
        mark = "‚úÖ" if code in selected else "‚òëÔ∏è"
        keyboard.append([InlineKeyboardButton(f"{mark} {title}", callback_data=f"multi_proc_{code}")])
    keyboard.append([InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—ñ", callback_data="procedures_next")])
    text = (
        "üíÖ –û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∞–±–æ –∫—ñ–ª—å–∫–∞ –± º—é—Ç—ñ-–ø—Ä–æ—Ü–µ–¥—É—Ä (–º–æ–∂–Ω–∞ –Ω–∞—Ç–∏—Å–∫–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤):\n"
        "_–ü—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ'_"
    )
    if query.message:
        await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
    else:
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–æ—á–∞—Ç–æ–∫ –º—É–ª—å—Ç–∏–≤–∏–±–æ—Ä—É –ø—Ä–æ—Ü–µ–¥—É—Ä
    if query.data == 'book':
        context.user_data['procedures'] = []
        await show_procedure_multi_select(query, context)
        return

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è/–∑–Ω—è—Ç—Ç—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
    if query.data.startswith("multi_proc_"):
        code = query.data.replace("multi_proc_", "")
        selected = context.user_data.get('procedures', [])
        if code in selected:
            selected.remove(code)
        else:
            selected.append(code)
        context.user_data['procedures'] = selected
        await show_procedure_multi_select(query, context)
        return

    # –î–∞–ª—ñ ‚Äî –¥–æ –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏
    if query.data == "procedures_next":
        if not context.user_data.get('procedures'):
            await query.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω—É –ø—Ä–æ—Ü–µ–¥—É—Ä—É!")
            return
        today = datetime.now().date()
        dates = []
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT date FROM deleted_days")
        deleted = {row[0] for row in c.fetchall()}
        conn.close()
        for i in range(7):
            d = today + timedelta(days=i)
            date_str = d.strftime("%d.%m")
            if date_str not in deleted:
                dates.append(date_str)
        if not dates:
            await query.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–Ω—ñ–≤ –¥–ª—è –∑–∞–ø–∏—Å—É. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –º–∞–π—Å—Ç—Ä–∞!")
            return
        keyboard = [
            [InlineKeyboardButton(f"üìÖ –û–±–∏—Ä–∞—é {date} üíã", callback_data=f'date_{date}')] for date in dates
        ]
        await query.message.reply_text(
            "üíó –û–±–µ—Ä–∏ –±–∞–∂–∞–Ω—É –¥–∞—Ç—É –¥–ª—è —Ç–≤–æ—î—ó –∫—Ä–∞—Å–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data['step'] = None
        return

    if query.data == 'check_booking':
        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–±–∞—á–∏—Ç—å —Å–≤–æ—ó –∑–∞–ø–∏—Å–∏ (–∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è/–≤—ñ–¥–º—ñ–Ω–∏)
        user_id = query.from_user.id
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT id, procedure, date, time, status FROM bookings WHERE user_id=?", (user_id,))
        rows = c.fetchall()
        conn.close()
        if rows:
            for rec in rows:
                booking_id, procedure, date, time, status = rec
                msg = f"‚ú® {procedure}\nüóìÔ∏è {date} –æ {time}\n–°—Ç–∞—Ç—É—Å: *{status}*"
                buttons = []
                if status == "–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è":
                    buttons.append(InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{booking_id}"))
                    buttons.append(InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data=f"cancel_{booking_id}"))
                reply_markup = InlineKeyboardMarkup([buttons]) if buttons else None
                await query.message.reply_text(msg, reply_markup=reply_markup, parse_mode="Markdown")
        else:
            await query.message.reply_text("–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ß–∞—Å –æ–Ω–æ–≤–∏—Ç–∏ —Å–≤—ñ–π –æ–±—Ä–∞–∑! üíÑ")

    elif query.data == 'help':
        await help_handler(update, context)

    elif query.data == 'instagram':
        await instagram_handler(update, context)

    elif query.data.startswith('date_'):
        date = query.data.replace('date_', '')
        context.user_data['date'] = date
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT times FROM schedule WHERE date = ?", (date,))
        row = c.fetchone()
        conn.close()
        if row:
            times = [t.strip() for t in row[0].split(',')]
        else:
            day = datetime.strptime(date + f".{datetime.now().year}", "%d.%m.%Y").weekday()
            if day < 5:
                times = [f"{h:02d}:00" for h in range(14, 19)]
            else:
                times = [f"{h:02d}:00" for h in range(11, 19)]
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT time FROM bookings WHERE date = ?", (date,))
        booked_times = [row[0] for row in c.fetchall()]
        conn.close()
        free_times = [t for t in times if t not in booked_times]
        if not free_times:
            await query.message.reply_text("üòî –í—Å—ñ –≥–æ–¥–∏–Ω–∏ –Ω–∞ —Ü–µ–π –¥–µ–Ω—å –≤–∂–µ –∑–∞–π–Ω—è—Ç—ñ. –°–ø—Ä–æ–±—É–π –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –¥–µ–Ω—å!")
            return
        keyboard = [
            [InlineKeyboardButton(f"üïí {time} | –ú–æ—î —ñ–¥–µ–∞–ª—å–Ω–µ –≤—ñ–∫–æ–Ω—Ü–µ üíñ", callback_data=f"time_{time}")]
            for time in free_times
        ]
        await query.message.reply_text(
            "‚è∞ –û–±–µ—Ä–∏ –∑—Ä—É—á–Ω–∏–π —á–∞—Å –¥–ª—è —Å–≤–æ—î—ó –± º—é—Ç—ñ-–ø—Ä–æ—Ü–µ–¥—É—Ä–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data['step'] = None

    elif query.data.startswith("time_"):
        time = query.data.replace("time_", "")
        context.user_data['time'] = time
        await query.message.reply_text(
            "üë∏ –í–≤–µ–¥–∏ *–ü–Ü–ë* —Ç–∞ *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É* —á–µ—Ä–µ–∑ –∫–æ–º—É:\n\n"
            "_–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –Ø—Ä–∏–Ω–∞ –ö–≤—ñ—Ç–∫–æ–≤–∞, 0971234567_\n"
            "–¢–≤—ñ–π –º–∞–π—Å—Ç–µ—Ä –∑–∞–ø–∏—à–µ —Ç–µ–±–µ –∑ —É—Å–º—ñ—à–∫–æ—é! üòä",
            parse_mode='Markdown'
        )
        context.user_data['step'] = 'get_fullinfo'

    elif query.data.startswith('delday_') and query.from_user.id == ADMIN_ID:
        date = query.data.replace('delday_', '')
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("INSERT OR IGNORE INTO deleted_days (date) VALUES (?)", (date,))
        conn.commit()
        conn.close()
        await query.message.reply_text(f"‚úÖ –î–µ–Ω—å {date} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –≥—Ä–∞—Ñ—ñ–∫–∞. –ö–ª—ñ—î–Ω—Ç–∏ –±—ñ–ª—å—à–µ –Ω–µ –ø–æ–±–∞—á–∞—Ç—å —Ü–µ–π –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å—É.")

    # --- –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É ---
    elif query.data.startswith('confirm_'):
        booking_id = int(query.data.replace('confirm_', ''))
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("UPDATE bookings SET status=? WHERE id=?", ("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ", booking_id))
        conn.commit()
        c.execute("SELECT procedure, date, time FROM bookings WHERE id=?", (booking_id,))
        row = c.fetchone()
        conn.close()
        if row:
            procedure, date, time = row
            await query.message.reply_text(
                f"‚úÖ –í–∞—à –∑–∞–ø–∏—Å –Ω–∞ {procedure} {date} –æ {time} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!"
            )

    # --- –í—ñ–¥–º—ñ–Ω–∞ –∑–∞–ø–∏—Å—É ---
    elif query.data.startswith('cancel_'):
        booking_id = int(query.data.replace('cancel_', ''))
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT name, procedure, date, time FROM bookings WHERE id=?", (booking_id,))
        row = c.fetchone()
        c.execute("DELETE FROM bookings WHERE id=?", (booking_id,))
        conn.commit()
        conn.close()
        if row:
            name, procedure, date, time = row
            await query.message.reply_text("‚ùå –í–∞—à –∑–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"‚ùóÔ∏è–ö–ª—ñ—î–Ω—Ç {name} —Å–∫–∞—Å—É–≤–∞–≤ –∑–∞–ø–∏—Å: {procedure} {date} –æ {time}"
            )

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_step = context.user_data.get('step')
    text = update.message.text

    if user_step == 'set_schedule' and update.effective_user.id == ADMIN_ID:
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("DELETE FROM schedule")
        for line in text.strip().split('\n'):
            if ':' in line:
                date, times = line.split(':', 1)
                c.execute("INSERT INTO schedule (date, times) VALUES (?, ?)", (date.strip(), times.strip()))
        conn.commit()
        conn.close()
        await update.message.reply_text("‚úÖ –ì—Ä–∞—Ñ—ñ–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
        context.user_data['step'] = None
        return

    if user_step == 'get_fullinfo':
        context.user_data['fullinfo'] = text
        procedures = []
        procedure_codes = context.user_data.get('procedures', [])
        for code in procedure_codes:
            for title, code_value in PROCEDURE_OPTIONS:
                if code == code_value:
                    procedures.append(title)
        date = context.user_data.get('date')
        time = context.user_data.get('time')
        fullinfo = context.user_data.get('fullinfo')
        user_id = update.effective_user.id
        try:
            name, phone = [s.strip() for s in fullinfo.split(',', 1)]
        except Exception:
            name, phone = fullinfo.strip(), "N/A"
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        booking_ids = []
        for procedure in procedures:
            c.execute("INSERT INTO bookings (user_id, name, phone, procedure, date, time, status) VALUES (?, ?, ?, ?, ?, ?, ?)",
                      (user_id, name, phone, procedure, date, time, "–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"))
            booking_ids.append(c.lastrowid)
            add_to_google_sheet(name, "", phone, procedure, date, time)
        conn.commit()
        conn.close()
        if len(procedures) == 1:
            procedures_text = procedures[0]
        else:
            procedures_text = '\n'.join([f"‚Ä¢ {p}" for p in procedures])
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{booking_ids[0]}"),
             InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data=f"cancel_{booking_ids[0]}")],
            [InlineKeyboardButton("üëë –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è —â–µ", callback_data='book')],
            [InlineKeyboardButton("üìã –ú–æ—ó –∑–∞–ø–∏—Å–∏", callback_data='check_booking')],
            [InlineKeyboardButton("üì∏ Instagram", callback_data='instagram')],
            [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
        ]
        await update.message.reply_text(
            f"üéâ –í–∏ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞:\n{procedures_text}\n{date} –æ {time}!\n"
            f"–í–∞—à –± º—é—Ç—ñ-–º–∞–π—Å—Ç–µ—Ä –ú–∞—Ä—ñ—è –≤–∂–µ —á–µ–∫–∞—î –∑—É—Å—Ç—Ä—ñ—á—ñ –∑ –≤–∞–º–∏ üíñ\n"
            "–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ —É —Å–≤—ñ—Ç—ñ –∫—Ä–∞—Å–∏! üëë‚ú®\n\n"
            "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∞–±–æ —Å–∫–∞—Å—É–π—Ç–µ —Å–≤—ñ–π –∑–∞–ø–∏—Å –Ω–∏–∂—á–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"""üì• –ù–æ–≤–∏–π –∑–∞–ø–∏—Å:
–ü–Ü–ë/–¢–µ–ª–µ—Ñ–æ–Ω: {name} / {phone}
–ü—Ä–æ—Ü–µ–¥—É—Ä–∏: {', '.join(procedures)}
–î–∞—Ç–∞: {date} –æ {time}"""
        )
        event_time = datetime.strptime(f"{date} {time}", "%d.%m %H:%M")
        remind_day = event_time - timedelta(days=1)
        remind_time = remind_day.replace(hour=10, minute=0, second=0, microsecond=0)
        remind_2h = event_time - timedelta(hours=2)
        now = datetime.now()
        # –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–∞ 1 –¥–µ–Ω—å
        if remind_time > now:
            scheduler.add_job(
                send_reminder,
                'date',
                run_date=remind_time,
                args=[user_id, ', '.join(procedures), date, time, "day"]
            )
        # –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–∞ 2 –≥–æ–¥–∏–Ω–∏
        if remind_2h > now:
            scheduler.add_job(
                send_reminder,
                'date',
                run_date=remind_2h,
                args=[user_id, ', '.join(procedures), date, time, "2h"]
            )
        scheduler.start()
        context.user_data.clear()

    elif user_step == 'check_phone':
        phone = text.strip()
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT id, name, procedure, date, time, status FROM bookings WHERE phone LIKE ?", (f"%{phone}%",))
        rows = c.fetchall()
        conn.close()
        if rows:
            for rec in rows:
                booking_id, name, procedure, date, time, status = rec
                msg = f"{name}, {procedure}, {date} –æ {time}\n–°—Ç–∞—Ç—É—Å: *{status}*"
                buttons = []
                if status == "–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è":
                    buttons.append(InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{booking_id}"))
                    buttons.append(InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data=f"cancel_{booking_id}"))
                reply_markup = InlineKeyboardMarkup([buttons]) if buttons else None
                await update.message.reply_text(msg, reply_markup=reply_markup, parse_mode="Markdown")
        else:
            await update.message.reply_text("–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n\nüíÖ –ó—Ä–æ–±—ñ—Ç—å —Å–≤—ñ–π –ø–µ—Ä—à–∏–π –∑–∞–ø–∏—Å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É \"–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É\"!")
        context.user_data['step'] = None

    else:
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ —Ç–∞ –ø–æ–¥–∞—Ä—É–π—Ç–µ —Å–æ–±—ñ –∫—Ä–∞—Å—É! üíñ")

async def send_reminder(user_id, procedures, date, time, mode="day"):
    from telegram import Bot
    bot = Bot(token=TOKEN)
    try:
        if mode == "day":
            text = f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è!\n–ó–∞–≤—Ç—Ä–∞ –í–∞—à –∑–∞–ø–∏—Å: {procedures} {date} –æ {time}.\n–ë º—é—Ç—ñ-–º–∞–π—Å—Ç–µ—Ä —á–µ–∫–∞—î! üå∏"
        elif mode == "2h":
            text = f"üí¨ –í–∞—à –∑–∞–ø–∏—Å –≤–∂–µ –∑–∞ 2 –≥–æ–¥–∏–Ω–∏: {procedures} {date} –æ {time}!\n–ì–æ—Ç—É–π—Ç–µ—Å—è –¥–æ –∫—Ä–∞—Å–∏! üëë‚ú®"
        else:
            text = f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞–ø–∏—Å: {procedures} {date} –æ {time}."
        await bot.send_message(
            chat_id=user_id,
            text=text
        )
    except Exception as e:
        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {e}")

async def mybookings_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT id, procedure, date, time, status FROM bookings WHERE user_id=?", (user_id,))
    rows = c.fetchall()
    conn.close()
    if rows:
        for rec in rows:
            booking_id, procedure, date, time, status = rec
            msg = f"‚ú® {procedure}\nüóìÔ∏è {date} –æ {time}\n–°—Ç–∞—Ç—É—Å: *{status}*"
            buttons = []
            if status == "–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è":
                buttons.append(InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{booking_id}"))
                buttons.append(InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data=f"cancel_{booking_id}"))
            reply_markup = InlineKeyboardMarkup([buttons]) if buttons else None
            await update.message.reply_text(msg, reply_markup=reply_markup, parse_mode="Markdown")
    else:
        await update.message.reply_text("–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ß–∞—Å –æ–Ω–æ–≤–∏—Ç–∏ —Å–≤—ñ–π –æ–±—Ä–∞–∑! üíÑ")

set_schedule_handler = schedule_handler

def main():
    init_db()
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_handler))
    app.add_handler(CommandHandler("instagram", instagram_handler))
    app.add_handler(CommandHandler("calendar", calendar_handler))
    app.add_handler(CommandHandler("weekcalendar", week_calendar_handler))
    app.add_handler(CommandHandler("schedule", schedule_handler))
    app.add_handler(CommandHandler("set_schedule", set_schedule_handler))
    app.add_handler(CommandHandler("delete_day", delete_day_handler))
    app.add_handler(CommandHandler("mybookings", mybookings_handler))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    app.run_polling()

if __name__ == "__main__":
    main()

from dotenv import load_dotenv
import os

load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMIN_ID = int(os.environ["ADMIN_ID"])

import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes,
    MessageHandler, filters
)
from datetime import datetime, timedelta

INSTAGRAM_LINK = "https://www.instagram.com/safroniuk_brows_lashes?utm_source=ig_web_button_share_sheet&igsh=ZDNlZDc0MzIxNw=="

def init_db():
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS bookings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            phone TEXT,
            procedure TEXT,
            date TEXT,
            time TEXT,
            user_id INTEGER,
            status TEXT DEFAULT '–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è'
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS schedule (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT,
            times TEXT
        )
    """)
    conn.commit()
    conn.close()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üëë –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É", callback_data='book')],
        [InlineKeyboardButton("üìã –ú–æ—ó –∑–∞–ø–∏—Å–∏", callback_data='check_booking')],
        [InlineKeyboardButton("üì∏ Instagram", callback_data='instagram')],
        [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
    ]
    await update.message.reply_text(
        "‚ú® –í—ñ—Ç–∞—é –≤ beauty-–±–æ—Ç—ñ! –¢—É—Ç –∫–æ–∂–Ω–∞ –¥—ñ–≤—á–∏–Ω–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —á–∞—Å –¥–ª—è —Å–µ–±–µ —Ç–∞ —Å–≤–æ–≥–æ –æ–±—Ä–∞–∑—É üíñ\n\n"
        "–û–±–∏—Ä–∞–π –¥—ñ—é –Ω–∏–∂—á–µ ‚Äî —ñ –≥–∞–π–¥–∞ –¥–æ –∫—Ä–∞—Å–∏! üå∏",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id == ADMIN_ID:
        text = (
            "üëë *–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*\n\n"
            "/start ‚Äî –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
            "/mybookings ‚Äî –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–≤–æ—ó –∑–∞–ø–∏—Å–∏\n"
            "/help ‚Äî —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —Ç–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
            "/instagram ‚Äî Instagram –º–∞–π—Å—Ç—Ä–∞\n"
        )
    else:
        text = (
            "‚ú® *–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*\n\n"
            "/start ‚Äî –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
            "/mybookings ‚Äî –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–≤–æ—ó –∑–∞–ø–∏—Å–∏\n"
            "/help ‚Äî —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —Ç–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
            "/instagram ‚Äî Instagram –º–∞–π—Å—Ç—Ä–∞"
        )
    await update.message.reply_text(text, parse_mode='Markdown')

async def instagram_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üå∏ *–ü—ñ–¥–ø–∏—Å—É–π—Å—è –Ω–∞ –º—ñ–π Instagram!* üå∏\n\n"
        "–¢—É—Ç —Ç–∏ –∑–Ω–∞–π–¥–µ—à –º–æ—ó —Ä–æ–±–æ—Ç–∏, –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏, –∞–∫—Ç—É–∞–ª—å–Ω—ñ –∞–∫—Ü—ñ—ó —ñ —Ç—Ä–æ—Ö–∏ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è –¥–ª—è —Å–µ–±–µ:\n"
        f"{INSTAGRAM_LINK}\n\n"
        "üëë @safroniuk_brows_lashes ‚Äî —Ä–∞–∑–æ–º –¥–æ –∫—Ä–∞—Å–∏!"
    )
    if hasattr(update, "message") and update.message:
        await update.message.reply_text(text, parse_mode="Markdown", disable_web_page_preview=False)
    else:
        await update.callback_query.message.reply_text(text, parse_mode="Markdown", disable_web_page_preview=False)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    if query.data == 'back_to_menu':
        if query.message:
            await query.message.delete()
        if update.effective_chat:
            await update.get_bot().send_message(
                chat_id=update.effective_chat.id,
                text="‚ú® –í—ñ—Ç–∞—é –≤ beauty-–±–æ—Ç—ñ! –¢—É—Ç –∫–æ–∂–Ω–∞ –¥—ñ–≤—á–∏–Ω–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —á–∞—Å –¥–ª—è —Å–µ–±–µ —Ç–∞ —Å–≤–æ–≥–æ –æ–±—Ä–∞–∑—É üíñ\n\n"
                     "–û–±–∏—Ä–∞–π –¥—ñ—é –Ω–∏–∂—á–µ ‚Äî —ñ –≥–∞–π–¥–∞ –¥–æ –∫—Ä–∞—Å–∏! üå∏",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üëë –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É", callback_data='book')],
                    [InlineKeyboardButton("üìã –ú–æ—ó –∑–∞–ø–∏—Å–∏", callback_data='check_booking')],
                    [InlineKeyboardButton("üì∏ Instagram", callback_data='instagram')],
                    [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
                ])
            )
        context.user_data.clear()
        return

    # –í–∏–±—ñ—Ä –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
    if query.data == 'book' or query.data == 'back_to_procedure':
        keyboard = [
            [InlineKeyboardButton("‚ú® –ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤ (—ñ–¥–µ–∞–ª—å–Ω–∞ —Ñ–æ—Ä–º–∞)", callback_data='proc_brows')],
            [InlineKeyboardButton("üé® –§–∞—Ä–±—É–≤–∞–Ω–Ω—è + –∫–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤", callback_data='proc_tint_brows')],
            [InlineKeyboardButton("üåü –õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤ (WOW-–µ—Ñ–µ–∫—Ç)", callback_data='proc_lam_brows')],
            [InlineKeyboardButton("üëÅÔ∏è –õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π (–≤–∏—Ä–∞–∑–Ω–∏–π –ø–æ–≥–ª—è–¥)", callback_data='proc_lam_lashes')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data='back_to_menu')]
        ]
        await query.message.reply_text(
            "‚ú® –û–±–µ—Ä–∏ —Å–≤–æ—é –± º—é—Ç—ñ-–ø—Ä–æ—Ü–µ–¥—É—Ä—É! –°–µ—Ä–¥–µ–Ω—å–∫–æ–º –æ–±–∏—Ä–∞–π —Ç–µ, —â–æ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è –Ω–∞–π–±—ñ–ª—å—à–µ ‚Äî –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ ‚¨ÖÔ∏è —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º—Ä—ñ–π!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data.clear()
        return

    # --- –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ ---
    if query.data.startswith('proc_'):
        procedures = {
            'proc_brows': "–ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤ (—ñ–¥–µ–∞–ª—å–Ω–∞ —Ñ–æ—Ä–º–∞)",
            'proc_tint_brows': "–§–∞—Ä–±—É–≤–∞–Ω–Ω—è + –∫–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤",
            'proc_lam_brows': "–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤ (WOW-–µ—Ñ–µ–∫—Ç)",
            'proc_lam_lashes': "–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π (–≤–∏—Ä–∞–∑–Ω–∏–π –ø–æ–≥–ª—è–¥)",
        }
        procedure = procedures.get(query.data, "–ù–µ–≤—ñ–¥–æ–º–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞")
        context.user_data['procedure'] = procedure
        # –ü–æ–∫–∞–∑–∞—Ç–∏ 7 –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –¥–Ω—ñ–≤ (—É—Å—ñ –¥–Ω—ñ —Ç–∏–∂–Ω—è)
        today = datetime.now().date()
        dates = [(today + timedelta(days=i)).strftime("%d.%m") for i in range(7)]
        keyboard = [
            [InlineKeyboardButton(date, callback_data=f"date_{date}")]
            for date in dates
        ]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_procedure")])
        await query.message.reply_text(
            "üå∏ –û–±–µ—Ä–∏ –∑—Ä—É—á–Ω–∏–π –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å—É ‚Äî –ø—Ä–∞—Ü—é—î–º–æ –∑–∞ —Ä—ñ–∑–Ω–∏–º –≥—Ä–∞—Ñ—ñ–∫–æ–º —É –±—É–¥–Ω—ñ –π –≤–∏—Ö—ñ–¥–Ω—ñ!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    # --- –í–∏–±—ñ—Ä —á–∞—Å—É –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –¥–Ω—è —Ç–∏–∂–Ω—è ---
    if query.data.startswith("date_"):
        date = query.data.replace("date_", "")
        context.user_data["date"] = date

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –¥–Ω—è
        year = datetime.now().year
        dt = datetime.strptime(f"{date}.{year}", "%d.%m.%Y")
        weekday = dt.weekday()  # 0 = –ü–Ω ... 6 = –ù–¥

        if weekday < 5:  # –ü–Ω‚Äì–ü—Ç
            times = [f"{h}:00" for h in range(14, 19)]  # 14:00‚Äì18:00
        else:  # –°–±‚Äì–ù–¥
            times = [f"{h}:00" for h in range(11, 17)]  # 11:00‚Äì16:00

        keyboard = [
            [InlineKeyboardButton(time, callback_data=f"time_{time}")]
            for time in times
        ]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_procedure")])
        await query.message.reply_text(
            "üëë –û–±–µ—Ä–∏ —Å–≤—ñ–π –∑—ñ—Ä–∫–æ–≤–∏–π —á–∞—Å! –ì—Ä–∞—Ñ—ñ–∫ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –¥–Ω—è —Ç–∏–∂–Ω—è üíñ",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    # --- –í–∏–±—ñ—Ä —á–∞—Å—É ---
    if query.data.startswith("time_"):
        time = query.data.replace("time_", "")
        context.user_data["time"] = time
        context.user_data["step"] = "input_name_phone"
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"date_{context.user_data['date']}")]
        ]
        await query.message.reply_text(
            "‚ú® –©–µ –∫—Ä–æ–∫ –¥–æ –∫—Ä–∞—Å–∏! –í–≤–µ–¥–∏ —ñ–º‚Äô—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –ú–∞—Ä—ñ—è, 0930001122",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_step = context.user_data.get('step')
    text = update.message.text

    # –í–≤–µ–¥–µ–Ω–Ω—è –ü–Ü–ë —ñ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    if user_step == "input_name_phone":
        try:
            name, phone = [x.strip() for x in text.split(',', 1)]
        except Exception:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ: –Ü–º'—è, —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ú–∞—Ä—ñ—è, 0930001122)")
            return
        procedure = context.user_data.get("procedure")
        date = context.user_data.get("date")
        time = context.user_data.get("time")
        user_id = update.effective_user.id
        # –ó–∞–ø–∏—Å—É—î–º–æ –≤ –±–∞–∑—É
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("INSERT INTO bookings (name, phone, procedure, date, time, user_id) VALUES (?, ?, ?, ?, ?, ?)",
                  (name, phone, procedure, date, time, user_id))
        conn.commit()
        conn.close()
        await update.message.reply_text(
            f"üíñ –î—è–∫—É—é, {name}! –¢–≤—ñ–π –∑–∞–ø–∏—Å –Ω–∞ ‚Äú{procedure}‚Äù {date} –æ {time} –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n"
            "–Ø –∑ —Ç–æ–±–æ—é –∑–≤‚Äô—è–∂—É—Å—å –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.\n\n"
            "‚ú® –Ø–∫—â–æ —Ö–æ—á–µ—à –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å —â–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω–∏ /start"
        )
        context.user_data.clear()
        return

def main():
    init_db()
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_handler))
    app.add_handler(CommandHandler("instagram", instagram_handler))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    app.run_polling()

if __name__ == "__main__":
    main()

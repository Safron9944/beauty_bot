from dotenv import load_dotenv
import os

# Load environment variables
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID', '0'))

import sqlite3
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)
from apscheduler.schedulers.background import BackgroundScheduler
from google_sheets import add_to_google_sheet

# Scheduler for reminders
scheduler = BackgroundScheduler()

def init_db():
    """Initialize the SQLite database and create the bookings table."""
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("""
CREATE TABLE IF NOT EXISTS bookings (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    name TEXT,
    phone TEXT,
    procedure TEXT,
    date TEXT,
    time TEXT
)
""")
    conn.commit()
    conn.close()

def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle the /start command."""
    keyboard = [
        [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏", callback_data='book')],
        [InlineKeyboardButton("üìÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –º—ñ–π –∑–∞–ø–∏—Å", callback_data='check_booking')]
    ]
    update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle the /admin command for administrators."""
    if update.effective_user.id != ADMIN_ID:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT id, name, phone, procedure, date, time FROM bookings ORDER BY id DESC")
    rows = c.fetchall()
    conn.close()

    if rows:
        for row in rows:
            booking_id, name, phone, procedure, date, time = row
            msg = (
                f"ID: {booking_id}\n"
                f"–ü–Ü–ë: {name}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {procedure}\n"
                f"–î–∞—Ç–∞: {date} –æ {time}"
            )
            keyboard = [
                [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f'edit_{booking_id}')]
            ]
            update.message.reply_text(msg, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        update.message.reply_text("–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle all callback queries from inline buttons."""
    query = update.callback_query
    query.answer()
    data = query.data

    if data == 'book':
        keyboard = [
            [InlineKeyboardButton("–ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤", callback_data='proc_brows')],
            [InlineKeyboardButton("–§–∞—Ä–±—É–≤–∞–Ω–Ω—è —Ç–∞ –∫–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤", callback_data='proc_tint_brows')],
            [InlineKeyboardButton("–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤", callback_data='proc_lam_brows')],
            [InlineKeyboardButton("–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π", callback_data='proc_lam_lashes')]
        ]
        query.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == 'check_booking':
        query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (—Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏):")
        context.user_data['step'] = 'check_phone'

    elif data.startswith('proc_'):
        proc_map = {
            'proc_brows': '–ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤',
            'proc_tint_brows': '–§–∞—Ä–±—É–≤–∞–Ω–Ω—è —Ç–∞ –∫–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤',
            'proc_lam_brows': '–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤',
            'proc_lam_lashes': '–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π'
        }
        context.user_data['procedure'] = proc_map[data]
        query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.MM:")
        context.user_data['step'] = 'get_date'

    elif data.startswith('time_'):
        time_str = data.split('_', 1)[1]
        fullinfo = context.user_data.get('fullinfo', '')
        procedure = context.user_data.get('procedure', '')
        date = context.user_data.get('date', '')
        user_id = query.from_user.id

        try:
            name, phone = [s.strip() for s in fullinfo.split(',', 1)]
        except ValueError:
            name, phone = fullinfo.strip(), ''

        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute(
            "INSERT INTO bookings (user_id, name, phone, procedure, date, time) VALUES (?, ?, ?, ?, ?, ?)",
            (user_id, name, phone, procedure, date, time_str)
        )
        conn.commit()
        conn.close()

        # Write to Google Sheet
        add_to_google_sheet(name, phone, procedure, date, time_str)

        # Send confirmation
        keyboard = [
            [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏", callback_data='book')],
            [InlineKeyboardButton("üìÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –º—ñ–π –∑–∞–ø–∏—Å", callback_data='check_booking')]
        ]
        query.message.reply_text(
            f"‚úÖ –í–∞—Å –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ {procedure} {date} –æ {time_str}. –î—è–∫—É—î–º–æ, {name}!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

        # Notify admin
        query.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üì• –ù–æ–≤–∏–π –∑–∞–ø–∏—Å:\n–ü–Ü–ë/–¢–µ–ª–µ—Ñ–æ–Ω: {name} / {phone}\n–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {procedure}\n–î–∞—Ç–∞: {date} –æ {time_str}"
        )

        # Schedule reminder
        event_dt = datetime.strptime(f"{date} {time_str}", "%d.%m %H:%M")
        remind_dt = (event_dt - timedelta(days=1)).replace(hour=10, minute=0, second=0, microsecond=0)
        if remind_dt > datetime.now():
            scheduler.add_job(send_reminder, 'date', run_date=remind_dt,
                              args=[user_id, procedure, date, time_str])
            scheduler.start()

        context.user_data.clear()

    elif data.startswith('edit_'):
        if update.effective_user.id != ADMIN_ID:
            query.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
            return

        booking_id = int(data.split('_')[1])
        context.user_data['edit_id'] = booking_id

        # –ó–∞–ø–∏—Ç–∞—Ç–∏, —â–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏
        keyboard = [
            [InlineKeyboardButton("–ü–Ü–ë", callback_data='editfield_name')],
            [InlineKeyboardButton("–¢–µ–ª–µ—Ñ–æ–Ω", callback_data='editfield_phone')],
            [InlineKeyboardButton("–ü—Ä–æ—Ü–µ–¥—É—Ä—É", callback_data='editfield_procedure')],
            [InlineKeyboardButton("–î–∞—Ç—É", callback_data='editfield_date')],
            [InlineKeyboardButton("–ß–∞—Å", callback_data='editfield_time')],
        ]
        query.message.reply_text("–©–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data.startswith('editfield_'):
        field = data.split('_')[1]
        context.user_data['edit_field'] = field
        query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è:")
        context.user_data['step'] = 'edit_value'

def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle plain text messages for steps."""
    step = context.user_data.get('step')
    text = update.message.text.strip()

    if step == 'get_date':
        context.user_data['date'] = text
        update.message.reply_text(
            "–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë —Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –Ü–≤–∞–Ω–µ–Ω–∫–æ –ú–∞—Ä—ñ—è, 0931234567):"
        )
        context.user_data['step'] = 'get_fullinfo'

    elif step == 'get_fullinfo':
        context.user_data['fullinfo'] = text
        times = ['14:00', '15:00', '16:00', '17:00', '18:00']
        keyboard = [[InlineKeyboardButton(t, callback_data=f"time_{t}")] for t in times]
        update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —á–∞—Å:", reply_markup=InlineKeyboardMarkup(keyboard))
        context.user_data['step'] = None

    elif step == 'check_phone':
        phone = text
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute(
            "SELECT name, procedure, date, time FROM bookings WHERE phone LIKE ?",
            (f"%{phone}%",)
        )
        rows = c.fetchall()
        conn.close()
        if rows:
            lines = [f"{n}, {p}, {d} –æ {t}" for n, p, d, t in rows]
            reply_text = "–í–∞—à—ñ –∑–∞–ø–∏—Å–∏:\n" + "\n".join(lines)
        else:
            reply_text = "–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        update.message.reply_text(reply_text)

    elif step == 'edit_value':
        booking_id = context.user_data.get('edit_id')
        field = context.user_data.get('edit_field')
        new_value = text

        if field not in ['name', 'phone', 'procedure', 'date', 'time']:
            update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.")
            return

        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute(f"UPDATE bookings SET {field}=? WHERE id=?", (new_value, booking_id))
        conn.commit()
        conn.close()

        update.message.reply_text(f"{field} –æ–Ω–æ–≤–ª–µ–Ω–æ!")
        context.user_data['step'] = None
        context.user_data['edit_id'] = None
        context.user_data['edit_field'] = None

    else:
        update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫ /start")

def send_reminder(user_id, procedure, date, time):
    """Send reminder message one day before."""
    from telegram import Bot
    bot = Bot(token=TOKEN)
    bot.send_message(chat_id=user_id, text=f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è! –í–∞—à –∑–∞–ø–∏—Å: {procedure} {date} –æ {time}.")

def main():
    init_db()
    scheduler.start()
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("admin", admin))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    app.run_polling()

if __name__ == '__main__':
    main()

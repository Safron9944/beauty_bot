from dotenv import load_dotenv
import os
import sqlite3
from apscheduler.schedulers.background import BackgroundScheduler
from telegram import Bot
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes,
    MessageHandler, filters
)
from datetime import datetime, timedelta
import collections

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# –°—Ç–≤–æ—Ä—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –±–æ—Ç–∞
bot = Bot(token=TOKEN)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
scheduler = BackgroundScheduler()
scheduler.start()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
async def send_reminder(user_id, procedure, date, time, mode="day"):
    try:
        if mode == "day":
            text = f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –∑–∞–≤—Ç—Ä–∞ —É —Ç–µ–±–µ –∑–∞–ø–∏—Å –Ω–∞ *{procedure}* –æ {time} {date}."
        elif mode == "2h":
            text = f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: —á–µ—Ä–µ–∑ 2 –≥–æ–¥–∏–Ω–∏ —É —Ç–µ–±–µ –∑–∞–ø–∏—Å –Ω–∞ *{procedure}* –æ {time} {date}."
        else:
            text = f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: —É —Ç–µ–±–µ –∑–∞–ø–∏—Å –Ω–∞ *{procedure}* –æ {time} {date}."

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await bot.send_message(chat_id=user_id, text=text, parse_mode="Markdown")
    except Exception as e:
        print(f"Error sending reminder to {user_id}: {e}")

# –§—É–Ω–∫—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def init_db():
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å, —è–∫—â–æ —ó—Ö —â–µ –Ω–µ–º–∞—î
    c.execute("""CREATE TABLE IF NOT EXISTS clients (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT,
                    phone TEXT UNIQUE,
                    first_seen TEXT,
                    last_seen TEXT,
                    total_visits INTEGER DEFAULT 1,
                    notes TEXT)""")

    c.execute("""CREATE TABLE IF NOT EXISTS deleted_days (
                    date TEXT PRIMARY KEY)""")

    c.execute("""CREATE TABLE IF NOT EXISTS price_list (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT UNIQUE,
                    price INTEGER)""")

    # –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—Ä–∞–π—Å—É –¥–µ—Ñ–æ–ª—Ç–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏, —è–∫—â–æ –≤—ñ–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π
    c.execute("SELECT COUNT(*) FROM price_list")
    if c.fetchone()[0] == 0:
        services = [
            ("–ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤ (–≤–æ—Å–∫/–ø—ñ–Ω—Ü–µ—Ç)", 200),
            ("–§–∞—Ä–±—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤ (—Ñ–∞—Ä–±–∞/—Ö–Ω–∞)", 150),
            ("–ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤ + —Ñ–∞—Ä–±—É–≤–∞–Ω–Ω—è", 300),
            ("–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤ + –∫–æ—Ä–µ–∫—Ü—ñ—è", 400),
            ("–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤ + –∫–æ—Ä–µ–∫—Ü—ñ—è + —Ñ–∞—Ä–±—É–≤–∞–Ω–Ω—è", 500),
            ("–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π –±–µ–∑ —Ñ–∞—Ä–±—É–≤–∞–Ω–Ω—è + –±–æ—Ç–æ–∫—Å", 400),
            ("–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π + —Ñ–∞—Ä–±—É–≤–∞–Ω–Ω—è + –±–æ—Ç–æ–∫—Å", 450),
            ("–í–∞–∫—Å–∏–Ω–≥ –Ω–∞–¥ –≥—É–±–æ—é", 100),
            ("–í–∞–∫—Å–∏–Ω–≥ –Ω–∏–∂–Ω—è –∑–æ–Ω–∞ –æ–±–ª–∏—á—á—è", 100),
            ("–§–∞—Ä–±—É–≤–∞–Ω–Ω—è –≤—ñ–π", 150),
        ]
        c.executemany("INSERT INTO price_list (name, price) VALUES (?, ?)", services)

    # –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫—É "note" –¥–æ bookings, —è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞—î
    try:
        c.execute("ALTER TABLE bookings ADD COLUMN note TEXT")
    except sqlite3.OperationalError:
        pass

    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
def update_or_add_client(user_name, user_phone):
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    today = datetime.now().strftime("%Y-%m-%d")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∫–ª—ñ—î–Ω—Ç —É –±–∞–∑—ñ
    c.execute("SELECT id, total_visits FROM clients WHERE phone=?", (user_phone,))
    existing = c.fetchone()

    if existing:
        client_id, total_visits = existing
        # –Ø–∫—â–æ –∫–ª—ñ—î–Ω—Ç —ñ—Å–Ω—É—î, –æ–Ω–æ–≤–ª—é—î–º–æ –π–æ–≥–æ –¥–∞–Ω—ñ
        c.execute("""UPDATE clients
                    SET last_seen=?, total_visits=?
                    WHERE id = ?""", (today, total_visits + 1, client_id))
    else:
        # –Ø–∫—â–æ –∫–ª—ñ—î–Ω—Ç –Ω–æ–≤–∏–π, –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ
        c.execute("""INSERT INTO clients (name, phone, first_seen, last_seen, total_visits)
                    VALUES (?, ?, ?, ?, 1)""", (user_name, user_phone, today, today))

    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∞–π—Å—É
def get_price_text():
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()

    # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ—Å–ª—É–≥ —ñ —Ü—ñ–Ω –∑ —Ç–∞–±–ª–∏—Ü—ñ price_list
    c.execute("SELECT name, price FROM price_list")
    rows = c.fetchall()
    conn.close()

    # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –µ–º–æ–¥–∑—ñ
    emoji_map = {
        "–ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤": "‚úèÔ∏è",
        "–§–∞—Ä–±—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤": "üé®",
        "–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤": "üíé",
        "–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π": "üåü",
        "–ë–æ—Ç–æ–∫—Å": "üíß",
        "–í–∞–∫—Å–∏–Ω–≥": "üßä",
        "–§–∞—Ä–±—É–≤–∞–Ω–Ω—è –≤—ñ–π": "üëÅÔ∏è"
    }

    # –°–ª–æ–≤–Ω–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø–æ—Å–ª—É–≥
    cats = {
        "–ë—Ä–æ–≤–∏": {"emoji": "üëÅÔ∏è", "items": []},
        "–í—ñ—ó": {"emoji": "üå∏", "items": []},
        "–Ü–Ω—à–µ": {"emoji": "üí´", "items": []}
    }

    # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª—É–≥ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    for name, price in rows:
        decorated_name = name
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –µ–º–æ–¥–∑—ñ –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø–æ—Å–ª—É–≥–∏
        for key in emoji_map:
            if key.lower() in name.lower():
                decorated_name = f"{emoji_map[key]} {decorated_name}"

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø–æ—Å–ª—É–≥–∏
        if "–±—Ä—ñ–≤" in name.lower():
            cats["–ë—Ä–æ–≤–∏"]["items"].append((decorated_name, price))
        elif "–≤—ñ–π" in name.lower():
            cats["–í—ñ—ó"]["items"].append((decorated_name, price))
        else:
            cats["–Ü–Ω—à–µ"]["items"].append((decorated_name, price))

    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –±–ª–æ–∫ –ø—Ä–∞–π—Å—É
    txt = "üíé *–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Safroniuk Brows & Lashes*\n\n"
    for category in cats:
        if cats[category]["items"]:
            txt += f"{cats[category]['emoji']} *{category}:*\n"
            for item_name, item_price in cats[category]["items"]:
                txt += f"   ‚îî‚îÄ {item_name} ‚Äî *{item_price} –≥—Ä–Ω*\n"
            txt += "\n"

    # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –∑–∞–ø–∏—Å—É —Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó
    txt += "üì≤ *–ó–∞–ø–∏—Å —ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è:*\n"
    txt += "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +380976853623\n\n"
    txt += "üîó *Instagram:*\n"
    txt += "‚Ä¢ @safroniuk.brows.lashes\n"
    txt += "https://www.instagram.com/safroniuk_brows_lashes\n"

    return txt
# --- –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("üíé –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É", callback_data='book')],
        [InlineKeyboardButton("üìã –ú–æ—ó –∑–∞–ø–∏—Å–∏", callback_data='check_booking')],
        [InlineKeyboardButton("üìã –ü—Ä–∞–π—Å", callback_data='show_price')],
        [InlineKeyboardButton("üì∏ Instagram", url=INSTAGRAM_LINK)],
        [InlineKeyboardButton("üìç –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è", url=MASTER_GEO_LINK)],
        [InlineKeyboardButton(f"üë©‚Äçüé® –í–∞—à –º–∞–π—Å—Ç–µ—Ä: {MASTER_NAME}", callback_data='master_phone')]
    ]

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –∞–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id == ADMIN_ID:
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å", callback_data='admin_service')])

    # –í—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    welcome = (
        "‚ú® *Beauty-–±–æ—Ç* –∑—É—Å—Ç—Ä—ñ—á–∞—î —Ç–µ–±–µ –∑ –ø–æ—Å–º—ñ—à–∫–æ—é! –¢—É—Ç –∫–æ–∂–Ω–∞ –∫—Ä–∞—Å—É–Ω—è –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —Å–≤—ñ–π —Å—Ç–∏–ª—å —ñ –Ω–∞—Å—Ç—Ä—ñ–π üíñ\n\n"
        "–û–±–∏—Ä–∞–π, —â–æ —Ö–æ—á–µ—à:\n"
        "‚Äî –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É\n"
        "‚Äî –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Å–≤–æ—ó –∑–∞–ø–∏—Å–∏\n"
        "‚Äî –∑–Ω–∞–π—Ç–∏ —Å–∞–ª–æ–Ω –Ω–∞ –º–∞–ø—ñ\n"
        "‚Äî –≥–ª—è–Ω—É—Ç–∏ Instagram –∞–±–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ –º–∞–π—Å—Ç—Ä—É\n\n"
        "üå∏ –ö—Ä–∞—Å–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è —Ç—É—Ç!"
    )

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if hasattr(update, "message") and update.message:
        await update.message.reply_text(welcome, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
    elif hasattr(update, "callback_query"):
        await update.callback_query.edit_message_text(welcome, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")

# --- –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –ì–†–ê–§–Ü–ö–£ (–ê–î–ú–Ü–ù) ---
async def edit_day_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    day = query.data.replace('edit_day_', '')  # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–±—Ä–∞–Ω—É –¥–∞—Ç—É
    context.user_data['edit_day'] = day  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω—É –¥–∞—Ç—É —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫–∞
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT times FROM schedule WHERE date = ?", (day,))  # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ –≥–æ–¥–∏–Ω–∏
    row = c.fetchone()
    conn.close()

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –≤–∂–µ –∑–∞–π–Ω—è—Ç—ñ –∞–±–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –≥–æ–¥–∏–Ω–∏ –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –¥–Ω—è
    chosen_times = [t.strip() for t in row[0].split(',')] if row and row[0] else []
    context.user_data['chosen_times'] = chosen_times

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –≥–æ–¥–∏–Ω–∏ –¥–ª—è —Ä–æ–±–æ—á–∏—Ö —Ç–∞ –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–Ω—ñ–≤
    weekday = datetime.strptime(day + f".{datetime.now().year}", "%d.%m.%Y").weekday()
    if weekday < 5:
        standard_times = [f"{h:02d}:00" for h in range(14, 19)]  # –†–æ–±–æ—á—ñ –¥–Ω—ñ: –∑ 14:00 –¥–æ 18:00
    else:
        standard_times = [f"{h:02d}:00" for h in range(11, 19)]  # –í–∏—Ö—ñ–¥–Ω—ñ –¥–Ω—ñ: –∑ 11:00 –¥–æ 18:00

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤–∏–±–æ—Ä—É –≥–æ–¥–∏–Ω–∏
    keyboard = []
    for t in standard_times:
        mark = "‚úÖ" if t in chosen_times else "‚òê"
        keyboard.append([InlineKeyboardButton(f"{mark} {t}", callback_data=f"settime_{t}")])

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —á–∞—Å—É –≤—Ä—É—á–Ω—É —Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    keyboard.append([InlineKeyboardButton("–î–æ–¥–∞—Ç–∏ –≤—Ä—É—á–Ω—É", callback_data="custom_time")])
    keyboard.append([InlineKeyboardButton("–ó–±–µ—Ä–µ–≥—Ç–∏", callback_data="save_times")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –î–Ω—ñ", callback_data="edit_schedule")])

    # –í–∏–≤–æ–¥–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–±—Ä–∞–Ω–∏–º–∏ —á–∞—Å–∞–º–∏
    selected = ', '.join(chosen_times) if chosen_times else "–Ω—ñ—á–æ–≥–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ"
    await query.edit_message_text(
        f"–í–∏–±—Ä–∞–Ω—ñ –≥–æ–¥–∏–Ω–∏: {selected}\n–ù–∞—Ç–∏—Å–∫–∞–π –Ω–∞ —á–∞—Å, —â–æ–± –¥–æ–¥–∞—Ç–∏ –∞–±–æ –ø—Ä–∏–±—Ä–∞—Ç–∏ –π–æ–≥–æ –∑—ñ —Å–ø–∏—Å–∫—É, –∞–±–æ –≤–≤–µ–¥–∏ —Å–≤—ñ–π.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# --- –î–û–î–ê–¢–ò –ß–ê–° –í–†–£–ß–ù–£ ---
async def custom_time_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    day = context.user_data['edit_day']

    # –ó–∞–ø–∏—Ç—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ–± –≤—ñ–Ω –≤–≤—ñ–≤ —á–∞—Å –≤—Ä—É—á–Ω—É
    await query.edit_message_text(
        "–í–≤–µ–¥—ñ—Ç—å —á–∞—Å –≤—Ä—É—á–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ 'HH:MM' (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 15:00), —â–æ–± –¥–æ–¥–∞—Ç–∏ –π–æ–≥–æ –≤ –≥—Ä–∞—Ñ—ñ–∫."
    )

    # –û—á—ñ–∫—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await context.bot.register_next_step_handler(update, process_custom_time, day)

async def process_custom_time(update: Update, context: ContextTypes.DEFAULT_TYPE, day):
    time_input = update.message.text.strip()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—è
    try:
        datetime.strptime(time_input, "%H:%M")  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É
        # –î–æ–¥–∞—î–º–æ —á–∞—Å –¥–æ –≤–∏–±—Ä–∞–Ω–∏—Ö –≥–æ–¥–∏–Ω
        if 'chosen_times' not in context.user_data:
            context.user_data['chosen_times'] = []
        context.user_data['chosen_times'].append(time_input)

        # –û–Ω–æ–≤–ª—é—î–º–æ –≥—Ä–∞—Ñ—ñ–∫ –≤ –ë–î
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        times = ', '.join(context.user_data['chosen_times'])
        c.execute("UPDATE schedule SET times = ? WHERE date = ?", (times, day))
        conn.commit()
        conn.close()

        await update.message.reply_text(f"–ß–∞—Å {time_input} –¥–æ–¥–∞–Ω–æ –¥–æ –≥—Ä–∞—Ñ—ñ–∫–∞.")
    except ValueError:
        await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ 'HH:MM'.")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ –ë–î
def execute_db_query(query, params=()):
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute(query, params)
    result = c.fetchall()
    conn.close()
    return result

# --- CALLBACK HANDLER ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è callback
    user_id = query.from_user.id

    # --- –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–¥ –ø—Ä–∏–º—ñ—Ç–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞ ---
    if query.data.startswith("edit_client_note_") or query.data.startswith("view_note_"):
        phone = query.data.replace("edit_client_note_", "").replace("view_note_", "")
        context.user_data["edit_note_phone"] = phone
        context.user_data["step"] = "edit_client_note"

        if query.data.startswith("edit_client_note_"):
            await query.message.reply_text("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –ø—Ä–∏–º—ñ—Ç–∫—É –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞:")
        else:
            # –ü–µ—Ä–µ–≥–ª—è–¥ –ø—Ä–∏–º—ñ—Ç–∫–∏
            booking_id = int(query.data.split("_")[-1])

            row = execute_db_query("""SELECT name, phone, date, procedure, time, status, note FROM bookings WHERE id=?""", (booking_id,))
            if row:
                name, phone, date, procedure, time, status, note = row[0]
                msg = (
                    f"üë§ *{name}*\n"
                    f"üì± `{phone}`\n"
                    f"–î–∞—Ç–∞: {date}\n"
                    f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {procedure}\n"
                    f"–ß–∞—Å: {time}\n"
                    f"–°—Ç–∞—Ç—É—Å: {status}\n"
                )
                msg += f"\nüìù –ü—Ä–∏–º—ñ—Ç–∫–∞: _{note if note else '–Ω–µ–º–∞—î'}_"
                buttons = [[InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –∫–ª—ñ—î–Ω—Ç—Å—å–∫–æ—ó –±–∞–∑–∏", callback_data="client_base")]]
                await query.message.reply_text(msg, reply_markup=InlineKeyboardMarkup(buttons), parse_mode="Markdown")
            else:
                await query.message.reply_text("–ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ú–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω –±—É–≤ –≤–∏–¥–∞–ª–µ–Ω–∏–π.")
        return

    # --- –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –∫–∞—Ä—Ç–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞ ---
    if query.data.startswith("client_card_"):
        phone = query.data.replace("client_card_", "")

        row = execute_db_query("SELECT name, first_seen, last_seen, total_visits, notes FROM clients WHERE phone=?", (phone,))
        if row:
            name, first_seen, last_seen, visits, notes = row[0]
            msg = (
                f"üë§ *{name}*\n"
                f"üì± `{phone}`\n"
                f"üìÜ –ü–µ—Ä—à–∏–π –≤—ñ–∑–∏—Ç: {first_seen}\n"
                f"üîÅ –í—ñ–∑–∏—Ç—ñ–≤: {visits}\n"
                f"üóì –û—Å—Ç–∞–Ω–Ω—ñ–π –≤—ñ–∑–∏—Ç: {last_seen}\n"
            )
            msg += f"\nüìù –ü—Ä–∏–º—ñ—Ç–∫–∞: _{notes if notes else '–Ω–µ–º–∞—î'}_"
            buttons = [
                [InlineKeyboardButton("üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–∏–º—ñ—Ç–∫—É", callback_data=f"edit_client_note_{phone}")],
                [InlineKeyboardButton("üìñ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∑–∞–ø–∏—Å—ñ–≤", callback_data=f"client_history_{phone}")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –∫–ª—ñ—î–Ω—Ç—Å—å–∫–æ—ó –±–∞–∑–∏", callback_data="client_base")]
            ]
            await query.message.reply_text(msg, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(buttons))
        else:
            await query.message.reply_text("–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    # --- –ü–µ—Ä–µ–≥–ª—è–¥ —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–ø–∏—Å—ñ–≤ –∫–ª—ñ—î–Ω—Ç–∞ ---
    if query.data.startswith("client_history_"):
        phone = query.data.replace("client_history_", "")
        rows = execute_db_query("""SELECT date, time, procedure, status FROM bookings WHERE phone=? ORDER BY date DESC""", (phone,))

        if not rows:
            await query.message.reply_text("üì≠ –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–ø–∏—Å—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è.")
            return

        msg = f"üìñ *–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–ø–∏—Å—ñ–≤* –¥–ª—è `{phone}`:\n\n"
        for date, time, procedure, status in rows:
            msg += f"üìÖ {date} –æ {time} ‚Äî *{procedure}* (_{status}_)\n"

        buttons = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ä—Ç–∫–∏", callback_data=f"client_card_{phone}")]]
        await query.message.reply_text(msg, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(buttons))
        return

    # --- –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —É –∫–ª—ñ—î–Ω—Ç—Å—å–∫—É –±–∞–∑—É ---
    if query.data == "client_base":
        rows = execute_db_query("""SELECT name, phone, total_visits, last_seen FROM clients ORDER BY total_visits DESC""")

        if not rows:
            await query.message.reply_text("–ö–ª—ñ—î–Ω—Ç—Å—å–∫–∞ –±–∞–∑–∞ –ø–æ—Ä–æ–∂–Ω—è.")
            return

        for name, phone, visits, last_seen in rows:
            msg = (
                f"üë§ *{name}*\n"
                f"üì± `{phone}`\n"
                f"üîÅ –í—ñ–∑–∏—Ç—ñ–≤: *{visits}*\n"
                f"üïì –û—Å—Ç–∞–Ω–Ω—ñ–π –≤—ñ–∑–∏—Ç: {last_seen}"
            )
            buttons = [
                [InlineKeyboardButton("üëÅ –ö–∞—Ä—Ç–∫–∞ –∫–ª—ñ—î–Ω—Ç–∞", callback_data=f"client_card_{phone}")],
                [InlineKeyboardButton("üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–∏–º—ñ—Ç–∫—É", callback_data=f"edit_client_note_{phone}")]
            ]
            await query.message.reply_text(msg, reply_markup=InlineKeyboardMarkup(buttons), parse_mode="Markdown")
        return
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è callback

    # --- –ú–µ–Ω—é –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–æ–º, –∞–¥–º—ñ–Ω—Å—å–∫–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ —Ç–∞ –ø—Ä–∞–π—Å–æ–º ---
    if query.data == "manage_schedule":
        await manage_schedule_handler(update, context)
        return

    if query.data == "admin_service":
        await admin_service_handler(update, context)
        return

    if query.data == 'edit_schedule':
        await edit_schedule_handler(update, context)
        return

    if query.data == 'show_price':
        price_text = get_price_text()  # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø—Ä–∞–π—Å—É
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        await query.edit_message_text(price_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
        return

    # --- –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∞–π—Å—É ---
    if query.data == 'edit_price':
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT id, name, price FROM price_list")
        services = c.fetchall()
        conn.close()

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø–æ—Å–ª—É–≥–∏ –∑ –ø–æ—Ç–æ—á–Ω–æ—é —Ü—ñ–Ω–æ—é
        keyboard = [
            [InlineKeyboardButton(f"{name}: {price} –≥—Ä–Ω", callback_data=f'edit_price_{id}')]
            for id, name, price in services
        ]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ê–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å", callback_data="admin_service")])

        # –í–∏–≤–æ–¥–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–µ—Ä–µ–ª—ñ–∫–æ–º –ø–æ—Å–ª—É–≥
        await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É –¥–ª—è –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    # --- –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –ø–æ—Å–ª—É–≥–∏ ---
    if query.data.startswith('edit_price_'):
        service_id = int(query.data.replace('edit_price_', ''))
        context.user_data['edit_price_id'] = service_id

        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø–æ—Å–ª—É–≥–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT name, price FROM price_list WHERE id=?", (service_id,))
        name, old_price = c.fetchone()
        conn.close()

        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Ü—ñ–Ω–∏
        await query.edit_message_text(
            f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É –¥–ª—è:\n*{name}* (–∑–∞—Ä–∞–∑: {old_price} –≥—Ä–Ω)", parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_price")]])
        )

        context.user_data['step'] = 'update_price'
        return
async def update_price_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_price = update.message.text.strip()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–≤–µ–¥–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É —Ü—ñ–Ω—É
    try:
        new_price = int(new_price)
    except ValueError:
        await update.message.reply_text("–¶—ñ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    service_id = context.user_data.get('edit_price_id')
    if not service_id:
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞! –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª—É–≥—É –¥–ª—è –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏.")
        return

    # –û–Ω–æ–≤–ª—é—î–º–æ —Ü—ñ–Ω—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("UPDATE price_list SET price=? WHERE id=?", (new_price, service_id))
    conn.commit()
    conn.close()

    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –∑–º—ñ–Ω–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await update.message.reply_text(f"–¶—ñ–Ω–∞ –¥–ª—è –ø–æ—Å–ª—É–≥–∏ –æ–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_price} –≥—Ä–Ω.")

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ —Å–ø–∏—Å–∫—É –ø–æ—Å–ª—É–≥
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ê–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å", callback_data="admin_service")]
    ]
    await update.message.reply_text("–¶—ñ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=InlineKeyboardMarkup(keyboard))

if query.data.startswith('edit_price_'):
    service_id = int(query.data.replace('edit_price_', ''))
    context.user_data['edit_price_id'] = service_id

import sqlite3
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def execute_db_query(query, params=()):
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute(query, params)
    conn.commit()
    conn.close()

# --- –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ—Å–ª—É–≥–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è ---
async def edit_price_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    service_id = int(query.data.split('_')[1])  # ID –ø–æ—Å–ª—É–≥–∏ –∑ –∫–Ω–æ–ø–∫–∏
    context.user_data['edit_price_id'] = service_id  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ

    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø–æ—Å–ª—É–≥–∏ –∑ –±–∞–∑–∏
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT name, price FROM price_list WHERE id=?", (service_id,))
    row = c.fetchone()
    conn.close()

    if row:
        name, old_price = row
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Ü—ñ–Ω–∏
        await query.edit_message_text(
            f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É –¥–ª—è:\n*{name}* (–∑–∞—Ä–∞–∑: {old_price} –≥—Ä–Ω)",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_price")]])
        )
        context.user_data['step'] = 'update_price'  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫—Ä–æ–∫
    else:
        await query.edit_message_text("–ü–æ—Å–ª—É–≥–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
    return

# --- –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–æ—ó —Ü—ñ–Ω–∏ ---
async def update_price_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_price = update.message.text.strip()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–≤–µ–¥–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É —Ü—ñ–Ω—É
    try:
        new_price = int(new_price)
    except ValueError:
        await update.message.reply_text("–¶—ñ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    service_id = context.user_data.get('edit_price_id')
    if not service_id:
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞! –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª—É–≥—É –¥–ª—è –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏.")
        return

    # –û–Ω–æ–≤–ª—é—î–º–æ —Ü—ñ–Ω—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    execute_db_query("UPDATE price_list SET price=? WHERE id=?", (new_price, service_id))

    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –∑–º—ñ–Ω–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await update.message.reply_text(f"–¶—ñ–Ω–∞ –¥–ª—è –ø–æ—Å–ª—É–≥–∏ –æ–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_price} –≥—Ä–Ω.")

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ —Å–ø–∏—Å–∫—É –ø–æ—Å–ª—É–≥
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ê–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å", callback_data="admin_service")]
    ]
    await update.message.reply_text("–¶—ñ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=InlineKeyboardMarkup(keyboard))

# --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ø–∏—Å—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ---
async def check_booking_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT id, procedure, date, time, status, note FROM bookings WHERE user_id=?", (user_id,))
    rows = c.fetchall()
    conn.close()

    if rows:
        # –í–∏–≤–æ–¥–∏–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–∂–µ–Ω –∑–∞–ø–∏—Å
        for rec in rows:
            booking_id, procedure, date, time, status, note = rec
            msg = f"‚ú® {procedure}\nüóìÔ∏è {date} –æ {time}\n–°—Ç–∞—Ç—É—Å: *{status}*"

            # –î–æ–¥–∞—î–º–æ –ø—Ä–∏–º—ñ—Ç–∫—É, —è–∫—â–æ –≤–æ–Ω–∞ —î
            if note:
                msg += f"\nüìù –ü—Ä–∏–º—ñ—Ç–∫–∞: _{note}_"

            buttons = []
            if status == "–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è":
                buttons.append(InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{booking_id}"))
                buttons.append(InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data=f"cancel_{booking_id}"))

            # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–º—ñ—Ç–∫–∏ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞
            if user_id == ADMIN_ID:
                buttons.append(InlineKeyboardButton("üìù –ü—Ä–∏–º—ñ—Ç–∫–∞", callback_data=f"note_{booking_id}"))

            reply_markup = InlineKeyboardMarkup([buttons]) if buttons else None
            await query.message.reply_text(msg, reply_markup=reply_markup, parse_mode="Markdown")
    else:
        await query.message.reply_text("–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ß–∞—Å –æ–Ω–æ–≤–∏—Ç–∏ —Å–≤—ñ–π –æ–±—Ä–∞–∑! üíÑ")
    return

# --- –î–æ–¥–∞–≤–∞–Ω–Ω—è/—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∏–º—ñ—Ç–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å—É ---
async def note_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    booking_id = int(query.data.replace('note_', ''))
    context.user_data['note_booking_id'] = booking_id
    await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∏–º—ñ—Ç–∫—É –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–ø–∏—Å—É:")
    context.user_data['step'] = 'add_note'
    return


# --- –Ü–Ω—à—ñ callback-–æ–±—Ä–æ–±–Ω–∏–∫–∏ ---
async def edit_day_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–Ω—è
    pass

async def admin_stats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
    pass

async def delete_day_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–Ω—è
    pass

async def show_stats_for_period(update: Update, context: ContextTypes.DEFAULT_TYPE, period: str):
    # –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–µ–≤–Ω–∏–π –ø–µ—Ä—ñ–æ–¥
    pass

# --- –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≥–æ–¥–∏–Ω–∏ –¥–ª—è –¥–Ω—è (settime_) ---
async def set_time_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    time = query.data.replace("settime_", "")
    chosen = context.user_data.get('chosen_times', [])

    # –î–æ–¥–∞—î–º–æ –∞–±–æ –≤–∏–¥–∞–ª—è—î–º–æ –≥–æ–¥–∏–Ω—É –∑ –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
    if time in chosen:
        chosen.remove(time)
    else:
        chosen.append(time)

    context.user_data['chosen_times'] = chosen

    # –°—Ñ–æ—Ä–º—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å—ñ—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –≥–æ–¥–∏–Ω
    weekday = datetime.strptime(context.user_data['edit_day'] + f".{datetime.now().year}", "%d.%m.%Y").weekday()
    if weekday < 5:
        times = [f"{h:02d}:00" for h in range(14, 19)]
    else:
        times = [f"{h:02d}:00" for h in range(11, 19)]

    keyboard = []
    for t in times:
        mark = "‚úÖ" if t in chosen else "‚òê"
        keyboard.append([InlineKeyboardButton(f"{mark} {t}", callback_data=f"settime_{t}")])

    keyboard.append([InlineKeyboardButton("–î–æ–¥–∞—Ç–∏ –≤—Ä—É—á–Ω—É", callback_data="custom_time")])
    keyboard.append([InlineKeyboardButton("–ó–±–µ—Ä–µ–≥—Ç–∏", callback_data="save_times")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –î–Ω—ñ", callback_data="edit_schedule")])

    selected = ', '.join(chosen) if chosen else "–Ω—ñ—á–æ–≥–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ"
    await query.edit_message_text(
        f"–í–∏–±—Ä–∞–Ω—ñ –≥–æ–¥–∏–Ω–∏: {selected}\n–ù–∞—Ç–∏—Å–∫–∞–π –Ω–∞ —á–∞—Å, —â–æ–± –¥–æ–¥–∞—Ç–∏ –∞–±–æ –ø—Ä–∏–±—Ä–∞—Ç–∏ –π–æ–≥–æ –∑—ñ —Å–ø–∏—Å–∫—É, –∞–±–æ –≤–≤–µ–¥–∏ —Å–≤—ñ–π.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return

# --- –ó–±–µ—Ä–µ–≥—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ –≥–æ–¥–∏–Ω–∏ ---
async def save_times_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    day = context.user_data.get('edit_day')
    times = context.user_data.get('chosen_times', [])
    times_str = ",".join(times)

    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT id FROM schedule WHERE date = ?", (day,))
    exists = c.fetchone()

    if exists:
        c.execute("UPDATE schedule SET times=? WHERE date=?", (times_str, day))
    else:
        c.execute("INSERT INTO schedule (date, times) VALUES (?, ?)", (day, times_str))

    conn.commit()
    conn.close()

    await query.edit_message_text(f"‚úÖ –î–ª—è –¥–Ω—è {day} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≥–æ–¥–∏–Ω–∏: {times_str if times_str else '–∂–æ–¥–Ω–æ—ó'}")
    context.user_data['step'] = None
    context.user_data['edit_day'] = None
    context.user_data['chosen_times'] = []
    return

# --- –í–≤–µ—Å—Ç–∏ –≥–æ–¥–∏–Ω–∏ –≤—Ä—É—á–Ω—É ---
async def custom_time_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.edit_message_text(
        "–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—ó –≥–æ–¥–∏–Ω–∏ –¥–ª—è —Ü—å–æ–≥–æ –¥–Ω—è —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 10:00,11:30,12:00):",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –î–Ω—ñ", callback_data="edit_schedule")]])
    )
    context.user_data['step'] = 'edit_times'
    return
# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()  # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback

    # --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ø–∏—Å—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ---
    if query.data == 'check_booking':
        await check_booking_handler(update, context)
        return

    # --- –î–æ–¥–∞–≤–∞–Ω–Ω—è/—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∏–º—ñ—Ç–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å—É ---
    if query.data.startswith('note_'):
        await note_handler(update, context)
        return

    # --- –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É (schedule) ---
    if query.data == 'edit_schedule':
        await edit_schedule_handler(update, context)
        return

    # --- –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è ---
    if query.data.startswith('edit_day_'):
        await edit_day_handler(update, context)
        return

    # --- –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
    if query.data == "back_to_menu":
        await start(update, context)
        return

    # --- –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ –¥–Ω—è ---
    if query.data.startswith('set_dayoff_'):
        date = query.data.replace('set_dayoff_', '')
        await set_day_off(update, context, date)
        return

    # --- –ü–µ—Ä–µ–≥–ª—è–¥ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ---
    if query.data == "calendar":
        await calendar_handler(update, context)
        return

    # --- –ü–µ—Ä–µ–≥–ª—è–¥ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å ---
    if query.data == "weekcalendar":
        await week_calendar_handler(update, context)
        return

    # --- –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥–Ω—è –¥–ª—è –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞) ---
    if query.data.startswith("delday_") and user_id == ADMIN_ID:
        date = query.data.replace('delday_', '')
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("INSERT OR IGNORE INTO deleted_days (date) VALUES (?)", (date,))
        conn.commit()
        conn.close()
        await query.edit_message_text(
            f"‚úÖ –î–µ–Ω—å {date} –∑—Ä–æ–±–ª–µ–Ω–æ –≤–∏—Ö—ñ–¥–Ω–∏–º! –ë—ñ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –∑–∞–ø–∏—Å—É.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_schedule")]])
        )
        return

# --- –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏ ---
if query.data.startswith('date_'):
    date = query.data.replace('date_', '')  # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–±—Ä–∞–Ω—É –¥–∞—Ç—É
    context.user_data['date'] = date

    # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥–æ–¥–∏–Ω
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT times FROM schedule WHERE date = ?", (date,))
    row = c.fetchone()
    conn.close()

    if row:
        # –Ø–∫—â–æ —î –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –≥–æ–¥–∏–Ω–∏ –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –¥–∞—Ç–∏
        times = [t.strip() for t in row[0].split(',')]
    else:
        # –Ø–∫—â–æ –≥–æ–¥–∏–Ω –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ, –≤–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –≥–æ–¥–∏–Ω–∏
        day = datetime.strptime(date + f".{datetime.now().year}", "%d.%m.%Y").weekday()
        if day < 5:
            times = [f"{h:02d}:00" for h in range(14, 19)]  # –ó –ø–æ–Ω–µ–¥—ñ–ª–∫–∞ –ø–æ –ø'—è—Ç–Ω–∏—Ü—é
        else:
            times = [f"{h:02d}:00" for h in range(11, 19)]  # –ù–∞ –≤–∏—Ö—ñ–¥–Ω–∏—Ö —ñ–Ω—à—ñ –≥–æ–¥–∏–Ω–∏

    # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∂–µ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–∏—Ö –≥–æ–¥–∏–Ω
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT time FROM bookings WHERE date = ?", (date,))
    booked_times = {row[0] for row in c.fetchall()}  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ set –¥–ª—è —à–≤–∏–¥–∫–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    conn.close()

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –≥–æ–¥–∏–Ω–∏
    free_times = [t for t in times if t not in booked_times]

    if not free_times:
        # –Ø–∫—â–æ –≤—Å—ñ –≥–æ–¥–∏–Ω–∏ –≤–∂–µ –∑–∞–π–Ω—è—Ç—ñ
        await query.edit_message_text("üòî –í—Å—ñ –≥–æ–¥–∏–Ω–∏ –Ω–∞ —Ü–µ–π –¥–µ–Ω—å –≤–∂–µ –∑–∞–π–Ω—è—Ç—ñ. –°–ø—Ä–æ–±—É–π –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –¥–µ–Ω—å!")
        return

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤–∏–±–æ—Ä—É –≤—ñ–ª—å–Ω–∏—Ö –≥–æ–¥–∏–Ω
    keyboard = [
        [InlineKeyboardButton(f"üïí {time} | –ú–æ—î —ñ–¥–µ–∞–ª—å–Ω–µ –≤—ñ–∫–æ–Ω—Ü–µ üíñ", callback_data=f'time_{time}')]
        for time in free_times
    ]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è", callback_data='back_to_date')])

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤—ñ–ª—å–Ω–∏–º–∏ –≥–æ–¥–∏–Ω–∞–º–∏
    await query.edit_message_text(
        "üëë –ß–∞—Å –±—É—Ç–∏ –∑—ñ—Ä–∫–æ—é! –û–±–∏—Ä–∞–π —ñ–¥–µ–∞–ª—å–Ω–∏–π —á–∞—Å ‚ù§Ô∏è\n"
        "–•–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏ –¥–∞—Ç—É? –ù–∞—Ç–∏—Å–∫–∞–π ‚¨ÖÔ∏è",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    # –û—á–∏—Å—Ç–∫–∞ –∫—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö –¥—ñ–π
    context.user_data['step'] = None
    return

# --- –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —á–∞—Å—É ---
if query.data.startswith("time_"):
    time = query.data.replace("time_", "")
    context.user_data['time'] = time
    await query.edit_message_text(
        "üíï –¢–≤–æ—è –∫—Ä–∞—Å–∞ –≤–∂–µ –º–∞–π–∂–µ —É –º–µ–Ω–µ –≤ —Ä—É–∫–∞—Ö!\n"
        "–ó–∞–ª–∏—à, –±—É–¥—å –ª–∞—Å–∫–∞, *–Ü–º'—è, –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É*, —â–æ–± —è –º–æ–≥–ª–∞ —Ç–æ–±—ñ –Ω–∞–ø–∏—Å–∞—Ç–∏ –∞–±–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏ ‚ú®\n\n"
        "_–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ú–∞—Ä—ñ—è –°–∞—Ñ—Ä–æ–Ω—é–∫, +380976853623_",
        parse_mode='Markdown'
    )
    context.user_data['step'] = 'get_fullinfo'
    return

# --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ø–∏—Å—ñ–≤ ---
if query.data == 'check_booking':
    user_id = query.from_user.id
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT id, procedure, date, time, status FROM bookings WHERE user_id=?", (user_id,))
    rows = c.fetchall()
    conn.close()

    if rows:
        for rec in rows:
            booking_id, procedure, date, time, status = rec
            msg = f"‚ú® {procedure}\nüóìÔ∏è {date} –æ {time}\n–°—Ç–∞—Ç—É—Å: *{status}*"
            buttons = []
            if status == "–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è":
                buttons.append(InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{booking_id}"))
                buttons.append(InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data=f"cancel_{booking_id}"))
            reply_markup = InlineKeyboardMarkup([buttons]) if buttons else None
            await query.message.reply_text(msg, reply_markup=reply_markup, parse_mode="Markdown")
    else:
        await query.message.reply_text("–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ß–∞—Å –æ–Ω–æ–≤–∏—Ç–∏ —Å–≤—ñ–π –æ–±—Ä–∞–∑! üíÑ")
    return

# --- –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏ ---
if query.data == 'back_to_date':
    procedure = context.user_data.get('procedure')
    if not procedure:
        await query.edit_message_text("–í–∏–±—ñ—Ä –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —Å–ø–æ—á–∞—Ç–∫—É.")
        return

    today = datetime.now().date()
    dates = []
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT date FROM deleted_days")
    deleted = {row[0] for row in c.fetchall()}
    conn.close()

    for i in range(7):
        d = today + timedelta(days=i)
        date_str = d.strftime("%d.%m")
        if date_str not in deleted:
            dates.append(date_str)

    keyboard = [
        [InlineKeyboardButton(f"üìÖ –û–±–∏—Ä–∞—é {date} üíã", callback_data=f'date_{date}')] for date in dates
    ]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø—Ä–æ—Ü–µ–¥—É—Ä", callback_data='back_to_procedure')])
    await query.edit_message_text(
        "üå∏ –Ø–∫–∏–π –¥–µ–Ω—å –∑—Ä–æ–±–∏—Ç—å —Ç–µ–±–µ —â–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ñ—à–æ—é? –û–±–∏—Ä–∞–π —Å–µ—Ä–¥–µ—á–∫–æ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—ñ –π –ª–æ–≤–∏ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è! –Ø–∫—â–æ —Ä–∞–ø—Ç–æ–º –∑–∞—Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–∏—Å–Ω–∏ ‚¨ÖÔ∏è —ñ –ø–æ–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ –≤–∏–±–æ—Ä—É, –±–æ —Ç–≤–æ—è –∫—Ä–∞—Å–∞ –≤–∞–∂–ª–∏–≤–∞! ‚ú®üíê",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return

# --- –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∏–º—ñ—Ç–æ–∫) ---
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_step = context.user_data.get('step')
    text = update.message.text

    # --- –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –ü–†–ò–ú–Ü–¢–ö–ò –ö–õ–Ü–Ñ–ù–¢–ê ---
    if user_step == "edit_client_note" and update.effective_user.id == ADMIN_ID:
        phone = context.user_data.get("edit_note_phone")
        if not phone:
            await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞! –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∏–º—ñ—Ç–∫–∏.")
            return

        note = text

        # –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∏–º—ñ—Ç–∫—É –≤ –ë–î
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("UPDATE clients SET notes=? WHERE phone=?", (note, phone))
        conn.commit()
        conn.close()

        await update.message.reply_text("‚úÖ –ü—Ä–∏–º—ñ—Ç–∫—É –∫–ª—ñ—î–Ω—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ! üìù")
        context.user_data.clear()  # –û—á–∏—Å—Ç–∏—Ç–∏ user_data –ø—ñ—Å–ª—è –æ–ø–µ—Ä–∞—Ü—ñ—ó
        return

    # --- –î–û–î–ê–í–ê–ù–ù–Ø –ü–†–ò–ú–Ü–¢–ö–ò –î–û –ó–ê–ü–ò–°–£ ---
    if user_step == 'add_note' and update.effective_user.id == ADMIN_ID:
        booking_id = context.user_data.get('note_booking_id')
        if not booking_id:
            await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞! –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–∏–º—ñ—Ç–∫–∏.")
            return

        note_text = text

        # –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∏–º—ñ—Ç–∫—É –¥–ª—è –∑–∞–ø–∏—Å—É –≤ –ë–î
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("UPDATE bookings SET note=? WHERE id=?", (note_text, booking_id))
        conn.commit()
        conn.close()


        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö –¥—ñ–π
        keyboard = [
            [InlineKeyboardButton("üëÅ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø—Ä–∏–º—ñ—Ç–∫—É", callback_data=f"view_note_{booking_id}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –∫–ª—ñ—î–Ω—Ç—Å—å–∫–æ—ó –±–∞–∑–∏", callback_data="client_base")]
        ]
        await update.message.reply_text(
            "–ü—Ä–∏–º—ñ—Ç–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ! üìù",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data['step'] = None  # –û—á–∏—Å—Ç–∏—Ç–∏ –∫—Ä–æ–∫ –ø—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        context.user_data['note_booking_id'] = None  # –û—á–∏—Å—Ç–∏—Ç–∏ ID –∑–∞–ø–∏—Å—É
        return



    # --- –ó–ú–Ü–ù–ê –¶–Ü–ù–ò –í –ü–†–ê–ô–°–Ü ---
    if user_step == 'update_price' and update.effective_user.id == ADMIN_ID:
        service_id = context.user_data.get('edit_price_id')
        try:
            new_price = int(text.strip())  # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞ —Ü—ñ–ª–µ —á–∏—Å–ª–æ
            if new_price <= 0:
                raise ValueError("–¶—ñ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è")

            # –û–Ω–æ–≤–ª—é—î–º–æ —Ü—ñ–Ω—É –¥–ª—è –ø–æ—Å–ª—É–≥–∏ –≤ –ë–î
            conn = sqlite3.connect('appointments.db')
            c = conn.cursor()
            c.execute("UPDATE price_list SET price=? WHERE id=?", (new_price, service_id))
            conn.commit()

            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –ø–æ—Å–ª—É–≥–∏
            c.execute("SELECT name FROM price_list WHERE id=?", (service_id,))
            name = c.fetchone()[0]
            conn.close()

            await update.message.reply_text(f"–¶—ñ–Ω—É –¥–ª—è '{name}' –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_price} –≥—Ä–Ω!")
        except ValueError as e:
            await update.message.reply_text(f"‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞: {e}. –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Ü—ñ–ª—É —Å—É–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 350).")
        except Exception as e:
            await update.message.reply_text(f"‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞: {e}. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

        # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
        context.user_data['step'] = None
        context.user_data['edit_price_id'] = None
        return

    # --- –î–æ–¥–∞–≤–∞–Ω–Ω—è/—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —á–∞—Å—É –¥–ª—è –¥–Ω—è (–∞–¥–º—ñ–Ω) ---
    if user_step == 'edit_times' and update.effective_user.id == ADMIN_ID:
        day = context.user_data.get('edit_day')
        new_times = text.strip()

        try:
            with sqlite3.connect('appointments.db') as conn:
                c = conn.cursor()
                c.execute("SELECT id FROM schedule WHERE date = ?", (day,))
                # –Ø–∫—â–æ –¥–ª—è —Ü—å–æ–≥–æ –¥–Ω—è –≤–∂–µ —ñ—Å–Ω—É—î –∑–∞–ø–∏—Å, –æ–Ω–æ–≤–ª—é—î–º–æ, —ñ–Ω–∞–∫—à–µ –¥–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π
                if c.fetchone():
                    c.execute("UPDATE schedule SET times=? WHERE date=?", (new_times, day))
                else:
                    c.execute("INSERT INTO schedule (date, times) VALUES (?, ?)", (day, new_times))
                conn.commit()

            await update.message.reply_text(f"‚úÖ –î–ª—è –¥–Ω—è {day} –æ–Ω–æ–≤–ª–µ–Ω–æ –≥–æ–¥–∏–Ω–∏: {new_times}")
            context.user_data['step'] = None
            context.user_data['edit_day'] = None
        except Exception as e:
            await update.message.reply_text(f"‚ùóÔ∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —á–∞—Å—É: {str(e)}")
        return

    # --- –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Å—É –∫–ª—ñ—î–Ω—Ç–∞ ---
    if user_step == 'get_fullinfo':
        context.user_data['fullinfo'] = text
        procedure = context.user_data.get('procedure')
        date = context.user_data.get('date')
        time = context.user_data.get('time')
        fullinfo = context.user_data.get('fullinfo')
        user_id = update.effective_user.id

        # –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É –∑ —ñ–º'—è–º —ñ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
        try:
            name, phone = [s.strip() for s in fullinfo.split(',', 1)]
        except Exception:
            name, phone = fullinfo.strip(), "N/A"  # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏, —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ –≤–∫–∞–∑–∞–Ω–æ

        try:
            # –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å –∫–ª—ñ—î–Ω—Ç–∞ –≤ –±–∞–∑—É
            with sqlite3.connect('appointments.db') as conn:
                c = conn.cursor()
                c.execute(
                    "INSERT INTO bookings (user_id, name, phone, procedure, date, time, status) VALUES (?, ?, ?, ?, ?, ?, ?)",
                    (user_id, name, phone, procedure, date, time, "–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è")
                )
                booking_id = c.lastrowid

            # –û–Ω–æ–≤–ª—é—î–º–æ –∞–±–æ –¥–æ–¥–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞
            update_or_add_client(name, phone)

            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É
            await update.message.reply_text(
                f"‚úÖ –í–∞—à –∑–∞–ø–∏—Å –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É *{procedure}* –Ω–∞ {date} –æ {time} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n"
                "–û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –º–∞–π—Å—Ç—Ä–∞.",
                parse_mode="Markdown"
            )
        except Exception as e:
            await update.message.reply_text(f"‚ùóÔ∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞–ø–∏—Å—É: {str(e)}")
        context.user_data['step'] = None
        return
# --- –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Å—É –∫–ª—ñ—î–Ω—Ç–∞ —Ç–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ---
add_to_google_sheet(name, "", phone, procedure, date, time)

keyboard = [
    [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{booking_id}"),
     InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data=f"cancel_{booking_id}")],
    [InlineKeyboardButton("üíé –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è —â–µ", callback_data='book')],
    [InlineKeyboardButton("üìã –ú–æ—ó –∑–∞–ø–∏—Å–∏", callback_data='check_booking')],
    [InlineKeyboardButton("üì∏ Instagram", url=INSTAGRAM_LINK)],
    [InlineKeyboardButton("üìç –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è", url=MASTER_GEO_LINK)],
    [InlineKeyboardButton(f"üë©‚Äçüé® –ú–∞–π—Å—Ç–µ—Ä: {MASTER_NAME}", callback_data='master_phone')],
]

await update.message.reply_text(
    f"üéâ –¢–∏ –∑–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞ *{procedure}* {date} –æ {time}! –Ø –≤–∂–µ —á–µ–∫–∞—é –∑—É—Å—Ç—Ä—ñ—á—ñ –∑ —Ç–æ–±–æ—é, —Ç–∏ –Ω–∞–¥–∏—Ö–∞—î—à! üíñ\n\n"
    f"üë©‚Äçüé® –ú–∞–π—Å—Ç–µ—Ä: {MASTER_NAME}\n"
    f"‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: {MASTER_PHONE}\n"
    f"üìç –ê–¥—Ä–µ—Å–∞: {MASTER_GEO}\n\n"
    "–Ø–∫—â–æ —Ö–æ—á–µ—à ‚Äî –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏ —á–∏ –≤—ñ–¥–º—ñ–Ω—ñ –∑–∞–ø–∏—Å, –∞–±–æ –∑–∞–ø–∏—à–∏—Å—è —â–µ —Ä–∞–∑ üëë",
    parse_mode="Markdown",
    reply_markup=InlineKeyboardMarkup(keyboard)
)

await context.bot.send_message(
    chat_id=ADMIN_ID,
    text=f"üì• –ù–æ–≤–∏–π –∑–∞–ø–∏—Å:\n–ü–Ü–ë/–¢–µ–ª–µ—Ñ–æ–Ω: {name} / {phone}\n–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {procedure}\n–î–∞—Ç–∞: {date} –æ {time}"
)

# –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
event_time = datetime.strptime(f"{date} {time}", "%d.%m %H:%M")
remind_day = event_time - timedelta(days=1)
remind_time = remind_day.replace(hour=10, minute=0, second=0, microsecond=0)
remind_2h = event_time - timedelta(hours=2)
now = datetime.now()

# –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–∞ –¥–µ–Ω—å
if remind_time > now:
    scheduler.add_job(
        send_reminder,
        'date',
        run_date=remind_time,
        args=[user_id, procedure, date, time, "day"]
    )

# –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–∞ 2 –≥–æ–¥–∏–Ω–∏
if remind_2h > now:
    scheduler.add_job(
        send_reminder,
        'date',
        run_date=remind_2h,
        args=[user_id, procedure, date, time, "2h"]
    )

# --- –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
async def admin_stats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    keyboard = [
        [InlineKeyboardButton("–°—å–æ–≥–æ–¥–Ω—ñ", callback_data='stats_today')],
        [InlineKeyboardButton("–¶–µ–π —Ç–∏–∂–¥–µ–Ω—å", callback_data='stats_week')],
        [InlineKeyboardButton("–¶–µ–π –º—ñ—Å—è—Ü—å", callback_data='stats_month')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ê–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å", callback_data="admin_service")],
    ]
    await query.edit_message_text(
        "–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


# --- –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä—ñ–æ–¥ ---
async def show_stats_for_period(update: Update, context: ContextTypes.DEFAULT_TYPE, period):
    query = update.callback_query
    today = datetime.now().date()
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()

    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if period == 'today':
        date_from = date_to = today
    elif period == 'week':
        date_from = today - timedelta(days=today.weekday())  # –ü–æ–Ω–µ–¥—ñ–ª–æ–∫ —Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è
        date_to = date_from + timedelta(days=6)  # –ù–µ–¥—ñ–ª—è —Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è
    elif period == 'month':
        date_from = today.replace(day=1)  # –ü–µ—Ä—à–∏–π –¥–µ–Ω—å –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è
        date_to = today  # –°—å–æ–≥–æ–¥–Ω—ñ
    else:
        await query.edit_message_text("‚ùì –ù–µ–∑–Ω–∞–π–æ–º–∏–π –ø–µ—Ä—ñ–æ–¥.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏
    c.execute("SELECT name, procedure, date, time FROM bookings")
    rows = c.fetchall()
    conn.close()

    bookings = []
    for name, procedure, date_str, time in rows:
        date_obj = datetime.strptime(date_str + f'.{today.year}', "%d.%m.%Y").date()
        if date_from <= date_obj <= date_to:
            bookings.append((name, procedure, date_obj, time))

    count = len(bookings)
    unique_clients = len(set([b[0] for b in bookings]))
    procedures = [b[1] for b in bookings]

    if procedures:
        top_procs = collections.Counter(procedures).most_common(3)
        procs_str = "\n".join([f"‚Äî {p[0]} ({p[1]})" for p in top_procs])
    else:
        procs_str = "‚Äî"

    weekdays = [b[2].strftime('%A') for b in bookings]
    hours = [b[3][:2] for b in bookings]

    top_day = collections.Counter(weekdays).most_common(1)[0][0] if weekdays else "-"
    top_hour = collections.Counter(hours).most_common(1)[0][0] + ":00" if hours else "-"

    stats_text = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –æ–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥*\n"
        f"–í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤: *{count}*\n"
        f"–£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤: *{unique_clients}*\n\n"
        f"–¢–û–ü-3 –ø—Ä–æ—Ü–µ–¥—É—Ä–∏:\n{procs_str}\n\n"
        f"–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π –¥–µ–Ω—å —Ç–∏–∂–Ω—è: *{top_day}*\n"
        f"–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∞ –≥–æ–¥–∏–Ω–∞: *{top_hour}*"
    )

    await query.edit_message_text(stats_text, parse_mode='Markdown', reply_markup=InlineKeyboardMarkup(
        [[InlineKeyboardButton("‚¨ÖÔ∏è –ê–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å", callback_data="admin_service")]]
    ))

# --- –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ –¥–Ω—è ---
async def set_day_off(update: Update, context: ContextTypes.DEFAULT_TYPE, date):
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    # –í—Å—Ç–∞–≤–ª—è—î–º–æ –¥–∞—Ç—É —è–∫ –≤–∏—Ö—ñ–¥–Ω—É –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö (—è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞—î)
    c.execute("INSERT OR IGNORE INTO deleted_days (date) VALUES (?)", (date,))
    conn.commit()
    conn.close()

    # –í–∏–≤–æ–¥–∏–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await update.callback_query.edit_message_text(
        f"‚úÖ –î–µ–Ω—å {date} –∑—Ä–æ–±–ª–µ–Ω–æ –≤–∏—Ö—ñ–¥–Ω–∏–º! –ë—ñ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –∑–∞–ø–∏—Å—É.",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_schedule")]]
        )
    )

# --- –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ ---
def main():
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    init_db()

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É
    app = ApplicationBuilder().token(TOKEN).build()

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))  # –°—Ç–∞—Ä—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    app.add_handler(CallbackQueryHandler(button_handler))  # –û–±—Ä–æ–±–∫–∞ callback-–∑–∞–ø–∏—Ç—ñ–≤ (–∫–Ω–æ–ø–æ–∫)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))  # –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling()

if __name__ == "__main__":
    main()

from dotenv import load_dotenv
import os

load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMIN_ID = int(os.environ["ADMIN_ID"])

import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes,
    MessageHandler, filters
)
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, timedelta
import collections
try:
    from google_sheets import add_to_google_sheet
except ImportError:
    def add_to_google_sheet(*args, **kwargs):
        pass

INSTAGRAM_LINK = "https://www.instagram.com/safroniuk_brows_lashes?utm_source=ig_web_button_share_sheet&igsh=ZDNlZDc0MzIxNw=="
MASTER_PHONE = "+380976853623"
MASTER_NAME = "–ú–∞—Ä—ñ—è"
MASTER_GEO = "–≤—É–ª. –ö–∏—ó–≤—Å—å–∫–∞ 41, –ú–æ–≥–∏–ª—ñ–≤-–ü–æ–¥—ñ–ª—å—Å—å–∫–∏–π, 24000, –£–∫—Ä–∞—ó–Ω–∞"
MASTER_GEO_LINK = "https://maps.app.goo.gl/n6xvT6bpMcL5QjHP9"

scheduler = BackgroundScheduler()
scheduler.start()

def init_db():
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    # ... –¢–≤–æ—ó —Ç–∞–±–ª–∏—Ü—ñ ...
    c.execute("""
        CREATE TABLE IF NOT EXISTS clients (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            phone TEXT UNIQUE,
            user_id INTEGER,
            note TEXT,
            created_at TEXT,
            updated_at TEXT
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS schedule (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT,
            times TEXT
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS deleted_days (
            date TEXT PRIMARY KEY
        )
    """)
    # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—É —Ç–∞–±–ª–∏—Ü—é –ø—Ä–∞–π—Å—É:
    c.execute("""
        CREATE TABLE IF NOT EXISTS price_list (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE,
            price INTEGER
        )
    """)
    # –Ø–∫—â–æ —Ç–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è ‚Äî –Ω–∞–ø–æ–≤–Ω—é—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–º–∏ –ø–æ—Å–ª—É–≥–∞–º–∏:
    c.execute("SELECT COUNT(*) FROM price_list")
    if c.fetchone()[0] == 0:
        services = [
            ("–ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤ (–≤–æ—Å–∫/–ø—ñ–Ω—Ü–µ—Ç)", 200),
            ("–§–∞—Ä–±—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤ (—Ñ–∞—Ä–±–∞/—Ö–Ω–∞)", 150),
            ("–ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤ + —Ñ–∞—Ä–±—É–≤–∞–Ω–Ω—è", 300),
            ("–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤ + –∫–æ—Ä–µ–∫—Ü—ñ—è", 400),
            ("–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤ + –∫–æ—Ä–µ–∫—Ü—ñ—è + —Ñ–∞—Ä–±—É–≤–∞–Ω–Ω—è", 500),
            ("–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π –±–µ–∑ —Ñ–∞—Ä–±—É–≤–∞–Ω–Ω—è + –±–æ—Ç–æ–∫—Å", 400),
            ("–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π + —Ñ–∞—Ä–±—É–≤–∞–Ω–Ω—è + –±–æ—Ç–æ–∫—Å", 450),
            ("–í–∞–∫—Å–∏–Ω–≥ –Ω–∞–¥ –≥—É–±–æ—é", 100),
            ("–í–∞–∫—Å–∏–Ω–≥ –Ω–∏–∂–Ω—è –∑–æ–Ω–∞ –æ–±–ª–∏—á—á—è", 100),
            ("–§–∞—Ä–±—É–≤–∞–Ω–Ω—è –≤—ñ–π", 150),
        ]
        c.executemany("INSERT INTO price_list (name, price) VALUES (?, ?)", services)
    try:
        c.execute("ALTER TABLE bookings ADD COLUMN note TEXT")
    except sqlite3.OperationalError:
        pass
    conn.commit()
    conn.close()

# --- 2. –û—Å—å —Ç—É—Ç –≤—Å—Ç–∞–≤–ª—è—î—à —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤–∏–≤–æ–¥—É –ø—Ä–∞–π—Å—É ---
def get_price_text():
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT name, price FROM price_list")
    rows = c.fetchall()
    conn.close()

    emoji_map = {
        "–ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤": "‚úèÔ∏è",
        "–§–∞—Ä–±—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤": "üé®",
        "–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤": "üíé",
        "—Ñ–∞—Ä–±—É–≤–∞–Ω–Ω—è": "üé®",
        "–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π": "üåü",
        "–ë–æ—Ç–æ–∫—Å": "üíß",
        "–í–∞–∫—Å–∏–Ω–≥": "üßä",
        "–§–∞—Ä–±—É–≤–∞–Ω–Ω—è –≤—ñ–π": "üëÅÔ∏è"
    }

    cats = {
        "–ë—Ä–æ–≤–∏": {"emoji": "üëÅÔ∏è", "items": []},
        "–í—ñ—ó": {"emoji": "üå∏", "items": []},
        "–Ü–Ω—à–µ": {"emoji": "üí´", "items": []}
    }

    for name, price in rows:
        decorated = name
        for key in emoji_map:
            if key.lower() in name.lower():
                decorated = f"{emoji_map[key]} {decorated}"
        if "–±—Ä—ñ–≤" in name or "–ë—Ä–æ–≤" in name:
            cats["–ë—Ä–æ–≤–∏"]["items"].append((decorated, price))
        elif "–í—ñ" in name or "–≤—ñ–π" in name:
            cats["–í—ñ—ó"]["items"].append((decorated, price))
        else:
            cats["–Ü–Ω—à–µ"]["items"].append((decorated, price))

    txt = "üíé *–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Safroniuk Brows & Lashes*\n\n"
    for k in cats:
        if cats[k]["items"]:
            txt += f"{cats[k]['emoji']} *{k}:*\n"
            for n, p in cats[k]["items"]:
                txt += f"   ‚îî‚îÄ {n} ‚Äî *{p} –≥—Ä–Ω*\n"
            txt += "\n"
    txt += "üì≤ *–ó–∞–ø–∏—Å —ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è:*\n"
    txt += "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +380976853623\n\n"
    txt += "üîó *Instagram:*\n"
    txt += "‚Ä¢ @safroniuk.brows.lashes\n"
    txt += "https://www.instagram.com/safroniuk_brows_lashes\n"
    return txt


# --- –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    keyboard = [
        [InlineKeyboardButton("üíé –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É", callback_data='book')],
        [InlineKeyboardButton("üìã –ú–æ—ó –∑–∞–ø–∏—Å–∏", callback_data='check_booking')],
        [InlineKeyboardButton("üìã –ü—Ä–∞–π—Å", callback_data='show_price')],
        [InlineKeyboardButton(f"üë©‚Äçüé® –í–∞—à –º–∞–π—Å—Ç–µ—Ä: {MASTER_NAME}", callback_data='master_phone')]
    ]
    if user_id == ADMIN_ID:
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å", callback_data='admin_service')])
    welcome = (
        "‚ú® *Beauty-–±–æ—Ç* –∑—É—Å—Ç—Ä—ñ—á–∞—î —Ç–µ–±–µ –∑ –ø–æ—Å–º—ñ—à–∫–æ—é! –¢—É—Ç –∫–æ–∂–Ω–∞ –∫—Ä–∞—Å—É–Ω—è –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —Å–≤—ñ–π —Å—Ç–∏–ª—å —ñ –Ω–∞—Å—Ç—Ä—ñ–π üíñ\n\n"
        "–û–±–∏—Ä–∞–π, —â–æ —Ö–æ—á–µ—à:\n"
        "‚Äî –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É\n"
        "‚Äî –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Å–≤–æ—ó –∑–∞–ø–∏—Å–∏\n"
        "‚Äî –∑–Ω–∞–π—Ç–∏ —Å–∞–ª–æ–Ω –Ω–∞ –º–∞–ø—ñ\n"
        "‚Äî –≥–ª—è–Ω—É—Ç–∏ Instagram –∞–±–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ –º–∞–π—Å—Ç—Ä—É\n\n"
        "üå∏ –ö—Ä–∞—Å–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è —Ç—É—Ç!"
    )
    if hasattr(update, "message") and update.message:
        await update.message.reply_text(welcome, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
    else:
        await update.callback_query.edit_message_text(welcome, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")

# --- –ê–î–ú–Ü–ù –°–ï–†–í–Ü–° ---
async def manage_schedule_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    keyboard = [
        [InlineKeyboardButton("üìÜ –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ –¥–Ω—è—Ö", callback_data='edit_schedule')],
        [InlineKeyboardButton("üí§ –í–∏—Å—Ç–∞–≤–∏—Ç–∏ –≤–∏—Ö—ñ–¥–Ω–∏–π", callback_data='delete_day')],
        [InlineKeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ", callback_data='calendar')],
        [InlineKeyboardButton("üìÜ –ö–∞–ª–µ–Ω–¥–∞—Ä –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å", callback_data='weekcalendar')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_service")]
    ]
    text = (
        "üóìÔ∏è *–ö–µ—Ä—É–≤–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–æ–º*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:\n"
        "‚Äî –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –≥–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏\n"
        "‚Äî –í–∏—Å—Ç–∞–≤–∏—Ç–∏ –≤–∏—Ö—ñ–¥–Ω–∏–π\n"
        "‚Äî –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –∞–±–æ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å"
    )
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")

# --- –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ –î–õ–Ø –ê–î–ú–Ü–ù–ê ---
async def admin_service_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
    [InlineKeyboardButton("üóìÔ∏è –ö–µ—Ä—É–≤–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–æ–º", callback_data="manage_schedule")],
    [InlineKeyboardButton("üí∏ –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–∞–π—Å", callback_data="edit_price")],
    [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
    [InlineKeyboardButton("üë• –ö–ª—ñ—î–Ω—Ç–∏", callback_data="clients_service")],
    [InlineKeyboardButton("‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")]
]
    text = (
        "üåü *–ê–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å*\n\n"
        "–ö–µ—Ä—É–π—Ç–µ —Ä–æ–∑–∫–ª–∞–¥–æ–º, –¥–∏–≤—ñ—Ç—å—Å—è –≤—Å—ñ –∑–∞–ø–∏—Å–∏ —ñ —Ç—Ä–∏–º–∞–π—Ç–µ –∫—Ä–∞—Å—É –ø—ñ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º üëë\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    )
    await update.callback_query.edit_message_text(
        text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown"
    )

# --- –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –ì–†–ê–§–Ü–ö–£ (–ê–î–ú–Ü–ù) ---
async def edit_schedule_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    # –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–Ω—ñ–≤ –Ω–∞ 10 –¥–Ω—ñ–≤ –≤–ø–µ—Ä–µ–¥ (—è–∫—ñ —î —É –≥—Ä–∞—Ñ—ñ–∫—É –∞–±–æ —è–∫–∏—Ö –Ω–µ–º–∞—î)
    today = datetime.now().date()
    dates = []
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT DISTINCT date FROM schedule")
    scheduled_dates = {row[0] for row in c.fetchall()}
    conn.close()
    for i in range(10):
        d = today + timedelta(days=i)
        date_str = d.strftime("%d.%m")
        dates.append(date_str)
    keyboard = [
        [InlineKeyboardButton(f"üóìÔ∏è {date} {'‚úÖ' if date in scheduled_dates else '‚ûï'}", callback_data=f'edit_day_{date}')]
        for date in dates
    ]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_schedule")])
    await query.edit_message_text(
        "üåà –û–±–µ—Ä–∏ –¥–µ–Ω—å –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–±–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Å—É:\n"
        "‚Äî –ù–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –¥–µ–Ω—å\n"
        "‚Äî –î–Ω—ñ –∑ ‚úÖ ‚Äî –≤–∂–µ –º–∞—é—Ç—å –≥—Ä–∞—Ñ—ñ–∫, ‚ûï ‚Äî –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏\n"
        "‚Äî –ó–º—ñ–Ω–∏/–¥–æ–¥–∞–π –≥–æ–¥–∏–Ω–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∏ (–ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –¥–Ω—è)\n",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def edit_day_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    day = query.data.replace('edit_day_', '')
    context.user_data['edit_day'] = day

    # 1. –í–∏—Ç—è–≥—É—î–º–æ –≥–æ–¥–∏–Ω–∏ –¥–ª—è —Ü—å–æ–≥–æ –¥–Ω—è –∑ –ë–î
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT times FROM schedule WHERE date = ?", (day,))
    row = c.fetchone()
    conn.close()
    chosen_times = [t.strip() for t in row[0].split(',')] if row and row[0] else []
    context.user_data['chosen_times'] = chosen_times

    # 2. –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –≥–æ–¥–∏–Ω–∏ –¥–ª—è –¥–Ω—è
    weekday = datetime.strptime(day + f".{datetime.now().year}", "%d.%m.%Y").weekday()
    if weekday < 5:
        standard_times = [f"{h:02d}:00" for h in range(14, 19)]
    else:
        standard_times = [f"{h:02d}:00" for h in range(11, 19)]

    # 3. –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ –≥–∞–ª–æ—á–∫–∞–º–∏
    keyboard = []
    for t in standard_times:
        mark = "‚úÖ" if t in chosen_times else "‚òê"
        keyboard.append([InlineKeyboardButton(f"{mark} {t}", callback_data=f"settime_{t}")])
    keyboard.append([InlineKeyboardButton("–î–æ–¥–∞—Ç–∏ –≤—Ä—É—á–Ω—É", callback_data="custom_time")])
    keyboard.append([InlineKeyboardButton("–ó–±–µ—Ä–µ–≥—Ç–∏", callback_data="save_times")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –î–Ω—ñ", callback_data="edit_schedule")])

    selected = ', '.join(chosen_times) if chosen_times else "–Ω—ñ—á–æ–≥–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ"
    await query.edit_message_text(
        f"–í–∏–±—Ä–∞–Ω—ñ –≥–æ–¥–∏–Ω–∏: {selected}\n–ù–∞—Ç–∏—Å–∫–∞–π –Ω–∞ —á–∞—Å, —â–æ–± –¥–æ–¥–∞—Ç–∏ –∞–±–æ –ø—Ä–∏–±—Ä–∞—Ç–∏ –π–æ–≥–æ –∑—ñ —Å–ø–∏—Å–∫—É, –∞–±–æ –≤–≤–µ–¥–∏ —Å–≤—ñ–π.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def clients_service_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—á–∏—â—É—î–º–æ –≤—Å—ñ —Å—Ç–∞–Ω–∏ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
    context.user_data.pop('client_add', None)
    context.user_data.pop('client_search', None)
    keyboard = [
        [InlineKeyboardButton("üèÜ –¢–æ–ø-10 –∫–ª—ñ—î–Ω—Ç—ñ–≤", callback_data="clients_top")],
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞", callback_data="client_add")],
        [InlineKeyboardButton("üîç –ó–Ω–∞–π—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞", callback_data="client_search_start")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_service")]
    ]
    text = "üë• *–ö–ª—ñ—î–Ω—Ç–∏ ‚Äî –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    await update.callback_query.edit_message_text(
        text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown"
    )

async def clients_top_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("""
        SELECT clients.id, clients.name, clients.phone, COUNT(bookings.id) as num, 
            COALESCE(SUM(price_list.price), 0)
        FROM clients
        LEFT JOIN bookings ON bookings.client_id = clients.id
        LEFT JOIN price_list ON bookings.procedure = price_list.name
        GROUP BY clients.id
        ORDER BY num DESC, clients.name
        LIMIT 10
    """)
    rows = c.fetchall()
    conn.close()
    text = "üèÜ *–¢–æ–ø-10 –∫–ª—ñ—î–Ω—Ç—ñ–≤:*\n"
    buttons = []
    for idx, (client_id, name, phone, num, total) in enumerate(rows, 1):
        text += f"{idx}. {name} ‚Äî {num} –∑–∞–ø–∏—Å—ñ–≤, {total} –≥—Ä–Ω\n"
        buttons.append([InlineKeyboardButton(f"{name}", callback_data=f"client_{client_id}")])
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="clients_service")])
    await update.callback_query.edit_message_text(
        text, reply_markup=InlineKeyboardMarkup(buttons), parse_mode="Markdown"
    )

async def client_add_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.pop('client_search', None)  # –í–∞–∂–ª–∏–≤–æ!
    context.user_data['client_add'] = {'step': 'name'}
    await update.callback_query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞:")

async def client_add_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data.get('client_add')
    if not data:
        return
    if data['step'] == 'name':
        context.user_data['client_add']['name'] = update.message.text.strip()
        context.user_data['client_add']['step'] = 'phone'
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª—ñ—î–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: +380...):")
        return
    if data['step'] == 'phone':
        context.user_data['client_add']['phone'] = update.message.text.strip()
        context.user_data['client_add']['step'] = 'note'
        await update.message.reply_text("–î–æ–¥–∞–π—Ç–µ –ø—Ä–∏–º—ñ—Ç–∫—É (–∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'):")
        return
    if data['step'] == 'note':
        note = update.message.text.strip()
        if note.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏':
            note = ""
        context.user_data['client_add']['note'] = note
        # –î–æ–¥–∞—î–º–æ –≤ –ë–î
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        try:
            c.execute(
                "INSERT INTO clients (name, phone, note, created_at, updated_at) VALUES (?, ?, ?, ?, ?)",
                (context.user_data['client_add']['name'], context.user_data['client_add']['phone'], note, now, now)
            )
            conn.commit()
            client_id = c.lastrowid
            await update.message.reply_text("–ö–ª—ñ—î–Ω—Ç–∞ –¥–æ–¥–∞–Ω–æ! –û—Å—å –π–æ–≥–æ –∫–∞—Ä—Ç–∫–∞:")
            # –í–∞–∂–ª–∏–≤–æ: –ø–æ–∫–∞–∑—É—î–º–æ –∫–∞—Ä—Ç–∫—É —á–µ—Ä–µ–∑ send_message, –±–æ –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è update.message –¥–æ—Å—Ç—É–ø–Ω–∏–π –∑–∞–≤–∂–¥–∏
            await show_client_card(update, context, client_id)
        except sqlite3.IntegrityError:
            await update.message.reply_text("–ö–ª—ñ—î–Ω—Ç —ñ–∑ —Ü–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –≤–∂–µ —ñ—Å–Ω—É—î!")
        conn.close()
        context.user_data.pop('client_add', None)
        return

async def client_search_start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.pop('client_add', None)   # –í–∞–∂–ª–∏–≤–æ!
    context.user_data['client_search'] = True
    await update.callback_query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è/–ø—Ä—ñ–∑–≤–∏—â–µ –∞–±–æ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª—ñ—î–Ω—Ç–∞:")

async def client_search_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('client_search'):
        return
    search = update.message.text.strip().lower()
    # –î–ª—è –ø–æ—à—É–∫—É —Ç–µ–ª–µ—Ñ–æ–Ω—É: –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ñ —Å–∏–º–≤–æ–ª–∏
    import re
    def clean_phone(phone):
        return re.sub(r"\D", "", phone)
    search_clean = clean_phone(search)
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("""
        SELECT id, name, phone FROM clients 
        WHERE LOWER(name) LIKE ? OR REPLACE(REPLACE(REPLACE(REPLACE(phone, '+', ''), ' ', ''), '-', ''), '(', '') LIKE ?
        LIMIT 10
    """, (f"%{search}%", f"%{search_clean}%"))
    rows = c.fetchall()
    conn.close()
    if not rows:
        await update.message.reply_text("–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    else:
        buttons = [[InlineKeyboardButton(f"{name} ({phone})", callback_data=f"client_{client_id}")]
                   for client_id, name, phone in rows]
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="clients_service")])
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–ª—ñ—î–Ω—Ç–∞:", reply_markup=InlineKeyboardMarkup(buttons))
    context.user_data.pop('client_search', None)

async def show_client_card(update, context, client_id):
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT name, phone, note FROM clients WHERE id=?", (client_id,))
    result = c.fetchone()
    if not result:
        await context.bot.send_message(chat_id=update.effective_user.id, text="–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        conn.close()
        return
    name, phone, note = result
    c.execute("""
        SELECT COUNT(*), COALESCE(SUM(price_list.price),0), MAX(bookings.date)
        FROM bookings 
        LEFT JOIN price_list ON bookings.procedure = price_list.name
        WHERE client_id = ?
    """, (client_id,))
    total_count, total_sum, last_date = c.fetchone()
    c.execute("""
        SELECT procedure, COUNT(*) FROM bookings 
        WHERE client_id=?
        GROUP BY procedure ORDER BY COUNT(*) DESC LIMIT 2
    """, (client_id,))
    procs = c.fetchall()
    conn.close()
    procs_txt = "\n".join([f"‚Äî {p} ({cnt})" for p, cnt in procs]) if procs else "‚Äî"
    txt = (
        f"üë§ *{name}*\n"
        f"üì± {phone}\n\n"
        f"–í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤: {total_count}\n"
        f"–í–∏—Ç—Ä–∞—á–µ–Ω–æ: {total_sum} –≥—Ä–Ω\n"
        f"–û—Å—Ç–∞–Ω–Ω—ñ–π –≤—ñ–∑–∏—Ç: {last_date if last_date else '‚Äî'}\n"
        f"–¢–û–ü-–ø—Ä–æ—Ü–µ–¥—É—Ä–∏:\n{procs_txt}\n\n"
        f"üìù –ü—Ä–∏–º—ñ—Ç–∫–∞: ‚Äú{note if note else '-'}‚Äù"
    )
    keyboard = [
        [InlineKeyboardButton("üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–∏–º—ñ—Ç–∫—É", callback_data=f"client_note_{client_id}")],
        [InlineKeyboardButton("üîÑ –ó–∞–ø–∏—Å–∞—Ç–∏ —â–µ —Ä–∞–∑", callback_data=f"client_book_{client_id}"),
         InlineKeyboardButton("üìã –í—Å—è —ñ—Å—Ç–æ—Ä—ñ—è –∑–∞–ø–∏—Å—ñ–≤", callback_data=f"client_history_{client_id}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="clients_service")]
    ]
    # –ó–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π send_message, —è–∫—â–æ –Ω–µ–º–∞—î update.message (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ –ø—ñ—Å–ª—è callback'—É)
    if hasattr(update, "message") and update.message:
        await update.message.reply_text(txt, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))
    elif hasattr(update, "callback_query") and update.callback_query:
        await context.bot.send_message(chat_id=update.effective_user.id, text=txt, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await context.bot.send_message(chat_id=update.effective_user.id, text=txt, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))

# --- TEXT HANDLER ---

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_step = context.user_data.get('step')
    text = update.message.text

    # --- –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞ ---
    if context.user_data.get('client_search'):
        await client_search_text_handler(update, context)
        return

    # --- –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ ---
    if context.user_data.get('client_add'):
        await client_add_text_handler(update, context)
        return

    # --- –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–∏–º—ñ—Ç–∫–∏ –¥–æ –∑–∞–ø–∏—Å—É (—Å—Ç–∞—Ä–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π) ---
    if user_step == 'add_note' and update.effective_user.id == ADMIN_ID:
        booking_id = context.user_data['note_booking_id']
        note_text = update.message.text
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("UPDATE bookings SET note=? WHERE id=?", (note_text, booking_id))
        conn.commit()
        conn.close()
        await update.message.reply_text("–ü—Ä–∏–º—ñ—Ç–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ! üìù")
        context.user_data['step'] = None
        context.user_data['note_booking_id'] = None
        return

    # --- –ú–æ–∂–µ—à –¥–æ–¥–∞—Ç–∏ —ñ–Ω—à—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó user_step –Ω–∏–∂—á–µ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ ---

    # --- –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø—ñ–¥—ñ–π—à–ª–æ ---
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ —Ç–∞ –ø–æ–¥–∞—Ä—É–π—Ç–µ —Å–æ–±—ñ –∫—Ä–∞—Å—É! üíñ")
# --- –Ü–ù–®–Ü –ê–î–ú–Ü–ù –§–£–ù–ö–¶–Ü–á ---
async def delete_day_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id if hasattr(update, "effective_user") else update.callback_query.from_user.id
    query = update.callback_query
    if user_id != ADMIN_ID:
        await query.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É", show_alert=True)
        return

    today = datetime.now().date()
    # –í–∏–±–∏—Ä–∞—î–º–æ –Ω–∞–π–±–ª–∏–∂—á—ñ 10 –¥–Ω—ñ–≤
    all_dates = [(today + timedelta(days=i)).strftime("%d.%m") for i in range(10)]

    # –ë–µ—Ä–µ–º–æ –¥–∞—Ç–∏, —è–∫—ñ –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω—ñ
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT date FROM deleted_days")
    deleted = {row[0] for row in c.fetchall()}
    conn.close()

    # –ó–∞–ª–∏—à–∞—î–º–æ –ª–∏—à–µ —Ç—ñ, —â–æ —â–µ –Ω–µ –≤–∏—Ö—ñ–¥–Ω—ñ
    available_dates = [d for d in all_dates if d not in deleted]

    if not available_dates:
        await query.edit_message_text(
            "üå∫ –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–Ω—ñ–≤ –¥–ª—è –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ (—É—Å—ñ –≤–∂–µ –≤–∏—Ö—ñ–¥–Ω—ñ –∞–±–æ –¥–∞—Ç–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å).",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_schedule")]])
        )
        return

    keyboard = [
        [InlineKeyboardButton(f"‚ùå {date}", callback_data=f"delday_{date}")] for date in available_dates
    ]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_schedule")])

    await query.edit_message_text(
        "üí§ –û–±–µ—Ä–∏ –¥–µ–Ω—å –¥–ª—è –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ (—Ü–µ–π –¥–µ–Ω—å —Å—Ç–∞–Ω–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–º –¥–ª—è –∑–∞–ø–∏—Å—É):",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def calendar_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return
    today = datetime.now().date()
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute(
        "SELECT date, time, procedure, name, phone, status FROM bookings "
        "WHERE date=? ORDER BY date, time", (today.strftime("%d.%m"),)
    )
    rows = c.fetchall()
    conn.close()
    if not rows:
        await update.callback_query.edit_message_text("–°—å–æ–≥–æ–¥–Ω—ñ –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î üí§.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_schedule")]])
        )
        return
    text = f"üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ {today.strftime('%d.%m.%Y')}:\n\n"
    for rec in rows:
        date, time, procedure, name, phone, status = rec
        text += (
            f"üïí {time} ‚Äî {procedure}\n"
            f"üë§ {name}, üì± {phone}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
        )
    await update.callback_query.edit_message_text(text,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_schedule")]])
    )

async def week_calendar_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return
    today = datetime.now().date()
    week_dates = [(today + timedelta(days=i)).strftime("%d.%m") for i in range(7)]
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute(
        f"SELECT date, time, procedure, name, phone, status FROM bookings "
        f"WHERE date IN ({','.join(['?']*len(week_dates))}) ORDER BY date, time", week_dates
    )
    rows = c.fetchall()
    conn.close()
    if not rows:
        await update.callback_query.edit_message_text("–ù–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î üí§.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_schedule")]])
        )
        return
    text = "üìÜ –ó–∞–ø–∏—Å–∏ –Ω–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å:\n\n"
    for rec in rows:
        date, time, procedure, name, phone, status = rec
        text += (
            f"üìÖ {date} üïí {time} ‚Äî {procedure}\n"
            f"üë§ {name}, üì± {phone}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
        )
    await update.callback_query.edit_message_text(text,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_schedule")]])
    )

# --- CALLBACK HANDLER ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "manage_schedule":
        await manage_schedule_handler(update, context)
        return

    if query.data == "admin_service":
        await admin_service_handler(update, context)
        return

    if query.data == 'edit_schedule':
        await edit_schedule_handler(update, context)
        return

    if query.data == 'show_price':
        price_text = get_price_text()
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        await query.edit_message_text(price_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
        return

    # –û—Å—å —Ç—É—Ç –¥–æ–¥–∞—î—à –±–ª–æ–∫–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∞–π—Å—É
    if query.data == 'edit_price':
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT id, name, price FROM price_list")
        services = c.fetchall()
        conn.close()
        keyboard = [
            [InlineKeyboardButton(f"{name}: {price} –≥—Ä–Ω", callback_data=f'edit_price_{id}')]
            for id, name, price in services
        ]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ê–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å", callback_data="admin_service")])
        await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É –¥–ª—è –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    if query.data.startswith('edit_price_'):
        service_id = int(query.data.replace('edit_price_', ''))
        context.user_data['edit_price_id'] = service_id
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT name, price FROM price_list WHERE id=?", (service_id,))
        name, old_price = c.fetchone()
        conn.close()
        await query.edit_message_text(
            f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É –¥–ª—è:\n*{name}* (–∑–∞—Ä–∞–∑: {old_price} –≥—Ä–Ω)", parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_price")]])
        )
        context.user_data['step'] = 'update_price'
        return

    if query.data == 'check_booking':
        user_id = query.from_user.id
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT id, procedure, date, time, status, note FROM bookings WHERE user_id=?", (user_id,))
        rows = c.fetchall()
        conn.close()
        if rows:
            for rec in rows:
                booking_id, procedure, date, time, status, note = rec
                msg = f"‚ú® {procedure}\nüóìÔ∏è {date} –æ {time}\n–°—Ç–∞—Ç—É—Å: *{status}*"
                # –î–æ–¥–∞—î–º–æ –ø—Ä–∏–º—ñ—Ç–∫—É —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–æ–Ω–∞ —î
                if note:
                    msg += f"\nüìù –ü—Ä–∏–º—ñ—Ç–∫–∞: _{note}_"
                buttons = []
                if status == "–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è":
                    buttons.append(InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{booking_id}"))
                    buttons.append(InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data=f"cancel_{booking_id}"))
                # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–º—ñ—Ç–∫–∏ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞
                if user_id == ADMIN_ID:
                    buttons.append(InlineKeyboardButton("üìù –ü—Ä–∏–º—ñ—Ç–∫–∞", callback_data=f"note_{booking_id}"))
                reply_markup = InlineKeyboardMarkup([buttons]) if buttons else None
                await query.message.reply_text(msg, reply_markup=reply_markup, parse_mode="Markdown")
        else:
            await query.message.reply_text("–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ß–∞—Å –æ–Ω–æ–≤–∏—Ç–∏ —Å–≤—ñ–π –æ–±—Ä–∞–∑! üíÑ")
        return

    if query.data.startswith('note_'):
        booking_id = int(query.data.replace('note_', ''))
        context.user_data['note_booking_id'] = booking_id
        await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∏–º—ñ—Ç–∫—É –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–ø–∏—Å—É:")
        context.user_data['step'] = 'add_note'
        return

    if query.data.startswith('edit_day_'):
        await edit_day_handler(update, context)
        return

    if query.data == 'admin_stats':
        await admin_stats_handler(update, context)
        return

    if query.data == 'delete_day':
        await delete_day_handler(update, context)
        return

    if query.data == 'stats_today':
        await show_stats_for_period(update, context, 'today')
        return

    if query.data == 'stats_week':
        await show_stats_for_period(update, context, 'week')
        return

    if query.data == 'stats_month':
        await show_stats_for_period(update, context, 'month')
        return

    # --- –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≥–æ–¥–∏–Ω–∏ –¥–ª—è –¥–Ω—è (settime_) ---
    if query.data.startswith("settime_"):
        time = query.data.replace("settime_", "")
        chosen = context.user_data.get('chosen_times', [])
        if time in chosen:
            chosen.remove(time)
        else:
            chosen.append(time)
        context.user_data['chosen_times'] = chosen
        # –°—Ñ–æ—Ä–º—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å—ñ—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –≥–æ–¥–∏–Ω
        weekday = datetime.strptime(context.user_data['edit_day'] + f".{datetime.now().year}", "%d.%m.%Y").weekday()
        if weekday < 5:
            times = [f"{h:02d}:00" for h in range(14, 19)]
        else:
            times = [f"{h:02d}:00" for h in range(11, 19)]
        keyboard = []
        for t in times:
            mark = "‚úÖ" if t in chosen else "‚òê"
            keyboard.append([InlineKeyboardButton(f"{mark} {t}", callback_data=f"settime_{t}")])
        keyboard.append([InlineKeyboardButton("–î–æ–¥–∞—Ç–∏ –≤—Ä—É—á–Ω—É", callback_data="custom_time")])
        keyboard.append([InlineKeyboardButton("–ó–±–µ—Ä–µ–≥—Ç–∏", callback_data="save_times")])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –î–Ω—ñ", callback_data="edit_schedule")])
        selected = ', '.join(chosen) if chosen else "–Ω—ñ—á–æ–≥–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ"
        await query.edit_message_text(
            f"–í–∏–±—Ä–∞–Ω—ñ –≥–æ–¥–∏–Ω–∏: {selected}\n–ù–∞—Ç–∏—Å–∫–∞–π –Ω–∞ —á–∞—Å, —â–æ–± –¥–æ–¥–∞—Ç–∏ –∞–±–æ –ø—Ä–∏–±—Ä–∞—Ç–∏ –π–æ–≥–æ –∑—ñ —Å–ø–∏—Å–∫—É, –∞–±–æ –≤–≤–µ–¥–∏ —Å–≤—ñ–π.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    # --- –ó–±–µ—Ä–µ–≥—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ –≥–æ–¥–∏–Ω–∏ ---
    if query.data == "save_times":
        day = context.user_data.get('edit_day')
        times = context.user_data.get('chosen_times', [])
        times_str = ",".join(times)
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT id FROM schedule WHERE date = ?", (day,))
        exists = c.fetchone()
        if exists:
            c.execute("UPDATE schedule SET times=? WHERE date=?", (times_str, day))
        else:
            c.execute("INSERT INTO schedule (date, times) VALUES (?, ?)", (day, times_str))
        conn.commit()
        conn.close()
        await query.edit_message_text(f"‚úÖ –î–ª—è –¥–Ω—è {day} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≥–æ–¥–∏–Ω–∏: {times_str if times_str else '–∂–æ–¥–Ω–æ—ó'}")
        context.user_data['step'] = None
        context.user_data['edit_day'] = None
        context.user_data['chosen_times'] = []
        return

    # --- –í–≤–µ—Å—Ç–∏ –≥–æ–¥–∏–Ω–∏ –≤—Ä—É—á–Ω—É ---
    if query.data == "custom_time":
        await query.edit_message_text(
            "–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—ó –≥–æ–¥–∏–Ω–∏ –¥–ª—è —Ü—å–æ–≥–æ –¥–Ω—è —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 10:00,11:30,12:00):",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –î–Ω—ñ", callback_data="edit_schedule")]])
        )
        context.user_data['step'] = 'edit_times'
        return
    if query.data == "clients_service":
        await clients_service_handler(update, context)
        return
    if query.data == "clients_top":
        await clients_top_handler(update, context)
        return
    if query.data == "client_add":
        await client_add_handler(update, context)
        return
    if query.data == "client_search_start":
        await client_search_start_handler(update, context)
        return
    if query.data.startswith("client_"):
        client_id = int(query.data.split("_")[1])
        await show_client_card(update, context, client_id)
        return


    # –î–∞–ª—ñ –≤—Å—ñ —ñ–Ω—à—ñ –≥—ñ–ª–∫–∏ button_handler...
    if query.data == 'edit_schedule':
        await edit_schedule_handler(update, context)
        return

    if query.data.startswith('edit_day_'):
        await edit_day_handler(update, context)
        return

    if query.data == "back_to_menu":
        await start(update, context)
        return

    if query.data == "edit_schedule":
        await edit_schedule_handler(update, context)
        return

    if query.data.startswith('set_dayoff_'):
        date = query.data.replace('set_dayoff_', '')
        await set_day_off(update, context, date)
        return

    if query.data == "calendar":
        await calendar_handler(update, context)
        return

    if query.data == "weekcalendar":
        await week_calendar_handler(update, context)
        return

    if query.data.startswith("delday_") and user_id == ADMIN_ID:
        date = query.data.replace('delday_', '')
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("INSERT OR IGNORE INTO deleted_days (date) VALUES (?)", (date,))
        conn.commit()
        conn.close()
        await query.edit_message_text(
            f"‚úÖ –î–µ–Ω—å {date} –∑—Ä–æ–±–ª–µ–Ω–æ –≤–∏—Ö—ñ–¥–Ω–∏–º! –ë—ñ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –∑–∞–ø–∏—Å—É.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_schedule")]])
        )
        return

    # --- –Ü –¥–∞–ª—ñ —ñ–Ω—à—ñ –∫–ª—ñ—î–Ω—Ç—Å—å–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó... ---
    # --- –î–õ–Ø –ö–õ–Ü–Ñ–ù–¢–ê ---
    if query.data == 'book' or query.data == 'back_to_procedure':
        keyboard = [
            [InlineKeyboardButton("‚ú® –ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤ (—ñ–¥–µ–∞–ª—å–Ω–∞ —Ñ–æ—Ä–º–∞)", callback_data='proc_brows')],
            [InlineKeyboardButton("üé® –§–∞—Ä–±—É–≤–∞–Ω–Ω—è + –∫–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤", callback_data='proc_tint_brows')],
            [InlineKeyboardButton("üåü –õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤ (WOW-–µ—Ñ–µ–∫—Ç)", callback_data='proc_lam_brows')],
            [InlineKeyboardButton("üëÅÔ∏è –õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π (–≤–∏—Ä–∞–∑–Ω–∏–π –ø–æ–≥–ª—è–¥)", callback_data='proc_lam_lashes')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='back_to_menu')]
        ]
        await query.edit_message_text(
            "‚ú® –û–±–µ—Ä–∏ —Å–≤–æ—é *–± º—é—Ç—ñ-–ø—Ä–æ—Ü–µ–¥—É—Ä—É*!\n"
            "–ü–æ–∑–Ω–∞—á —Ç—É, —è–∫–∞ –Ω–∞–¥–∏—Ö–∞—î –Ω–∞–π–±—ñ–ª—å—à–µ ‚Äî –∞–±–æ –Ω–∞—Ç–∏—Å–∫–∞–π ‚¨ÖÔ∏è —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é üåàüíñ\n\n"
            "–û–±—ñ—Ü—è—é, —Ç–≤–æ—è –∫—Ä–∞—Å–∞ –∑–∞—Å—è—î —â–µ —è—Å–∫—Ä–∞–≤—ñ—à–µ! ü´∂",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        context.user_data.clear()
        return

    if query.data.startswith('proc_'):
        proc_map = {
            'proc_brows': '–ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤ (—ñ–¥–µ–∞–ª—å–Ω–∞ —Ñ–æ—Ä–º–∞)',
            'proc_tint_brows': '–§–∞—Ä–±—É–≤–∞–Ω–Ω—è + –∫–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤',
            'proc_lam_brows': '–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤ (WOW-–µ—Ñ–µ–∫—Ç)',
            'proc_lam_lashes': '–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π (–≤–∏—Ä–∞–∑–Ω–∏–π –ø–æ–≥–ª—è–¥)'
        }
        context.user_data['procedure'] = proc_map[query.data]
        today = datetime.now().date()
        dates = []
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT date FROM deleted_days")
        deleted = {row[0] for row in c.fetchall()}
        conn.close()
        for i in range(7):
            d = today + timedelta(days=i)
            date_str = d.strftime("%d.%m")
            if date_str not in deleted:
                dates.append(date_str)
        if not dates:
            await query.edit_message_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–Ω—ñ–≤ –¥–ª—è –∑–∞–ø–∏—Å—É. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –º–∞–π—Å—Ç—Ä–∞!")
            return
        keyboard = [
            [InlineKeyboardButton(f"üìÖ –û–±–∏—Ä–∞—é {date} üíã", callback_data=f'date_{date}')] for date in dates
        ]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø—Ä–æ—Ü–µ–¥—É—Ä", callback_data='back_to_procedure')])
        await query.edit_message_text(
            "üå∏ –Ø–∫–∏–π –¥–µ–Ω—å –∑—Ä–æ–±–∏—Ç—å —Ç–µ–±–µ —â–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ñ—à–æ—é? –û–±–∏—Ä–∞–π —Å–µ—Ä–¥–µ—á–∫–æ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—ñ!\n"
            "–ü–µ—Ä–µ–¥—É–º–∞–ª–∞? –ù–∞—Ç–∏—Å–∫–∞–π ‚¨ÖÔ∏è, —ñ –æ–±–µ—Ä–∏ —ñ–Ω—à—É –ø—Ä–æ—Ü–µ–¥—É—Ä—É! ‚ú®üíê",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data['step'] = None
        return

    if query.data.startswith('date_'):
        date = query.data.replace('date_', '')
        context.user_data['date'] = date
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT times FROM schedule WHERE date = ?", (date,))
        row = c.fetchone()
        conn.close()
        if row:
            times = [t.strip() for t in row[0].split(',')]
        else:
            day = datetime.strptime(date + f".{datetime.now().year}", "%d.%m.%Y").weekday()
            if day < 5:
                times = [f"{h:02d}:00" for h in range(14, 19)]
            else:
                times = [f"{h:02d}:00" for h in range(11, 19)]
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT time FROM bookings WHERE date = ?", (date,))
        booked_times = [row[0] for row in c.fetchall()]
        conn.close()
        free_times = [t for t in times if t not in booked_times]
        if not free_times:
            await query.edit_message_text("üòî –í—Å—ñ –≥–æ–¥–∏–Ω–∏ –Ω–∞ —Ü–µ–π –¥–µ–Ω—å –≤–∂–µ –∑–∞–π–Ω—è—Ç—ñ. –°–ø—Ä–æ–±—É–π –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –¥–µ–Ω—å!")
            return
        keyboard = [
            [InlineKeyboardButton(f"üïí {time} | –ú–æ—î —ñ–¥–µ–∞–ª—å–Ω–µ –≤—ñ–∫–æ–Ω—Ü–µ üíñ", callback_data=f'time_{time}')]
            for time in free_times
        ]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è", callback_data='back_to_date')])
        await query.edit_message_text(
            "üëë –ß–∞—Å –±—É—Ç–∏ –∑—ñ—Ä–∫–æ—é! –û–±–∏—Ä–∞–π —ñ–¥–µ–∞–ª—å–Ω–∏–π —á–∞—Å ‚ù§Ô∏è\n"
            "–•–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏ –¥–∞—Ç—É? –ù–∞—Ç–∏—Å–∫–∞–π ‚¨ÖÔ∏è",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data['step'] = None
        return

    if query.data.startswith("time_"):
        time = query.data.replace("time_", "")
        context.user_data['time'] = time
        await query.edit_message_text(
            "üíï –¢–≤–æ—è –∫—Ä–∞—Å–∞ –≤–∂–µ –º–∞–π–∂–µ —É –º–µ–Ω–µ –≤ —Ä—É–∫–∞—Ö!\n"
            "–ó–∞–ª–∏—à, –±—É–¥—å –ª–∞—Å–∫–∞, *–Ü–º'—è, –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É*, —â–æ–± —è –º–æ–≥–ª–∞ —Ç–æ–±—ñ –Ω–∞–ø–∏—Å–∞—Ç–∏ –∞–±–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏ ‚ú®\n\n"
            "_–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ú–∞—Ä—ñ—è –°–∞—Ñ—Ä–æ–Ω—é–∫, +380976853623_",
            parse_mode='Markdown'
        )
        context.user_data['step'] = 'get_fullinfo'
        return

    if query.data == 'check_booking':
        user_id = query.from_user.id
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT id, procedure, date, time, status FROM bookings WHERE user_id=?", (user_id,))
        rows = c.fetchall()
        conn.close()
        if rows:
            for rec in rows:
                booking_id, procedure, date, time, status = rec
                msg = f"‚ú® {procedure}\nüóìÔ∏è {date} –æ {time}\n–°—Ç–∞—Ç—É—Å: *{status}*"
                buttons = []
                if status == "–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è":
                    buttons.append(InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{booking_id}"))
                    buttons.append(InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data=f"cancel_{booking_id}"))
                reply_markup = InlineKeyboardMarkup([buttons]) if buttons else None
                await query.message.reply_text(msg, reply_markup=reply_markup, parse_mode="Markdown")
        else:
            await query.message.reply_text("–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ß–∞—Å –æ–Ω–æ–≤–∏—Ç–∏ —Å–≤—ñ–π –æ–±—Ä–∞–∑! üíÑ")
        return

    if query.data == 'back_to_date':
        procedure = context.user_data.get('procedure')
        today = datetime.now().date()
        dates = []
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT date FROM deleted_days")
        deleted = {row[0] for row in c.fetchall()}
        conn.close()
        for i in range(7):
            d = today + timedelta(days=i)
            date_str = d.strftime("%d.%m")
            if date_str not in deleted:
                dates.append(date_str)
        keyboard = [
            [InlineKeyboardButton(f"üìÖ –û–±–∏—Ä–∞—é {date} üíã", callback_data=f'date_{date}')] for date in dates
        ]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø—Ä–æ—Ü–µ–¥—É—Ä", callback_data='back_to_procedure')])
        await query.edit_message_text(
            "üå∏ –Ø–∫–∏–π –¥–µ–Ω—å –∑—Ä–æ–±–∏—Ç—å —Ç–µ–±–µ —â–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ñ—à–æ—é? –û–±–∏—Ä–∞–π —Å–µ—Ä–¥–µ—á–∫–æ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—ñ –π –ª–æ–≤–∏ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è! –Ø–∫—â–æ —Ä–∞–ø—Ç–æ–º –∑–∞—Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–∏—Å–Ω–∏ ‚¨ÖÔ∏è —ñ –ø–æ–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ –≤–∏–±–æ—Ä—É, –±–æ —Ç–≤–æ—è –∫—Ä–∞—Å–∞ –≤–∞–∂–ª–∏–≤–∞! ‚ú®üíê",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    if query.data == "master_phone":
        text = (
            f"üë©‚Äçüé® *–í–∞—à –º–∞–π—Å—Ç–µ—Ä: {MASTER_NAME}*\n"
            f"‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: `{MASTER_PHONE}`\n"
            "–ó–∞–≤–∂–¥–∏ —Ä–∞–¥–∞ –¥–æ–ø–æ–º–æ–≥—Ç–∏ ‚Äî —Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –∞–±–æ –ø–∏—à—ñ—Ç—å —É Viber/Telegram! üí¨"
        )
        await query.edit_message_text(text, parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(
                [
                    [InlineKeyboardButton("üì∏ Instagram", url=INSTAGRAM_LINK)],
                    [InlineKeyboardButton("üìç –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è", url=MASTER_GEO_LINK)],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                ]
            )
        )
        return

    if query.data.startswith('confirm_'):
        booking_id = int(query.data.replace('confirm_', ''))
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("UPDATE bookings SET status=? WHERE id=?", ("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ", booking_id))
        conn.commit()
        c.execute("SELECT procedure, date, time FROM bookings WHERE id=?", (booking_id,))
        row = c.fetchone()
        conn.close()
        if row:
            procedure, date, time = row
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
            await query.message.reply_text(
                f"‚úÖ –í–∞—à –∑–∞–ø–∏—Å –Ω–∞ {procedure} {date} –æ {time} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –Ø –∑ –Ω–µ—Ç–µ—Ä–ø—ñ–Ω–Ω—è–º —á–µ–∫–∞—é –Ω–∞ —Ç–µ–±–µ! üíñ",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        return

    if query.data.startswith('cancel_'):
        booking_id = int(query.data.replace('cancel_', ''))
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT name, procedure, date, time FROM bookings WHERE id=?", (booking_id,))
        row = c.fetchone()
        c.execute("DELETE FROM bookings WHERE id=?", (booking_id,))
        conn.commit()
        conn.close()
        if row:
            name, procedure, date, time = row
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É, —â–æ –∑–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ —ñ –¥–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
            await query.message.reply_text(
                f"‚ùå –¢–≤—ñ–π –∑–∞–ø–∏—Å –Ω–∞ *{procedure}* {date} –æ {time} —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –Ø–∫—â–æ —Ö–æ—á–µ—à, —Ç–∏ –º–æ–∂–µ—à –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –∑–Ω–æ–≤—É –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é üëë",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üíé –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è —â–µ —Ä–∞–∑", callback_data='book')],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="back_to_menu")]
                ])
            )
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"‚ùóÔ∏è–ö–ª—ñ—î–Ω—Ç {name} —Å–∫–∞—Å—É–≤–∞–≤ –∑–∞–ø–∏—Å: {procedure} {date} –æ {time}"
    )
    return

# --- –í–í–ï–î–ï–ù–ù–Ø –¢–ï–ö–°–¢–£ ---
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_step = context.user_data.get('step')
    text = update.message.text

    # --- –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ ---
    if context.user_data.get('client_add'):
        await client_add_text_handler(update, context)
        return

    # --- –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞ ---
    if context.user_data.get('client_search'):
        await client_search_text_handler(update, context)
        return

    # --- –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–∏–º—ñ—Ç–∫–∏ –¥–æ –∑–∞–ø–∏—Å—É (–∑–∞–ª–∏—à–∞—î–º–æ —è–∫ –±—É–ª–æ) ---
    if user_step == 'add_note' and update.effective_user.id == ADMIN_ID:
        booking_id = context.user_data['note_booking_id']
        note_text = update.message.text
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("UPDATE bookings SET note=? WHERE id=?", (note_text, booking_id))
        conn.commit()
        conn.close()
        await update.message.reply_text("–ü—Ä–∏–º—ñ—Ç–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ! üìù")
        context.user_data['step'] = None
        context.user_data['note_booking_id'] = None
        return

    # --- –Ü–Ω—à—ñ –æ–±—Ä–æ–±–∫–∏ user_step... ---
    # ... (–∑–∞–ª–∏—à–∞—î—à —Å–≤–æ—ó –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–∞–ª—ñ) ...



    # --- –ó–ú–Ü–ù–ê –¶–Ü–ù–ò –í –ü–†–ê–ô–°–Ü ---
    if user_step == 'update_price' and update.effective_user.id == ADMIN_ID:
        service_id = context.user_data.get('edit_price_id')
        try:
            new_price = int(text.strip())
            conn = sqlite3.connect('appointments.db')
            c = conn.cursor()
            c.execute("UPDATE price_list SET price=? WHERE id=?", (new_price, service_id))
            conn.commit()
            c.execute("SELECT name FROM price_list WHERE id=?", (service_id,))
            name = c.fetchone()[0]
            conn.close()
            await update.message.reply_text(f"–¶—ñ–Ω—É –¥–ª—è '{name}' –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_price} –≥—Ä–Ω!")
        except Exception as e:
            await update.message.reply_text("‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞. –í–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª—É —Å—É–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 350)")
        context.user_data['step'] = None
        context.user_data['edit_price_id'] = None
        return

    # --- –î–æ–¥–∞–≤–∞–Ω–Ω—è/—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —á–∞—Å—É –¥–ª—è –¥–Ω—è (–∞–¥–º—ñ–Ω) ---
    if user_step == 'edit_times' and update.effective_user.id == ADMIN_ID:
        day = context.user_data.get('edit_day')
        new_times = text.strip()
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT id FROM schedule WHERE date = ?", (day,))
        exists = c.fetchone()
        if exists:
            c.execute("UPDATE schedule SET times=? WHERE date=?", (new_times, day))
        else:
            c.execute("INSERT INTO schedule (date, times) VALUES (?, ?)", (day, new_times))
        conn.commit()
        conn.close()
        await update.message.reply_text(f"‚úÖ –î–ª—è –¥–Ω—è {day} –æ–Ω–æ–≤–ª–µ–Ω–æ –≥–æ–¥–∏–Ω–∏: {new_times}")
        context.user_data['step'] = None
        context.user_data['edit_day'] = None
        return

    if user_step == 'get_fullinfo':
        context.user_data['fullinfo'] = text
        procedure = context.user_data.get('procedure')
        date = context.user_data.get('date')
        time = context.user_data.get('time')
        fullinfo = context.user_data.get('fullinfo')
        user_id = update.effective_user.id
        try:
            name, phone = [s.strip() for s in fullinfo.split(',', 1)]
        except Exception:
            name, phone = fullinfo.strip(), "N/A"
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("INSERT INTO bookings (user_id, name, phone, procedure, date, time, status) VALUES (?, ?, ?, ?, ?, ?, ?)",
                  (user_id, name, phone, procedure, date, time, "–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"))
        booking_id = c.lastrowid
        conn.commit()
        conn.close()
        add_to_google_sheet(name, "", phone, procedure, date, time)
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{booking_id}"),
             InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data=f"cancel_{booking_id}")],
        ]
        await update.message.reply_text(
            f"üéâ –¢–∏ –∑–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞ *{procedure}* {date} –æ {time}! –Ø –≤–∂–µ —á–µ–∫–∞—é –∑—É—Å—Ç—Ä—ñ—á—ñ –∑ —Ç–æ–±–æ—é, —Ç–∏ –Ω–∞–¥–∏—Ö–∞—î—à! üíñ\n\n"
            "–Ø–∫—â–æ —Ö–æ—á–µ—à ‚Äî –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏ —á–∏ –≤—ñ–¥–º—ñ–Ω—ñ –∑–∞–ø–∏—Å, –∞–±–æ –∑–∞–ø–∏—à–∏—Å—è —â–µ —Ä–∞–∑ üëë",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"""üì• –ù–æ–≤–∏–π –∑–∞–ø–∏—Å:
–ü–Ü–ë/–¢–µ–ª–µ—Ñ–æ–Ω: {name} / {phone}
–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {procedure}
–î–∞—Ç–∞: {date} –æ {time}"""
        )
        event_time = datetime.strptime(f"{date} {time}", "%d.%m %H:%M")
        remind_day = event_time - timedelta(days=1)
        remind_time = remind_day.replace(hour=10, minute=0, second=0, microsecond=0)
        remind_2h = event_time - timedelta(hours=2)
        now = datetime.now()
        if remind_time > now:
            scheduler.add_job(
                send_reminder,
                'date',
                run_date=remind_time,
                args=[user_id, procedure, date, time, "day"]
            )
        if remind_2h > now:
            scheduler.add_job(
                send_reminder,
                'date',
                run_date=remind_2h,
                args=[user_id, procedure, date, time, "2h"]
            )
        context.user_data.clear()
        return

    else:
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ —Ç–∞ –ø–æ–¥–∞—Ä—É–π—Ç–µ —Å–æ–±—ñ –∫—Ä–∞—Å—É! üíñ")

# --- –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ---
async def send_reminder(user_id, procedure, date, time, mode="day"):
    from telegram import Bot
    bot = Bot(token=TOKEN)
    try:
        if mode == "day":
            text = f"‚è∞ –ö—Ä–∞—Å–∏–≤–∞, –Ω–∞–≥–∞–¥—É—é: –≤–∂–µ –∑–∞–≤—Ç—Ä–∞ —Ç–≤—ñ–π –± º—é—Ç—ñ-–∑–∞–ø–∏—Å –Ω–∞ {procedure} {date} –æ {time}! –Ø —á–µ–∫–∞—é —Ç–µ–±–µ –∑ –≥–∞—Ä–Ω–∏–º –Ω–∞—Å—Ç—Ä–æ—î–º —ñ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è–º ‚ú® –î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ, —Å–æ–Ω–µ—á–∫–æ! üíû"
        elif mode == "2h":
            text = f"üí¨ –¢–≤—ñ–π –± º—é—Ç—ñ-—á–∞—Å –≤–∂–µ –∑–æ–≤—Å—ñ–º —Å–∫–æ—Ä–æ ‚Äî —á–µ—Ä–µ–∑ 2 –≥–æ–¥–∏–Ω–∫–∏! {procedure} {date} –æ {time} üå∑ –Ø –≤–∂–µ –≥–æ—Ç—É—é –Ω–∞–π–∫—Ä–∞—â—ñ —Ñ–∞—Ä–±–∏, –ø–µ–Ω–∑–ª—ñ —Ç–∞ –≥–∞—Ä—è—á–∏–π —á–∞–π! –î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ, –∑—ñ—Ä–æ–Ω—å–∫–æ! üëë"
        else:
            text = f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞–ø–∏—Å: {procedure} {date} –æ {time}."
        await bot.send_message(
            chat_id=user_id,
            text=text
        )
    except Exception as e:
        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {e}")
async def admin_stats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    keyboard = [
        [InlineKeyboardButton("–°—å–æ–≥–æ–¥–Ω—ñ", callback_data='stats_today')],
        [InlineKeyboardButton("–¶–µ–π —Ç–∏–∂–¥–µ–Ω—å", callback_data='stats_week')],
        [InlineKeyboardButton("–¶–µ–π –º—ñ—Å—è—Ü—å", callback_data='stats_month')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ê–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å", callback_data="admin_service")],
    ]
    await query.edit_message_text(
        "–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_stats_for_period(update: Update, context: ContextTypes.DEFAULT_TYPE, period):
    query = update.callback_query
    today = datetime.now().date()
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    if period == 'today':
        date_from = date_to = today
    elif period == 'week':
        date_from = today - timedelta(days=today.weekday())
        date_to = date_from + timedelta(days=6)
    elif period == 'month':
        date_from = today.replace(day=1)
        date_to = today
    else:
        await query.edit_message_text("‚ùì –ù–µ–∑–Ω–∞–π–æ–º–∏–π –ø–µ—Ä—ñ–æ–¥.")
        return
    c.execute("SELECT name, procedure, date, time FROM bookings")
    rows = c.fetchall()
    conn.close()
    bookings = []
    for name, procedure, date_str, time in rows:
        date_obj = datetime.strptime(date_str + f'.{today.year}', "%d.%m.%Y").date()
        if date_from <= date_obj <= date_to:
            bookings.append((name, procedure, date_obj, time))
    count = len(bookings)
    unique_clients = len(set([b[0] for b in bookings]))
    procedures = [b[1] for b in bookings]
    if procedures:
        top_procs = collections.Counter(procedures).most_common(3)
        procs_str = "\n".join([f"‚Äî {p[0]} ({p[1]})" for p in top_procs])
    else:
        procs_str = "‚Äî"
    weekdays = [b[2].strftime('%A') for b in bookings]
    hours = [b[3][:2] for b in bookings]
    if weekdays:
        top_day = collections.Counter(weekdays).most_common(1)[0][0]
    else:
        top_day = "-"
    if hours:
        top_hour = collections.Counter(hours).most_common(1)[0][0] + ":00"
    else:
        top_hour = "-"
    stats_text = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –æ–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥*\n"
        f"–í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤: *{count}*\n"
        f"–£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤: *{unique_clients}*\n\n"
        f"–¢–û–ü-3 –ø—Ä–æ—Ü–µ–¥—É—Ä–∏:\n{procs_str}\n\n"
        f"–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π –¥–µ–Ω—å —Ç–∏–∂–Ω—è: *{top_day}*\n"
        f"–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∞ –≥–æ–¥–∏–Ω–∞: *{top_hour}*"
    )
    await query.edit_message_text(stats_text, parse_mode='Markdown', reply_markup=InlineKeyboardMarkup(
        [[InlineKeyboardButton("‚¨ÖÔ∏è –ê–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å", callback_data="admin_service")]]))
# ======= –î–û main() =======

# --- –í—Å—ñ —Ç–≤–æ—ó async def ... ---

async def set_day_off(update: Update, context: ContextTypes.DEFAULT_TYPE, date):
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO deleted_days (date) VALUES (?)", (date,))
    conn.commit()
    conn.close()
    await update.callback_query.edit_message_text(
        "–°—å–æ–≥–æ–¥–Ω—ñ –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î üí§.",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_schedule")]]
        )
    )

def main():
    init_db()
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    app.run_polling()

if __name__ == "__main__":
    main()

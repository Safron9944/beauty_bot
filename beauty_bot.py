from dotenv import load_dotenv
import os

load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(",")))

import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes,
    MessageHandler, filters, ConversationHandler
)
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, timedelta
import collections
try:
    from google_sheets import add_to_google_sheet
except ImportError:
    def add_to_google_sheet(*args, **kwargs):
        pass

# --- –°–¢–ê–ù–ò –î–õ–Ø ConversationHandler ---
ADDING_CONDITION, EDITING_CONDITION, EDITING_NOTE = range(3)

INSTAGRAM_LINK = "https://www.instagram.com/safroniuk_brows_lashes?utm_source=ig_web_button_share_sheet&igsh=ZDNlZDc0MzIxNw=="
MASTER_PHONE = "+380976853623"
MASTER_NAME = "–ú–∞—Ä—ñ—è"
MASTER_GEO = "–≤—É–ª. –ö–∏—ó–≤—Å—å–∫–∞ 41, –ú–æ–≥–∏–ª—ñ–≤-–ü–æ–¥—ñ–ª—å—Å—å–∫–∏–π, 24000, –£–∫—Ä–∞—ó–Ω–∞"
MASTER_GEO_LINK = "https://maps.app.goo.gl/n6xvT6bpMcL5QjHP9"

scheduler = BackgroundScheduler()
scheduler.start()

def init_db():
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()

    # --- –¢–∞–±–ª–∏—Ü—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ ---
    c.execute("""
        CREATE TABLE IF NOT EXISTS clients (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            phone TEXT UNIQUE,
            user_id INTEGER,
            note TEXT,
            created_at TEXT,
            updated_at TEXT
        )
    """)

    # --- –¢–∞–±–ª–∏—Ü—è —Ä–æ–∑–∫–ª–∞–¥—É ---
    c.execute("""
        CREATE TABLE IF NOT EXISTS schedule (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT,
            times TEXT
        )
    """)

    # --- –¢–∞–±–ª–∏—Ü—è –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–Ω—ñ–≤ ---
    c.execute("""
        CREATE TABLE IF NOT EXISTS deleted_days (
            date TEXT PRIMARY KEY
        )
    """)

    # --- –¢–∞–±–ª–∏—Ü—è –ø—Ä–∞–π—Å—É ---
    c.execute("""
        CREATE TABLE IF NOT EXISTS price_list (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE,
            price INTEGER
        )
    """)

    # --- –¢–∞–±–ª–∏—Ü—è –∑–∞–ø–∏—Å—ñ–≤ (bookings) ---
    c.execute("""
        CREATE TABLE IF NOT EXISTS bookings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            client_id INTEGER,
            name TEXT,
            phone TEXT,
            procedure TEXT,
            date TEXT,
            time TEXT,
            status TEXT,
            note TEXT
        )
    """)

    # --- –¢–∞–±–ª–∏—Ü—è –æ—Å–æ–±–ª–∏–≤–∏—Ö —É–º–æ–≤ –∫–ª—ñ—î–Ω—Ç–∞ ---
    c.execute("""
        CREATE TABLE IF NOT EXISTS client_conditions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            client_id INTEGER NOT NULL,
            condition_text TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)

    # --- –¢–∞–±–ª–∏—Ü—è –≤–∏—Ç—Ä–∞—Ç ---
    c.execute("""
        CREATE TABLE IF NOT EXISTS expenses (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT,
            category TEXT,
            amount INTEGER,
            note TEXT
        )
    """)

    # --- –î–æ–¥–∞—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –ø–æ—Å–ª—É–≥–∏, —è–∫—â–æ —Ç–∞–±–ª–∏—Ü—è price_list –ø–æ—Ä–æ–∂–Ω—è ---
    c.execute("SELECT COUNT(*) FROM price_list")
    if c.fetchone()[0] == 0:
        services = [
            ("–ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤ (–≤–æ—Å–∫/–ø—ñ–Ω—Ü–µ—Ç)", 200),
            ("–§–∞—Ä–±—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤ (—Ñ–∞—Ä–±–∞/—Ö–Ω–∞)", 150),
            ("–ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤ + —Ñ–∞—Ä–±—É–≤–∞–Ω–Ω—è", 300),
            ("–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤ + –∫–æ—Ä–µ–∫—Ü—ñ—è", 400),
            ("–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤ + –∫–æ—Ä–µ–∫—Ü—ñ—è + —Ñ–∞—Ä–±—É–≤–∞–Ω–Ω—è", 500),
            ("–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π –±–µ–∑ —Ñ–∞—Ä–±—É–≤–∞–Ω–Ω—è + –±–æ—Ç–æ–∫—Å", 400),
            ("–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π + —Ñ–∞—Ä–±—É–≤–∞–Ω–Ω—è + –±–æ—Ç–æ–∫—Å", 450),
            ("–í–∞–∫—Å–∏–Ω–≥ –Ω–∞–¥ –≥—É–±–æ—é", 100),
            ("–í–∞–∫—Å–∏–Ω–≥ –Ω–∏–∂–Ω—è –∑–æ–Ω–∞ –æ–±–ª–∏—á—á—è", 100),
            ("–§–∞—Ä–±—É–≤–∞–Ω–Ω—è –≤—ñ–π", 150),
        ]
        c.executemany("INSERT INTO price_list (name, price) VALUES (?, ?)", services)

    # --- –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ note –¥–æ bookings, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –º—ñ–≥—Ä–∞—Ü—ñ–π —Å—Ç–∞—Ä–æ—ó –ë–î) ---
    try:
        c.execute("ALTER TABLE bookings ADD COLUMN note TEXT")
    except sqlite3.OperationalError:
        pass

    conn.commit()
    conn.close()


# --- 2. –û—Å—å —Ç—É—Ç –≤—Å—Ç–∞–≤–ª—è—î—à —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤–∏–≤–æ–¥—É –ø—Ä–∞–π—Å—É ---
def get_price_text():
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT name, price FROM price_list")
    rows = c.fetchall()
    conn.close()

    emoji_map = {
        "–ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤": "‚úèÔ∏è",
        "–§–∞—Ä–±—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤": "üé®",
        "–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤": "üíé",
        "—Ñ–∞—Ä–±—É–≤–∞–Ω–Ω—è": "üé®",
        "–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π": "üåü",
        "–ë–æ—Ç–æ–∫—Å": "üíß",
        "–í–∞–∫—Å–∏–Ω–≥": "üßä",
        "–§–∞—Ä–±—É–≤–∞–Ω–Ω—è –≤—ñ–π": "üëÅÔ∏è"
    }

    cats = {
        "–ë—Ä–æ–≤–∏": {"emoji": "üëÅÔ∏è", "items": []},
        "–í—ñ—ó": {"emoji": "üå∏", "items": []},
        "–Ü–Ω—à–µ": {"emoji": "üí´", "items": []}
    }

    for name, price in rows:
        decorated = name
        for key in emoji_map:
            if key.lower() in name.lower():
                decorated = f"{emoji_map[key]} {decorated}"
        if "–±—Ä—ñ–≤" in name or "–ë—Ä–æ–≤" in name:
            cats["–ë—Ä–æ–≤–∏"]["items"].append((decorated, price))
        elif "–í—ñ" in name or "–≤—ñ–π" in name:
            cats["–í—ñ—ó"]["items"].append((decorated, price))
        else:
            cats["–Ü–Ω—à–µ"]["items"].append((decorated, price))

    txt = "üíé *–ü—Ä–∞–π—Å-–ª–∏—Å—Ç Safroniuk Brows & Lashes*\n\n"
    for k in cats:
        if cats[k]["items"]:
            txt += f"{cats[k]['emoji']} *{k}:*\n"
            for n, p in cats[k]["items"]:
                txt += f"   ‚îî‚îÄ {n} ‚Äî *{p} –≥—Ä–Ω*\n"
            txt += "\n"
    txt += "üì≤ *–ó–∞–ø–∏—Å —ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è:*\n"
    txt += "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +380976853623\n\n"
    txt += "üîó *Instagram:*\n"
    txt += "‚Ä¢ @safroniuk.brows.lashes\n"
    txt += "https://www.instagram.com/safroniuk_brows_lashes\n"
    return txt


# --- –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üíé –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É", callback_data='book')],
        [InlineKeyboardButton("üóìÔ∏è –ú–æ—ó –∑–∞–ø–∏—Å–∏", callback_data='check_booking')],
        [InlineKeyboardButton("üí∞ –ü—Ä–∞–π—Å", callback_data='show_price')],
        [InlineKeyboardButton(f"üë©‚Äçüé® –í–∞—à –º–∞–π—Å—Ç–µ—Ä: {MASTER_NAME}", callback_data='master_phone')]
    ]
    if update.effective_user.id in ADMIN_IDS:
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å", callback_data='admin_service')])
    welcome = (
        "‚ú® *Beauty-–±–æ—Ç* –∑—É—Å—Ç—Ä—ñ—á–∞—î —Ç–µ–±–µ –∑ –ø–æ—Å–º—ñ—à–∫–æ—é! –¢—É—Ç –∫–æ–∂–Ω–∞ –∫—Ä–∞—Å—É–Ω—è –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —Å–≤—ñ–π —Å—Ç–∏–ª—å —ñ –Ω–∞—Å—Ç—Ä—ñ–π üíñ\n\n"
        "–û–±–∏—Ä–∞–π, —â–æ —Ö–æ—á–µ—à:\n"
        "‚Äî –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É\n"
        "‚Äî –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Å–≤–æ—ó –∑–∞–ø–∏—Å–∏\n"
        "‚Äî –∑–Ω–∞–π—Ç–∏ —Å–∞–ª–æ–Ω –Ω–∞ –º–∞–ø—ñ\n"
        "‚Äî –≥–ª—è–Ω—É—Ç–∏ Instagram –∞–±–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ –º–∞–π—Å—Ç—Ä—É\n\n"
        "üå∏ –ö—Ä–∞—Å–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è —Ç—É—Ç!"
    )
    # –ì–æ–ª–æ–≤–Ω–µ: –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è–π –¥–≤–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!
    if hasattr(update, "callback_query") and update.callback_query:
        await update.callback_query.edit_message_text(
            welcome, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown"
        )
    elif hasattr(update, "message") and update.message:
        await update.message.reply_text(
            welcome, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown"
        )


    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –º–µ–Ω—é –¢–Ü–õ–¨–ö–ò –û–î–ù–ò–ú –°–ü–û–°–û–ë–û–ú ‚Äî –∞–±–æ edit_message_text, –∞–±–æ reply_text!
    if getattr(update, "callback_query", None):
        await update.callback_query.edit_message_text(
            welcome,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    elif getattr(update, "message", None):
        await update.message.reply_text(
            welcome,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )


    # –î–∞–ª—ñ —Ç–≤—ñ–π —Å—Ç–∞—Ä–∏–π –∫–æ–¥ –º–µ–Ω—é:
    keyboard = [
        [InlineKeyboardButton("üíé –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É", callback_data='book')],
        [InlineKeyboardButton("üóìÔ∏è –ú–æ—ó –∑–∞–ø–∏—Å–∏", callback_data='check_booking')],
        [InlineKeyboardButton("üí∞ –ü—Ä–∞–π—Å", callback_data='show_price')],
        [InlineKeyboardButton(f"üë©‚Äçüé® –í–∞—à –º–∞–π—Å—Ç–µ—Ä: {MASTER_NAME}", callback_data='master_phone')]
    ]
    if update.effective_user.id in ADMIN_IDS:
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å", callback_data='admin_service')])
    welcome = (
        "‚ú® *Beauty-–±–æ—Ç* –∑—É—Å—Ç—Ä—ñ—á–∞—î —Ç–µ–±–µ –∑ –ø–æ—Å–º—ñ—à–∫–æ—é! –¢—É—Ç –∫–æ–∂–Ω–∞ –∫—Ä–∞—Å—É–Ω—è –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —Å–≤—ñ–π —Å—Ç–∏–ª—å —ñ –Ω–∞—Å—Ç—Ä—ñ–π üíñ\n\n"
        "–û–±–∏—Ä–∞–π, —â–æ —Ö–æ—á–µ—à:\n"
        "‚Äî –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É\n"
        "‚Äî –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Å–≤–æ—ó –∑–∞–ø–∏—Å–∏\n"
        "‚Äî –∑–Ω–∞–π—Ç–∏ —Å–∞–ª–æ–Ω –Ω–∞ –º–∞–ø—ñ\n"
        "‚Äî –≥–ª—è–Ω—É—Ç–∏ Instagram –∞–±–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ –º–∞–π—Å—Ç—Ä—É\n\n"
        "üå∏ –ö—Ä–∞—Å–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è —Ç—É—Ç!"
    )
    if hasattr(update, "message") and update.message:
        await update.message.reply_text(welcome, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
    else:
        await update.callback_query.edit_message_text(welcome, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")

# --- –ê–î–ú–Ü–ù –°–ï–†–í–Ü–° ---
async def manage_schedule_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    keyboard = [
        [InlineKeyboardButton("üìÜ –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ –¥–Ω—è—Ö", callback_data='edit_schedule')],
        [InlineKeyboardButton("üí§ –í–∏—Å—Ç–∞–≤–∏—Ç–∏ –≤–∏—Ö—ñ–¥–Ω–∏–π", callback_data='delete_day')],
        [InlineKeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ", callback_data='calendar')],
        [InlineKeyboardButton("üìÜ –ö–∞–ª–µ–Ω–¥–∞—Ä –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å", callback_data='weekcalendar')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_service")]
    ]
    text = (
        "üóìÔ∏è *–ö–µ—Ä—É–≤–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–æ–º*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:\n"
        "‚Äî –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –≥–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏\n"
        "‚Äî –í–∏—Å—Ç–∞–≤–∏—Ç–∏ –≤–∏—Ö—ñ–¥–Ω–∏–π\n"
        "‚Äî –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –∞–±–æ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å"
    )
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")

# --- –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ –î–õ–Ø –ê–î–ú–Ü–ù–ê ---
async def admin_service_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üóìÔ∏è –ö–µ—Ä—É–≤–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–æ–º", callback_data="manage_schedule")],
        [InlineKeyboardButton("üí∏ –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–∞–π—Å", callback_data="edit_price")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],  # –¢—ñ–ª—å–∫–∏ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞!
        [InlineKeyboardButton("üí∏ –í–∏—Ç—Ä–∞—Ç–∏", callback_data="expenses_service")],
        [InlineKeyboardButton("üë• –ö–ª—ñ—î–Ω—Ç–∏", callback_data="clients_service")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    text = (
        "üåü *–ê–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å*\n\n"
        "–ö–µ—Ä—É–π—Ç–µ —Ä–æ–∑–∫–ª–∞–¥–æ–º, –¥–∏–≤—ñ—Ç—å—Å—è –≤—Å—ñ –∑–∞–ø–∏—Å–∏ —ñ —Ç—Ä–∏–º–∞–π—Ç–µ –∫—Ä–∞—Å—É –ø—ñ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º üëë\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    )
    await update.callback_query.edit_message_text(
        text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown"
    )

# --- –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –ì–†–ê–§–Ü–ö–£ (–ê–î–ú–Ü–ù) ---
async def edit_schedule_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    today = datetime.now().date()
    dates = []
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT DISTINCT date FROM schedule")
    scheduled_dates = {row[0] for row in c.fetchall()}
    conn.close()
    for i in range(10):
        d = today + timedelta(days=i)
        date_str = d.strftime("%d.%m.%Y")  # !!! —Ç—É—Ç –º–∞—î –±—É—Ç–∏ –ª–∏—à–µ –ø–æ–≤–Ω–∞ –¥–∞—Ç–∞
        dates.append(date_str)
    keyboard = [
        [InlineKeyboardButton(
            f"üóìÔ∏è {datetime.strptime(date, '%d.%m.%Y').strftime('%d.%m.%Y')} {'‚úÖ' if date in scheduled_dates else '‚ûï'}",
            callback_data=f'edit_day_{date}'
        )]
        for date in dates
    ]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_schedule")])
    await query.edit_message_text(
        "üåà –û–±–µ—Ä–∏ –¥–µ–Ω—å –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–±–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Å—É:\n"
        "‚Äî –ù–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –¥–µ–Ω—å\n"
        "‚Äî –î–Ω—ñ –∑ ‚úÖ ‚Äî –≤–∂–µ –º–∞—é—Ç—å –≥—Ä–∞—Ñ—ñ–∫, ‚ûï ‚Äî –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏\n"
        "‚Äî –ó–º—ñ–Ω–∏/–¥–æ–¥–∞–π –≥–æ–¥–∏–Ω–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∏ (–ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –¥–Ω—è)\n",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def edit_day_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    day = query.data.replace('edit_day_', '')  # –≤–∂–µ —É —Ñ–æ—Ä–º–∞—Ç—ñ "31.05.2024"
    context.user_data['edit_day'] = day

    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT times FROM schedule WHERE date = ?", (day,))
    row = c.fetchone()
    conn.close()
    chosen_times = [t.strip() for t in row[0].split(',')] if row and row[0] else []
    context.user_data['chosen_times'] = chosen_times

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –≥–æ–¥–∏–Ω–∏ –¥–ª—è –¥–Ω—è
    weekday = datetime.strptime(day, "%d.%m.%Y").weekday()
    if weekday < 5:
        standard_times = [f"{h:02d}:00" for h in range(14, 19)]
    else:
        standard_times = [f"{h:02d}:00" for h in range(11, 19)]

    # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥–æ–¥–∏–Ω, –±–µ–∑ –∑–∞–π–Ω—è—Ç–∏—Ö
    available_times = [t for t in standard_times if t not in chosen_times]

    # --- –î–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä, —è–∫—â–æ –¥–∞—Ç–∞ = —Å—å–æ–≥–æ–¥–Ω—ñ ---
    now = datetime.now()
    today_str = now.strftime("%d.%m.%Y")

    if day == today_str:
        min_time = (now + timedelta(hours=3)).time()
        filtered_times = []
        for t in available_times:
            slot_time = datetime.strptime(t, "%H:%M").time()
            if slot_time >= min_time:
                filtered_times.append(t)
        available_times = filtered_times

    # --- –§–æ—Ä–º—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —Ç—ñ–ª—å–∫–∏ –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥–æ–¥–∏–Ω ---
    if available_times:
        keyboard = [
            [InlineKeyboardButton(t, callback_data=f"time_{t}")] for t in available_times
        ]
        await query.edit_message_text(
            "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –¥–ª—è –∑–∞–ø–∏—Å—É:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await query.edit_message_text("–ù–∞ –æ–±—Ä–∞–Ω–∏–π –¥–µ–Ω—å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤—ñ–ª—å–Ω–∏—Ö –≥–æ–¥–∏–Ω. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –¥–∞—Ç—É.")


    # 3. –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ –≥–∞–ª–æ—á–∫–∞–º–∏
    keyboard = []
    for t in standard_times:
        mark = "‚úÖ" if t in chosen_times else "‚òê"
        keyboard.append([InlineKeyboardButton(f"{mark} {t}", callback_data=f"settime_{t}")])
    keyboard.append([InlineKeyboardButton("–î–æ–¥–∞—Ç–∏ –≤—Ä—É—á–Ω—É", callback_data="custom_time")])
    keyboard.append([InlineKeyboardButton("–ó–±–µ—Ä–µ–≥—Ç–∏", callback_data="save_times")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –î–Ω—ñ", callback_data="edit_schedule")])

    selected = ', '.join(chosen_times) if chosen_times else "–Ω—ñ—á–æ–≥–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ"
    await query.edit_message_text(
        f"–í–∏–±—Ä–∞–Ω—ñ –≥–æ–¥–∏–Ω–∏: {selected}\n–ù–∞—Ç–∏—Å–∫–∞–π –Ω–∞ —á–∞—Å, —â–æ–± –¥–æ–¥–∞—Ç–∏ –∞–±–æ –ø—Ä–∏–±—Ä–∞—Ç–∏ –π–æ–≥–æ –∑—ñ —Å–ø–∏—Å–∫—É, –∞–±–æ –≤–≤–µ–¥–∏ —Å–≤—ñ–π.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
# --- –î–û–î–ê–¢–ò –£–ú–û–í–£ ---
# --- –î–û–î–ê–í–ê–ù–ù–Ø –£–ú–û–í–ò ---
async def add_condition_start(update, context):
    query = update.callback_query
    await query.answer()

    client_id = int(query.data.split("_")[-1])
    context.user_data["condition_client_id"] = client_id

    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"client_{client_id}")]
    ]

    await query.edit_message_text(
        "‚ûï –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—ó —É–º–æ–≤–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ADDING_CONDITION

async def save_condition(update, context):
    text = update.message.text.strip()
    client_id = context.user_data.get("condition_client_id")

    if not text:
        await update.message.reply_text("‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
        return ADDING_CONDITION

    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("INSERT INTO client_conditions (client_id, condition_text) VALUES (?, ?)", (client_id, text))
    conn.commit()
    conn.close()

    await update.message.reply_text("‚úÖ –£–º–æ–≤—É –¥–æ–¥–∞–Ω–æ.")
    await show_client_card(update, context, client_id)
    return ConversationHandler.END

# --- –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –£–ú–û–í–ò ---
async def edit_condition_start(update, context):
    query = update.callback_query
    await query.answer()

    condition_id = int(query.data.split("_")[-1])
    context.user_data["edit_condition_id"] = condition_id

    await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ü—ñ—î—ó —É–º–æ–≤–∏:")
    return EDITING_CONDITION


async def save_edited_condition(update, context):
    condition_id = context.user_data.get("edit_condition_id")
    new_text = update.message.text.strip()

    if not new_text:
        await update.message.reply_text("‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return EDITING_CONDITION

    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("UPDATE client_conditions SET condition_text=? WHERE id=?", (new_text, condition_id))
    conn.commit()

    c.execute("SELECT client_id FROM client_conditions WHERE id=?", (condition_id,))
    row = c.fetchone()
    conn.close()

    if row:
        client_id = row[0]
        await update.message.reply_text("‚úÖ –£–º–æ–≤—É –æ–Ω–æ–≤–ª–µ–Ω–æ!")
        await show_client_card(update, context, client_id)
    else:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –∫–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    return ConversationHandler.END

# --- –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –ù–û–¢–ê–¢–ö–ò ---
async def edit_note_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    client_id = int(query.data.split("_")[-1])
    context.user_data['step'] = 'edit_note'
    context.user_data['edit_note_client_id'] = client_id

    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"client_{client_id}")]
    ]

    await query.edit_message_text(
        "üìù –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–æ—Ç–∞—Ç–∫—É –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def save_edited_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    note = update.message.text.strip()
    client_id = context.user_data.get("edit_note_client_id")

    if not note:
        await update.message.reply_text("‚ö†Ô∏è –ù–æ—Ç–∞—Ç–∫–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é.")
        return EDITING_NOTE

    conn = sqlite3.connect("appointments.db")
    c = conn.cursor()
    c.execute("UPDATE clients SET note=? WHERE id=?", (note, client_id))
    conn.commit()
    conn.close()

    await update.message.reply_text("‚úÖ –ù–æ—Ç–∞—Ç–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    await show_client_card(update, context, client_id)
    return ConversationHandler.END

# --- –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø –¢–ê –í–ò–î–ê–õ–ï–ù–ù–Ø ---
async def delete_condition(update, context):
    query = update.callback_query
    await query.answer()

    cond_id = int(query.data.split("_")[-1])
    context.user_data["pending_delete_condition_id"] = cond_id

    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT condition_text FROM client_conditions WHERE id=?", (cond_id,))
    row = c.fetchone()
    conn.close()

    if not row:
        await query.edit_message_text("‚ö†Ô∏è –£–º–æ–≤—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    text = row[0]
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", callback_data="confirm_delete"),
            InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_delete")
        ]
    ]

    await query.edit_message_text(
        f"‚ùó –í–∏ —Å–ø—Ä–∞–≤–¥—ñ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —É–º–æ–≤—É:\n\n‚Äú{text}‚Äù",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def confirm_delete(update, context):
    query = update.callback_query
    await query.answer()

    cond_id = context.user_data.get("pending_delete_condition_id")
    if not cond_id:
        await query.edit_message_text("‚ö†Ô∏è –ù–µ–º–∞—î —É–º–æ–≤–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
        return

    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT client_id FROM client_conditions WHERE id=?", (cond_id,))
    row = c.fetchone()

    if not row:
        await query.edit_message_text("‚ö†Ô∏è –£–º–æ–≤—É –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ.")
        return

    client_id = row[0]
    c.execute("DELETE FROM client_conditions WHERE id=?", (cond_id,))
    conn.commit()
    conn.close()

    await query.edit_message_text("üóëÔ∏è –£–º–æ–≤—É –≤–∏–¥–∞–ª–µ–Ω–æ.")
    await show_client_card(update, context, client_id)

async def cancel_delete(update, context):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("‚ùé –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")

async def clients_service_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—á–∏—â—É—î–º–æ –≤—Å—ñ —Å—Ç–∞–Ω–∏ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
    context.user_data.pop('client_add', None)
    context.user_data.pop('client_search', None)
    keyboard = [
        [InlineKeyboardButton("üèÜ –¢–æ–ø-10 –∫–ª—ñ—î–Ω—Ç—ñ–≤", callback_data="clients_top")],
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞", callback_data="client_add")],
        [InlineKeyboardButton("üîç –ó–Ω–∞–π—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞", callback_data="client_search_start")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_service")]
    ]
    text = "üë• *–ö–ª—ñ—î–Ω—Ç–∏ ‚Äî –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    await update.callback_query.edit_message_text(
        text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown"
    )

async def clients_top_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("""
        SELECT clients.id, clients.name, clients.phone, COUNT(bookings.id) as num, 
            COALESCE(SUM(price_list.price), 0)
        FROM clients
        LEFT JOIN bookings ON bookings.client_id = clients.id
        LEFT JOIN price_list ON bookings.procedure = price_list.name
        GROUP BY clients.id
        ORDER BY num DESC, clients.name
        LIMIT 10
    """)
    rows = c.fetchall()
    conn.close()
    text = "üèÜ *–¢–æ–ø-10 –∫–ª—ñ—î–Ω—Ç—ñ–≤:*\n"
    buttons = []
    for idx, (client_id, name, phone, num, total) in enumerate(rows, 1):
        text += f"{idx}. {name} ‚Äî {num} –∑–∞–ø–∏—Å—ñ–≤, {total} –≥—Ä–Ω\n"
        buttons.append([InlineKeyboardButton(f"{name}", callback_data=f"client_{client_id}")])
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="clients_service")])
    await update.callback_query.edit_message_text(
        text, reply_markup=InlineKeyboardMarkup(buttons), parse_mode="Markdown"
    )

async def client_add_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.pop('client_search', None)  # –í–∞–∂–ª–∏–≤–æ!
    context.user_data['client_add'] = {'step': 'name'}
    await update.callback_query.edit_message_text(
        "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="clients_service")]
        ])
    )

async def client_add_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data.get('client_add')
    if not data:
        return
    if data['step'] == 'name':
        context.user_data['client_add']['name'] = update.message.text.strip()
        context.user_data['client_add']['step'] = 'phone'
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª—ñ—î–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: +380...):")
        return
    if data['step'] == 'phone':
        context.user_data['client_add']['phone'] = update.message.text.strip()
        context.user_data['client_add']['note'] = ""   # –ü—Ä–∏–º—ñ—Ç–∫–∞ –æ–¥—Ä–∞–∑—É –ø–æ—Ä–æ–∂–Ω—è
        # ---- –û—Å—å —Ç—É—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—ñ ----
        name = context.user_data['client_add']['name']
        phone = context.user_data['client_add']['phone']
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT id FROM clients WHERE phone = ? OR name = ?", (phone, name))
        duplicate = c.fetchone()
        if duplicate:
            await update.message.reply_text("–ö–ª—ñ—î–Ω—Ç –∑ —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –∞–±–æ –ü–Ü–ë –≤–∂–µ —ñ—Å–Ω—É—î! –û—Å—å –π–æ–≥–æ –∫–∞—Ä—Ç–∫–∞:")
            await show_client_card(update, context, duplicate[0])
            conn.close()
            context.user_data.pop('client_add', None)
            return
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        try:
            c.execute(
                "INSERT INTO clients (name, phone, note, created_at, updated_at) VALUES (?, ?, ?, ?, ?)",
                (name, phone, "", now, now)
            )
            conn.commit()
            client_id = c.lastrowid
            await update.message.reply_text("–ö–ª—ñ—î–Ω—Ç–∞ –¥–æ–¥–∞–Ω–æ! –û—Å—å –π–æ–≥–æ –∫–∞—Ä—Ç–∫–∞:")
            await show_client_card(update, context, client_id)
        except sqlite3.IntegrityError:
            await update.message.reply_text("–ö–ª—ñ—î–Ω—Ç —ñ–∑ —Ü–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –≤–∂–µ —ñ—Å–Ω—É—î!")
        conn.close()
        context.user_data.pop('client_add', None)
        return




async def client_search_start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.pop('client_add', None)   # –í–∞–∂–ª–∏–≤–æ!
    context.user_data['client_search'] = True
    await update.callback_query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è/–ø—Ä—ñ–∑–≤–∏—â–µ –∞–±–æ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª—ñ—î–Ω—Ç–∞:")

async def client_search_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('client_search'):
        return
    search = update.message.text.strip().lower()
    import re
    def clean_phone(phone):
        return re.sub(r"\D", "", phone)
    search_clean = clean_phone(search)
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("""
        SELECT id, name, phone FROM clients 
        WHERE LOWER(name) LIKE ? OR REPLACE(REPLACE(REPLACE(REPLACE(phone, '+', ''), ' ', ''), '-', ''), '(', '') LIKE ?
        LIMIT 10
    """, (f"%{search}%", f"%{search_clean}%"))
    rows = c.fetchall()
    conn.close()
    if not rows:
        await update.message.reply_text("–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    else:
        buttons = [
            [InlineKeyboardButton(f"{name} ({phone})", callback_data=f"client_{client_id}")]
            for client_id, name, phone in rows
        ]
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="clients_service")])
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–ª—ñ—î–Ω—Ç–∞:", reply_markup=InlineKeyboardMarkup(buttons))
    context.user_data.pop('client_search', None)


async def show_client_card(update, context, client_id=None):
    import sqlite3
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup

    query = update.callback_query
    if not client_id:
        client_id = int(query.data.replace("client_", ""))  # –û—Ç—Ä–∏–º—É—î–º–æ client_id —ñ–∑ callback_data
        await query.answer()

    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()

    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞
    c.execute("SELECT name, phone, note FROM clients WHERE id=?", (client_id,))
    result = c.fetchone()
    if not result:
        await query.message.reply_text("‚ùå –ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        conn.close()
        return

    name, phone, note = result

    # –î–∞—Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Å—É
    c.execute("SELECT MAX(date) FROM bookings WHERE client_id=?", (client_id,))
    last_visit = c.fetchone()[0] or "‚Äî"

    # –û—Å–æ–±–ª–∏–≤—ñ —É–º–æ–≤–∏
    c.execute("SELECT condition_text FROM client_conditions WHERE client_id=?", (client_id,))
    conditions = [row[0] for row in c.fetchall()]
    special_conditions = '\n'.join(f"‚Äî {c}" for c in conditions) if conditions else "‚Äî"

    conn.close()

    text = (
        f"üë§ *{name}*\n"
        f"üìû {phone}\n"
        f"üìÖ –û—Å—Ç–∞–Ω–Ω—ñ–π –≤—ñ–∑–∏—Ç: {last_visit}\n"
        f"‚ö†Ô∏è –£–º–æ–≤–∏:\n{special_conditions}\n\n"
        f"üìù –ü—Ä–∏–º—ñ—Ç–∫–∞:\n{note or '‚Äî'}"
    )

    keyboard = [
        [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É", callback_data=f"client_book_{client_id}")],
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —É–º–æ–≤—É", callback_data=f"addcond_{client_id}")],
        [InlineKeyboardButton("üìã –í—Å—ñ —É–º–æ–≤–∏", callback_data=f"listcond_{client_id}")],
        [InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É", callback_data=f"editnote_{client_id}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_clients")]
    ]

    if query:
        await query.edit_message_text(
            text=text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def show_client_card_by_phone(update, context, phone):
    import re
    import sqlite3

    # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –Ω–æ–º–µ—Ä (–∑–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏)
    clean = lambda x: re.sub(r"\D", "", x)
    phone_clean = clean(phone)

    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("""
        SELECT id FROM clients 
        WHERE REPLACE(REPLACE(REPLACE(REPLACE(phone, '+', ''), ' ', ''), '-', ''), '(', '') = ?
        LIMIT 1
    """, (phone_clean,))
    row = c.fetchone()
    conn.close()

    if row:
        client_id = row[0]
        await show_client_card(update, context, client_id)
    else:
        if hasattr(update, "callback_query") and update.callback_query:
            await update.callback_query.edit_message_text("–ö–ª—ñ—î–Ω—Ç–∞ –∑ —Ü–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        else:
            await context.bot.send_message(
                chat_id=update.effective_user.id,
                text="–ö–ª—ñ—î–Ω—Ç–∞ –∑ —Ü–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
            )
async def show_clients_list(update, context):
    import sqlite3
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup

    query = update.callback_query
    await query.answer()

    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT id, name FROM clients ORDER BY name")
    clients = c.fetchall()
    conn.close()

    if not clients:
        await query.edit_message_text("–°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"client_{client_id}")]
        for client_id, name in clients
    ]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="back_to_menu")])

    await query.edit_message_text(
        "üìã –°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def save_note_to_booking(update, context):
    import sqlite3
    user_step = context.user_data.get('step')
    if user_step == 'add_note' and update.effective_user.id in ADMIN_IDS:
        booking_id = context.user_data.get('note_booking_id')
        note_text = update.message.text
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("UPDATE bookings SET note=? WHERE id=?", (note_text, booking_id))
        conn.commit()
        conn.close()
        await update.message.reply_text("–ü—Ä–∏–º—ñ—Ç–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ! üìù")
        context.user_data['step'] = None
        context.user_data['note_booking_id'] = None
        return

    # --- –ú–æ–∂–µ—à –¥–æ–¥–∞—Ç–∏ —ñ–Ω—à—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó user_step –Ω–∏–∂—á–µ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ ---

    # --- –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø—ñ–¥—ñ–π—à–ª–æ ---
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ —Ç–∞ –ø–æ–¥–∞—Ä—É–π—Ç–µ —Å–æ–±—ñ –∫—Ä–∞—Å—É! üíñ")
# --- –Ü–ù–®–Ü –ê–î–ú–Ü–ù –§–£–ù–ö–¶–Ü–á ---
async def delete_day_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    import sqlite3
    from datetime import datetime, timedelta

    user_id = update.effective_user.id if hasattr(update, "effective_user") else update.callback_query.from_user.id
    query = update.callback_query

    if user_id not in ADMIN_IDS:
        await query.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É", show_alert=True)
        return

    now = datetime.now()
    today = now.date()
    current_hour = now.hour
    last_hour_today = 18  # –ì–æ–¥–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è

    # –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–∞–π–±–ª–∏–∂—á—ñ 10 –¥–Ω—ñ–≤, –ø—Ä–æ–ø—É—Å–∫–∞—é—á–∏ —Å—å–æ–≥–æ–¥–Ω—ñ, —è–∫—â–æ –≤–∂–µ –ø—ñ–∑–Ω–æ
    all_dates = []
    for i in range(10):
        day = today + timedelta(days=i)
        if i == 0 and current_hour >= last_hour_today:
            continue
        all_dates.append(day.strftime("%d.%m.%Y"))

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –≤–∏—Ö—ñ–¥–Ω—ñ
    with sqlite3.connect('appointments.db') as conn:
        c = conn.cursor()
        c.execute("SELECT date FROM deleted_days")
        deleted = {row[0] for row in c.fetchall()}

    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ª–∏—à–µ —Ç—ñ, —â–æ —â–µ –Ω–µ –≤–∏—Ö—ñ–¥–Ω—ñ
    available_dates = [d for d in all_dates if d not in deleted]

    if not available_dates:
        await query.edit_message_text(
            "üå∫ –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–Ω—ñ–≤ –¥–ª—è –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ (—É—Å—ñ –≤–∂–µ –≤–∏—Ö—ñ–¥–Ω—ñ –∞–±–æ –¥–∞—Ç–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å).",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_schedule")]])
        )
        return

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ –∫–æ—Ä–æ—Ç–∫–æ—é –¥–∞—Ç–æ—é, –∞–ª–µ –ø–æ–≤–Ω–∏–º callback_data
    keyboard = [
        [InlineKeyboardButton(f"‚ùå {datetime.strptime(date, '%d.%m.%Y').strftime('%d.%m')}", callback_data=f"delday_{date}")]
        for date in available_dates
    ]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_schedule")])

    await query.edit_message_text(
        "üí§ –û–±–µ—Ä–∏ –¥–µ–Ω—å –¥–ª—è –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ (—Ü–µ–π –¥–µ–Ω—å —Å—Ç–∞–Ω–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–º –¥–ª—è –∑–∞–ø–∏—Å—É):",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# --- –í–ò–í–û–î–ò–¢–¨ –£–ú–û–í–ò –ö–õ–Ü–Ñ–ù–¢–ê ---
async def list_conditions_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    import sqlite3
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup

    query = update.callback_query
    await query.answer()

    client_id = int(query.data.split("_")[-1])

    conn = sqlite3.connect("appointments.db")
    c = conn.cursor()
    c.execute("SELECT id, condition_text FROM client_conditions WHERE client_id=?", (client_id,))
    conditions = c.fetchall()
    conn.close()

    if not conditions:
        await query.edit_message_text(
            "üîç –£ —Ü—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ —â–µ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó —É–º–æ–≤–∏.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —É–º–æ–≤—É", callback_data=f"addcond_{client_id}")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"client_{client_id}")]
            ])
        )
        return

    text = "üßæ *–£–º–æ–≤–∏ –∫–ª—ñ—î–Ω—Ç–∞:*\n\n"
    keyboard = []

    for condition_id, condition_text in conditions:
        text += f"‚Ä¢ {condition_text}\n"
        keyboard.append([
            InlineKeyboardButton("üìù –ó–º—ñ–Ω–∏—Ç–∏", callback_data=f"editcond_{condition_id}"),
            InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delcond_{condition_id}")
        ])

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"client_{client_id}")])

    await query.edit_message_text(
        text=text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def calendar_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return
    today = datetime.now().date()
    today_str = today.strftime("%d.%m.%Y")  # —Ç–µ–ø–µ—Ä –ø–æ–≤–Ω–∞ –¥–∞—Ç–∞
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute(
        "SELECT date, time, procedure, name, phone, status FROM bookings "
        "WHERE date=? ORDER BY date, time", (today_str,)
    )
    rows = c.fetchall()
    conn.close()
    if not rows:
        await update.callback_query.edit_message_text("–°—å–æ–≥–æ–¥–Ω—ñ –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î üí§.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_schedule")]])
        )
        return
    text = f"üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ {today.strftime('%d.%m.%Y')}:\n\n"
    for rec in rows:
        date, time, procedure, name, phone, status = rec
        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ—Ä–æ—Ç–∫—É –¥–∞—Ç—É, —è–∫—â–æ —Ç—Ä–µ–±–∞
        date_short = datetime.strptime(date, "%d.%m.%Y").strftime("%d.%m")
        text += (
            f"üïí {time} ‚Äî {procedure}\n"
            f"üë§ {name}, üì± {phone}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
        )
    await update.callback_query.edit_message_text(text,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_schedule")]])
    )

async def week_calendar_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return
    today = datetime.now().date()
    week_dates = [(today + timedelta(days=i)).strftime("%d.%m.%Y") for i in range(7)]  # —Ç–µ–ø–µ—Ä –ø–æ–≤–Ω–∞ –¥–∞—Ç–∞!
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute(
        f"SELECT date, time, procedure, name, phone, status FROM bookings "
        f"WHERE date IN ({','.join(['?']*len(week_dates))}) ORDER BY date, time", week_dates
    )
    rows = c.fetchall()
    conn.close()
    if not rows:
        await update.callback_query.edit_message_text("–ù–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î üí§.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_schedule")]])
        )
        return
    text = "üìÜ –ó–∞–ø–∏—Å–∏ –Ω–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å:\n\n"
    for rec in rows:
        date, time, procedure, name, phone, status = rec
        date_short = datetime.strptime(date, "%d.%m.%Y").strftime("%d.%m")
        text += (
            f"üìÖ {date_short} üïí {time} ‚Äî {procedure}\n"
            f"üë§ {name}, üì± {phone}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
        )
    await update.callback_query.edit_message_text(text,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_schedule")]])
    )

# --- CALLBACK HANDLER ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    print("=== [CALLBACK TRIGGERED] ===")
    print(f"User ID: {user_id}")
    print(f"Callback Data: {query.data}")

    if query.data.startswith('proc_'):
        try:
            proc_map = {
                'proc_brows': '–ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤ (—ñ–¥–µ–∞–ª—å–Ω–∞ —Ñ–æ—Ä–º–∞)',
                'proc_tint_brows': '–§–∞—Ä–±—É–≤–∞–Ω–Ω—è + –∫–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤',
                'proc_lam_brows': '–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤ (WOW-–µ—Ñ–µ–∫—Ç)',
                'proc_lam_lashes': '–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π (–≤–∏—Ä–∞–∑–Ω–∏–π –ø–æ–≥–ª—è–¥)'
            }
            context.user_data['procedure'] = proc_map[query.data]
            context.user_data['step'] = 'book_date'
            today = datetime.now().date()
            dates = []

            # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏—Ö—ñ–¥–Ω—ñ –¥–Ω—ñ
            conn = sqlite3.connect('appointments.db')
            c = conn.cursor()
            c.execute("SELECT date FROM deleted_days")
            deleted = {row[0] for row in c.fetchall()}
            conn.close()

            for i in range(7):
                d = today + timedelta(days=i)
                full_date = d.strftime("%d.%m.%Y")
                show_date = d.strftime("%d.%m")
                if full_date in deleted:
                    continue

                # –ì–æ–¥–∏–Ω–∏ –∑–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º
                conn = sqlite3.connect('appointments.db')
                c = conn.cursor()
                c.execute("SELECT times FROM schedule WHERE date = ?", (full_date,))
                row = c.fetchone()
                conn.close()
                if row and row[0]:
                    times = [t.strip() for t in row[0].split(',')]
                else:
                    weekday = d.weekday()
                    if weekday < 5:
                        times = [f"{h:02d}:00" for h in range(14, 19)]
                    else:
                        times = [f"{h:02d}:00" for h in range(11, 19)]

                # –ó–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω—ñ –≥–æ–¥–∏–Ω–∏
                conn = sqlite3.connect('appointments.db')
                c = conn.cursor()
                c.execute("SELECT time FROM bookings WHERE date = ?", (full_date,))
                booked_times = [row[0] for row in c.fetchall()]
                conn.close()
                free_times = [t for t in times if t not in booked_times]

                # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ñ—ñ–ª—å—Ç—Ä –¥–ª—è —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—å–æ–≥–æ –¥–Ω—è ‚Äî –ª–∏—à–µ —è–∫—â–æ –∑–∞–ª–∏—à–∏–ª–∏—Å—å —Ä–µ–∞–ª—å–Ω—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å–ª–æ—Ç–∏!
                if full_date == datetime.now().strftime("%d.%m.%Y"):
                    now = datetime.now()
                    filtered_times = []
                    for t in free_times:
                        slot_time = datetime.strptime(t, "%H:%M").time()
                        if now.minute < 30:
                            min_dt = now.replace(minute=0, second=0, microsecond=0) + timedelta(hours=3)
                        else:
                            min_dt = (now + timedelta(hours=1)).replace(minute=0, second=0, microsecond=0) + timedelta(
                                hours=2)
                        if slot_time >= min_dt.time():
                            filtered_times.append(t)
                    free_times = filtered_times

                # –î–æ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏, —è–∫—â–æ —î –¥–æ—Å—Ç—É–ø–Ω–∏–π —á–∞—Å
                if free_times:
                    dates.append((full_date, show_date))

            if not dates:
                await query.edit_message_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–Ω—ñ–≤ –¥–ª—è –∑–∞–ø–∏—Å—É. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –º–∞–π—Å—Ç—Ä–∞!")
                return

            keyboard = [
                [InlineKeyboardButton(f"üìÖ –û–±–∏—Ä–∞—é {show} üíã", callback_data=f'date_{full}')] for full, show in dates
            ]
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø—Ä–æ—Ü–µ–¥—É—Ä", callback_data='back_to_procedure')])
            await query.edit_message_text(
                "üå∏ –Ø–∫–∏–π –¥–µ–Ω—å –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –∑–∞–ø–∏—Å—É? –û–±–∏—Ä–∞–π –¥–∞—Ç—É!",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            await query.edit_message_text(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
            import traceback
            print(traceback.format_exc())
        return

    if query.data.startswith('date_'):
        date = query.data.replace('date_', '')  # —Ñ–æ—Ä–º–∞—Ç "31.05.2024"
        context.user_data['date'] = date
        if context.user_data.get('step') == 'book_date':
            context.user_data['step'] = 'book_time'
        else:
            context.user_data['step'] = None

        # –ì–æ–¥–∏–Ω–∏ –∑–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT times FROM schedule WHERE date = ?", (date,))
        row = c.fetchone()
        conn.close()
        if row and row[0]:
            times = [t.strip() for t in row[0].split(',')]
        else:
            day = datetime.strptime(date, "%d.%m.%Y").weekday()
            if day < 5:
                times = [f"{h:02d}:00" for h in range(14, 19)]
            else:
                times = [f"{h:02d}:00" for h in range(11, 19)]

        # --- –§—ñ–ª—å—Ç—Ä –¥–ª—è —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—å–æ–≥–æ –¥–Ω—è ---
        today_str = datetime.now().strftime("%d.%m.%Y")
        if date == today_str:
            now = datetime.now()
            filtered_times = []
            for t in times:
                slot_time = datetime.strptime(t, "%H:%M").time()
                # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —á–∞—Å - —á–µ—Ä–µ–∑ 3 –≥–æ–¥–∏–Ω–∏ –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ–≥–æ
                if now.minute < 30:
                    min_dt = now.replace(minute=0, second=0, microsecond=0) + timedelta(hours=3)
                else:
                    min_dt = (now + timedelta(hours=1)).replace(minute=0, second=0, microsecond=0) + timedelta(hours=2)
                if slot_time >= min_dt.time():
                    filtered_times.append(t)
            times = filtered_times

        # –ó–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω—ñ –≥–æ–¥–∏–Ω–∏
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT time FROM bookings WHERE date = ?", (date,))
        booked_times = [row[0] for row in c.fetchall()]
        conn.close()
        free_times = [t for t in times if t not in booked_times]

        if not free_times:
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è", callback_data='back_to_date')]
            ]
            await query.edit_message_text(
                "üòî –í—Å—ñ –≥–æ–¥–∏–Ω–∏ –Ω–∞ —Ü–µ–π –¥–µ–Ω—å –≤–∂–µ –∑–∞–π–Ω—è—Ç—ñ –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –∑–∞ —á–∞—Å–æ–º. –°–ø—Ä–æ–±—É–π –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –¥–µ–Ω—å!",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return

        keyboard = [
            [InlineKeyboardButton(f"üïí {time} | –ú–æ—î —ñ–¥–µ–∞–ª—å–Ω–µ –≤—ñ–∫–æ–Ω—Ü–µ üíñ", callback_data=f'time_{time}')]
            for time in free_times
        ]
        if context.user_data.get('booking_client_id'):
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏", callback_data='back_to_procedure')])
        else:
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è", callback_data='back_to_date')])
        date_short = datetime.strptime(date, "%d.%m.%Y").strftime("%d.%m")
        await query.edit_message_text(
            f"üëë –û–±—Ä–∞–Ω–æ –¥–∞—Ç—É: {date_short}\n"
            "–ß–∞—Å –±—É—Ç–∏ –∑—ñ—Ä–∫–æ—é! –û–±–∏—Ä–∞–π —ñ–¥–µ–∞–ª—å–Ω–∏–π —á–∞—Å ‚ù§Ô∏è\n"
            "–•–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏ –¥–∞—Ç—É? –ù–∞—Ç–∏—Å–∫–∞–π ‚¨ÖÔ∏è",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

        # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–æ—Ç–∫—É –¥–∞—Ç—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        date_short = datetime.strptime(date, "%d.%m.%Y").strftime("%d.%m")
        await query.edit_message_text(
            f"üëë –û–±—Ä–∞–Ω–æ –¥–∞—Ç—É: {date_short}\n"
            "–ß–∞—Å –±—É—Ç–∏ –∑—ñ—Ä–∫–æ—é! –û–±–∏—Ä–∞–π —ñ–¥–µ–∞–ª—å–Ω–∏–π —á–∞—Å ‚ù§Ô∏è\n"
            "–•–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏ –¥–∞—Ç—É? –ù–∞—Ç–∏—Å–∫–∞–π ‚¨ÖÔ∏è",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    if query.data.startswith('time_'):
        time = query.data.replace('time_', '')
        procedure = context.user_data.get('procedure')
        date = context.user_data.get('date')  # –¢–£–¢ –≤–∂–µ –ø–æ–≤–Ω–∞ –¥–∞—Ç–∞ "31.05.2024"

        if context.user_data.get('booking_client_id'):
            # –ê–¥–º—ñ–Ω: –∑–∞–ø–∏—Å—É—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞ –Ω–∞–ø—Ä—è–º—É
            print("==> [time_] step before:", context.user_data.get('step'))
            print("==> [time_] booking_client_id:", context.user_data.get('booking_client_id'))
            print("==> [time_] procedure:", procedure)
            print("==> [time_] date:", date)
            print("==> [time_] time:", time)
            client_id = context.user_data.get('booking_client_id')
            now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            status = "–ó–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ"
            conn = sqlite3.connect('appointments.db')
            c = conn.cursor()
            c.execute("""
                      INSERT INTO bookings (user_id, client_id, procedure, date, time, status, note)
                      VALUES (?, ?, ?, ?, ?, ?, ?)""",
                      (None, client_id, procedure, date, time, status, ""))
            conn.commit()
            conn.close()
            print("==> [time_] booking DONE!")
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –∫–∞—Ä—Ç–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞", callback_data=f"client_{client_id}")]
            ]
            # –§–æ—Ä–º—É—î–º–æ –∫–æ—Ä–æ—Ç–∫—É –¥–∞—Ç—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            date_short = datetime.strptime(date, "%d.%m.%Y").strftime("%d.%m")
            await query.edit_message_text(
                f"‚úÖ –ö–ª—ñ—î–Ω—Ç–∞ –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É!\n"
                f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {procedure}\n"
                f"–î–∞—Ç–∞: {date_short}\n"
                f"–ß–∞—Å: {time}\n\n"
                f"–ú–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –∫–∞—Ä—Ç–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –¥—ñ–π.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            context.user_data.clear()
            return
        else:
            # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: –ø—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ –ü–Ü–ë —ñ —Ç–µ–ª–µ—Ñ–æ–Ω
            if not procedure or not date:
                await query.edit_message_text("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑–∞–ø–∏—Å —Å–ø–æ—á–∞—Ç–∫—É.")
                context.user_data.clear()
                return

            context.user_data['time'] = time
            context.user_data['step'] = 'get_fullinfo'
            await query.edit_message_text(
                f"üìã –í–≤–µ–¥—ñ—Ç—å *–ü–Ü–ë —Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É* —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n\n"
                f"`–û–ª—å–≥–∞ –ß–∞—Ä—ñ–≤–Ω–∞ +380961234567`",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_time')]
                ])
            )
            return

    if query.data == 'back_to_time':
        date = context.user_data.get('date')
        procedure = context.user_data.get('procedure')

        if not date or not procedure:
            # –Ø–∫—â–æ –Ω–µ–º–∞—î –¥–∞—Ç–∏ —á–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏, –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –¥–æ –≤–∏–±–æ—Ä—É –ø—Ä–æ—Ü–µ–¥—É—Ä
            keyboard = [
                [InlineKeyboardButton("‚ú® –ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤ (—ñ–¥–µ–∞–ª—å–Ω–∞ —Ñ–æ—Ä–º–∞)", callback_data='proc_brows')],
                [InlineKeyboardButton("üé® –§–∞—Ä–±—É–≤–∞–Ω–Ω—è + –∫–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤", callback_data='proc_tint_brows')],
                [InlineKeyboardButton("üåü –õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤ (WOW-–µ—Ñ–µ–∫—Ç)", callback_data='proc_lam_brows')],
                [InlineKeyboardButton("üëÅÔ∏è –õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π (–≤–∏—Ä–∞–∑–Ω–∏–π –ø–æ–≥–ª—è–¥)", callback_data='proc_lam_lashes')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='back_to_menu')]
            ]
            await query.edit_message_text(
                "‚ú® –û–±–µ—Ä–∏ —Å–≤–æ—é *–± º—é—Ç—ñ-–ø—Ä–æ—Ü–µ–¥—É—Ä—É*!\n"
                "–ü–æ–∑–Ω–∞—á —Ç—É, —è–∫–∞ –Ω–∞–¥–∏—Ö–∞—î –Ω–∞–π–±—ñ–ª—å—à–µ ‚Äî –∞–±–æ –Ω–∞—Ç–∏—Å–∫–∞–π ‚¨ÖÔ∏è —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é üåàüíñ\n\n"
                "–û–±—ñ—Ü—è—é, —Ç–≤–æ—è –∫—Ä–∞—Å–∞ –∑–∞—Å—è—î —â–µ —è—Å–∫—Ä–∞–≤—ñ—à–µ! ü´∂",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
            return

        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≤–∏–±–æ—Ä—É —á–∞—Å—É –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –¥–∞—Ç–∏
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT times FROM schedule WHERE date = ?", (date,))
        row = c.fetchone()
        conn.close()

        if row:
            times = [t.strip() for t in row[0].split(',')]
        else:
            day = datetime.strptime(date + f".{datetime.now().year}", "%d.%m.%Y").weekday()
            if day < 5:
                times = [f"{h:02d}:00" for h in range(14, 19)]
            else:
                times = [f"{h:02d}:00" for h in range(11, 19)]

        keyboard = [
            [InlineKeyboardButton(f"üïí {time} | –ú–æ—î —ñ–¥–µ–∞–ª—å–Ω–µ –≤—ñ–∫–æ–Ω—Ü–µ üíñ", callback_data=f'time_{time}')]
            for time in times
        ]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏", callback_data='back_to_date')])

        await query.edit_message_text(
            "üëë –ß–∞—Å –±—É—Ç–∏ –∑—ñ—Ä–∫–æ—é! –û–±–∏—Ä–∞–π —ñ–¥–µ–∞–ª—å–Ω–∏–π —á–∞—Å ‚ù§Ô∏è\n"
            "–•–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏ –¥–∞—Ç—É? –ù–∞—Ç–∏—Å–∫–∞–π ‚¨ÖÔ∏è",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    if query.data == 'back_to_date':
        procedure = context.user_data.get('procedure')
        today = datetime.now().date()
        dates = []
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT date FROM deleted_days")
        deleted = {row[0] for row in c.fetchall()}
        conn.close()
        for i in range(7):
            d = today + timedelta(days=i)
            date_str = d.strftime("%d.%m.%Y")
            if date_str not in deleted:
                dates.append(date_str)
        keyboard = [
            [InlineKeyboardButton(f"üìÖ –û–±–∏—Ä–∞—é {date} üíã", callback_data=f'date_{date}')] for date in dates
        ]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø—Ä–æ—Ü–µ–¥—É—Ä", callback_data='back_to_procedure')])
        await query.edit_message_text(
            "üå∏ –Ø–∫–∏–π –¥–µ–Ω—å –∑—Ä–æ–±–∏—Ç—å —Ç–µ–±–µ —â–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ñ—à–æ—é? –û–±–∏—Ä–∞–π —Å–µ—Ä–¥–µ—á–∫–æ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—ñ –π –ª–æ–≤–∏ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è! –Ø–∫—â–æ —Ä–∞–ø—Ç–æ–º –∑–∞—Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–∏—Å–Ω–∏ ‚¨ÖÔ∏è —ñ –ø–æ–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ –≤–∏–±–æ—Ä—É, –±–æ —Ç–≤–æ—è –∫—Ä–∞—Å–∞ –≤–∞–∂–ª–∏–≤–∞! ‚ú®üíê",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    if query.data == "manage_schedule":
        await manage_schedule_handler(update, context)
        return

    if query.data == "admin_service":
        await admin_service_handler(update, context)
        return

    if query.data == "back_to_clients":
        await show_clients_list(update, context)
        return

    if query.data == "expense_add":
        context.user_data['expense'] = {}
        context.user_data['expense']['date'] = datetime.now().strftime("%d.%m.%Y")  # —Ñ—ñ–∫—Å—É—î–º–æ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—é –¥–∞—Ç—É
        context.user_data['step'] = 'expense_add_category'
        await query.edit_message_text(
            "–í–≤–µ–¥—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∏—Ç—Ä–∞—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –º–∞—Ç–µ—Ä—ñ–∞–ª–∏, –æ—Ä–µ–Ω–¥–∞, —Ä–µ–∫–ª–∞–º–∞):",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="expenses_service")]
            ])
        )
        return

    if query.data == 'edit_schedule':
        await edit_schedule_handler(update, context)
        return

    if query.data == "expenses_service":
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É", callback_data="expense_add")],
            [InlineKeyboardButton("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏", callback_data="expense_list")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_service")]
        ]
        text = "üí∏ *–ú–µ–Ω—é –≤–∏—Ç—Ä–∞—Ç*\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
        return

    if query.data == "expense_add":
        context.user_data["add_expense_step"] = "date"
        await query.edit_message_text(
            "–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –≤–∏—Ç—Ä–∞—Ç–∏ (–¥–¥.–º–º.—Ä—Ä—Ä—Ä) –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '—Å—å–æ–≥–æ–¥–Ω—ñ':",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="expenses_service")]
            ])
        )
        return

    if query.data == "expense_list":
        today = datetime.now()
        month_ago = (today - timedelta(days=30)).strftime("%d.%m.%Y")
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT date, category, amount, note FROM expenses ORDER BY date DESC LIMIT 20")
        rows = c.fetchall()
        conn.close()
        if rows:
            text = "üí∏ *–û—Å—Ç–∞–Ω–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏:*\n\n"
            for date, cat, amount, note in rows:
                text += f"‚Äî {date} | {cat} | {amount} –≥—Ä–Ω | {note}\n"
        else:
            text = "–í–∏—Ç—Ä–∞—Ç –ø–æ–∫–∏ –Ω–µ –¥–æ–¥–∞–Ω–æ."
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="expenses_service")]
        ]), parse_mode="Markdown")
        return

    if query.data == 'show_price':
        price_text = get_price_text()
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        await query.edit_message_text(price_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
        return

    # –û—Å—å —Ç—É—Ç –¥–æ–¥–∞—î—à –±–ª–æ–∫–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∞–π—Å—É
    if query.data == 'edit_price':
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT id, name, price FROM price_list")
        services = c.fetchall()
        conn.close()
        keyboard = [
            [InlineKeyboardButton(f"{name}: {price} –≥—Ä–Ω", callback_data=f'edit_price_{id}')]
            for id, name, price in services
        ]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ê–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å", callback_data="admin_service")])
        await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É –¥–ª—è –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    if query.data.startswith('edit_price_'):
        service_id = int(query.data.replace('edit_price_', ''))
        context.user_data['edit_price_id'] = service_id
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT name, price FROM price_list WHERE id=?", (service_id,))
        name, old_price = c.fetchone()
        conn.close()
        await query.edit_message_text(
            f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É –¥–ª—è:\n*{name}* (–∑–∞—Ä–∞–∑: {old_price} –≥—Ä–Ω)", parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_price")]])
        )
        context.user_data['step'] = 'update_price'
        return

    if query.data == 'check_booking':
        user_id = query.from_user.id
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT id, procedure, date, time, status, note FROM bookings WHERE user_id=?", (user_id,))
        rows = c.fetchall()
        conn.close()

        buttons = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]

        if rows:
            text = "üìù *–í–∞—à—ñ –∑–∞–ø–∏—Å–∏:*\n\n"
            for rec in rows:
                booking_id, procedure, date, time, status, note = rec
                msg = f"‚ú® {procedure}\nüóìÔ∏è {date} –æ {time}\n–°—Ç–∞—Ç—É—Å: *{status}*"
                if note:
                    msg += f"\nüìù –ü—Ä–∏–º—ñ—Ç–∫–∞: _{note}_"
                text += msg + "\n\n"
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode="Markdown"
            )
        else:
            await query.edit_message_text(
                "–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ß–∞—Å –æ–Ω–æ–≤–∏—Ç–∏ —Å–≤—ñ–π –æ–±—Ä–∞–∑! üíÑ",
                reply_markup=InlineKeyboardMarkup(buttons)
            )
        return

    if query.data.startswith('note_'):
        booking_id = int(query.data.replace('note_', ''))
        context.user_data['note_booking_id'] = booking_id
        await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∏–º—ñ—Ç–∫—É –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–ø–∏—Å—É:")
        context.user_data['step'] = 'add_note'
        return

    if query.data.startswith('edit_day_'):
        await edit_day_handler(update, context)
        return

    if query.data == 'admin_stats':
        await admin_stats_handler(update, context)
        return

    if query.data == 'delete_day':
        await delete_day_handler(update, context)
        return

    if query.data == 'stats_today':
        await show_stats_for_period(update, context, 'today')
        return
    if query.data == 'stats_week':
        await show_stats_for_period(update, context, 'week')
        return
    if query.data == 'stats_month':
        await show_stats_for_period(update, context, 'month')
        return
    if query.data == 'stats_by_period':
        context.user_data['step'] = 'stats_period_start'
        await update.callback_query.edit_message_text(
            "–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É –ø–µ—Ä—ñ–æ–¥—É (–¥–¥.–º–º.—Ä—Ä—Ä—Ä):",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_stats")]])
        )
        return

    # --- –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≥–æ–¥–∏–Ω–∏ –¥–ª—è –¥–Ω—è (settime_) ---
    if query.data.startswith("settime_"):
        time = query.data.replace("settime_", "")
        chosen = context.user_data.get('chosen_times', [])
        if time in chosen:
            chosen.remove(time)
        else:
            chosen.append(time)
        context.user_data['chosen_times'] = chosen  # –û–ù–û–í–õ–Æ–Ñ–ú–û!

        # --- –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –≥–æ–¥–∏–Ω ---
        weekday = datetime.strptime(context.user_data['edit_day'], "%d.%m.%Y").weekday()
        if weekday < 5:
            times = [f"{h:02d}:00" for h in range(14, 19)]
        else:
            times = [f"{h:02d}:00" for h in range(11, 19)]

        keyboard = []
        for t in times:
            mark = "‚úÖ" if t in chosen else "‚òê"
            keyboard.append([InlineKeyboardButton(f"{mark} {t}", callback_data=f"settime_{t}")])

        keyboard.append([InlineKeyboardButton("–î–æ–¥–∞—Ç–∏ –≤—Ä—É—á–Ω—É", callback_data="custom_time")])
        keyboard.append([InlineKeyboardButton("–ó–±–µ—Ä–µ–≥—Ç–∏", callback_data="save_times")])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –î–Ω—ñ", callback_data="edit_schedule")])

        selected = ', '.join(chosen) if chosen else "–Ω—ñ—á–æ–≥–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ"
        await query.edit_message_text(
            f"–í–∏–±—Ä–∞–Ω—ñ –≥–æ–¥–∏–Ω–∏: {selected}\n–ù–∞—Ç–∏—Å–∫–∞–π –Ω–∞ —á–∞—Å, —â–æ–± –¥–æ–¥–∞—Ç–∏ –∞–±–æ –ø—Ä–∏–±—Ä–∞—Ç–∏ –π–æ–≥–æ –∑—ñ —Å–ø–∏—Å–∫—É, –∞–±–æ –≤–≤–µ–¥–∏ —Å–≤—ñ–π.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    # --- –ó–±–µ—Ä–µ–≥—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ –≥–æ–¥–∏–Ω–∏ ---
    if query.data == "save_times":
        day = context.user_data.get('edit_day')
        times = context.user_data.get('chosen_times', [])
        times_str = ",".join(times)
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT id FROM schedule WHERE date = ?", (day,))
        exists = c.fetchone()
        if exists:
            c.execute("UPDATE schedule SET times=? WHERE date=?", (times_str, day))
        else:
            c.execute("INSERT INTO schedule (date, times) VALUES (?, ?)", (day, times_str))
        conn.commit()
        conn.close()
        await query.edit_message_text(f"‚úÖ –î–ª—è –¥–Ω—è {day} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≥–æ–¥–∏–Ω–∏: {times_str if times_str else '–∂–æ–¥–Ω–æ—ó'}")
        context.user_data['step'] = None
        context.user_data['edit_day'] = None
        context.user_data['chosen_times'] = []
        return

    # --- –í–≤–µ—Å—Ç–∏ –≥–æ–¥–∏–Ω–∏ –≤—Ä—É—á–Ω—É ---
    if query.data == "custom_time":
        await query.edit_message_text(
            "–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—ó –≥–æ–¥–∏–Ω–∏ –¥–ª—è —Ü—å–æ–≥–æ –¥–Ω—è —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 10:00,11:30,12:00):",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –î–Ω—ñ", callback_data="edit_schedule")]])
        )
        context.user_data['step'] = 'edit_times'
        return
    if query.data == "clients_service":
        await clients_service_handler(update, context)
        return
    if query.data == "clients_top":
        await clients_top_handler(update, context)
        return
    if query.data.startswith("clientphone_"):
        phone = query.data.replace("clientphone_", "")
        await show_client_card_by_phone(update, context, phone)
        return
    if query.data == "client_add":
        await client_add_handler(update, context)
        return
    if query.data == "client_search_start":
        await client_search_start_handler(update, context)
        return


    # –î–∞–ª—ñ –≤—Å—ñ —ñ–Ω—à—ñ –≥—ñ–ª–∫–∏ button_handler...
    if query.data == 'edit_schedule':
        await edit_schedule_handler(update, context)
        return

    if query.data.startswith('edit_day_'):
        await edit_day_handler(update, context)
        return

    if query.data == "back_to_menu":
        await start(update, context)
        return

    if query.data == "edit_schedule":
        await edit_schedule_handler(update, context)
        return

    if query.data.startswith('set_dayoff_'):
        date = query.data.replace('set_dayoff_', '')
        await set_day_off(update, context, date)
        return

    if query.data == "calendar":
        await calendar_handler(update, context)
        return

    if query.data == "weekcalendar":
        await week_calendar_handler(update, context)
        return

    if query.data.startswith("delday_"):
        date = query.data.replace("delday_", "")  # –æ—á—ñ–∫—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç "31.05.2024"

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏
        try:
            datetime.strptime(date, "%d.%m.%Y")
        except ValueError:
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –Ω–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏.")
            return

        # –î–æ–¥–∞—î–º–æ –≤ –±–∞–∑—É –∑ –∑–∞—Ö–∏—Å—Ç–æ–º –≤—ñ–¥ –¥—É–±–ª—é–≤–∞–Ω—å —Ç–∞ –±–ª–æ–∫—É–≤–∞–Ω—å
        try:
            with sqlite3.connect('appointments.db', timeout=5) as conn:
                c = conn.cursor()
                c.execute("INSERT INTO deleted_days (date) VALUES (?)", (date,))
                conn.commit()
        except sqlite3.IntegrityError:
            await query.edit_message_text("‚ö†Ô∏è –¶–µ–π –¥–µ–Ω—å —É–∂–µ –∑—Ä–æ–±–ª–µ–Ω–æ –≤–∏—Ö—ñ–¥–Ω–∏–º.")
            return
        except sqlite3.OperationalError:
            await query.edit_message_text("üöß –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")
            return

        # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∫–æ—Ä–æ—Ç–∫—É –¥–∞—Ç—É
        date_short = datetime.strptime(date, "%d.%m.%Y").strftime("%d.%m")
        await query.edit_message_text(
            f"‚ùå –î–µ–Ω—å {date_short} –∑—Ä–æ–±–ª–µ–Ω–æ –≤–∏—Ö—ñ–¥–Ω–∏–º —ñ –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ –±—É–¥–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_schedule")]])
        )

    if query.data.startswith("client_history_"):
        client_id = int(query.data.replace("client_history_", ""))
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        # –í–∏–±–∏—Ä–∞—î–º–æ —ñ–º'—è –∫–ª—ñ—î–Ω—Ç–∞
        c.execute("SELECT name FROM clients WHERE id=?", (client_id,))
        row = c.fetchone()
        name = row[0] if row else "–ù–µ–≤—ñ–¥–æ–º–∏–π"
        # –í–∏–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ —Ü—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
        c.execute("SELECT procedure, date, time, status FROM bookings WHERE client_id=? ORDER BY date DESC, time DESC",
                  (client_id,))
        visits = c.fetchall()
        conn.close()
        if visits:
            msg = f"üìã *–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è* _{name}_:\n\n"
            for proc, date, time, status in visits:
                msg += f"‚Ä¢ *{date}* –æ *{time}* ‚Äî {proc} (_{status}_)\n"
        else:
            msg = f"–£ –∫–ª—ñ—î–Ω—Ç–∞ {name} —â–µ –Ω–µ –±—É–ª–æ –∑–∞–ø–∏—Å—ñ–≤."
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –∫–∞—Ä—Ç–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞", callback_data=f"client_{client_id}")]
        ]
        await query.edit_message_text(msg, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))
        return
    if query.data == 'back_to_procedure':
        client_id = context.user_data.get('booking_client_id')
        if client_id:
            # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ (–∞–¥–º—ñ–Ω)
            with sqlite3.connect('appointments.db') as conn:
                c = conn.cursor()
                c.execute("SELECT name FROM clients WHERE id=?", (client_id,))
                row = c.fetchone()
            name = row[0] if row else "–ù–µ–≤—ñ–¥–æ–º–∏–π"
            keyboard = [
                [InlineKeyboardButton("‚ú® –ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤ (—ñ–¥–µ–∞–ª—å–Ω–∞ —Ñ–æ—Ä–º–∞)", callback_data='proc_brows')],
                [InlineKeyboardButton("üé® –§–∞—Ä–±—É–≤–∞–Ω–Ω—è + –∫–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤", callback_data='proc_tint_brows')],
                [InlineKeyboardButton("üåü –õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤ (WOW-–µ—Ñ–µ–∫—Ç)", callback_data='proc_lam_brows')],
                [InlineKeyboardButton("üëÅÔ∏è –õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π (–≤–∏—Ä–∞–∑–Ω–∏–π –ø–æ–≥–ª—è–¥)", callback_data='proc_lam_lashes')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ä—Ç–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞", callback_data=f'client_{client_id}')]
            ]
            await query.edit_message_text(
                f"–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É –¥–ª—è –∑–∞–ø–∏—Å—É –∫–ª—ñ—î–Ω—Ç–∞ {name}:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            # –ó–≤–∏—á–∞–π–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
            if 'booking_client_id' in context.user_data:
                del context.user_data['booking_client_id']
            keyboard = [
                [InlineKeyboardButton("‚ú® –ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤ (—ñ–¥–µ–∞–ª—å–Ω–∞ —Ñ–æ—Ä–º–∞)", callback_data='proc_brows')],
                [InlineKeyboardButton("üé® –§–∞—Ä–±—É–≤–∞–Ω–Ω—è + –∫–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤", callback_data='proc_tint_brows')],
                [InlineKeyboardButton("üåü –õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤ (WOW-–µ—Ñ–µ–∫—Ç)", callback_data='proc_lam_brows')],
                [InlineKeyboardButton("üëÅÔ∏è –õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π (–≤–∏—Ä–∞–∑–Ω–∏–π –ø–æ–≥–ª—è–¥)", callback_data='proc_lam_lashes')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='back_to_menu')]
            ]
            await query.edit_message_text(
                "‚ú® –û–±–µ—Ä–∏ —Å–≤–æ—é *–± º—é—Ç—ñ-–ø—Ä–æ—Ü–µ–¥—É—Ä—É*!\n"
                "–ü–æ–∑–Ω–∞—á —Ç—É, —è–∫–∞ –Ω–∞–¥–∏—Ö–∞—î –Ω–∞–π–±—ñ–ª—å—à–µ ‚Äî –∞–±–æ –Ω–∞—Ç–∏—Å–∫–∞–π ‚¨ÖÔ∏è —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é üåàüíñ\n\n"
                "–û–±—ñ—Ü—è—é, —Ç–≤–æ—è –∫—Ä–∞—Å–∞ –∑–∞—Å—è—î —â–µ —è—Å–∫—Ä–∞–≤—ñ—à–µ! ü´∂",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
        return

    if query.data.startswith("client_book_"):
        try:
            print("==> [client_book_] step before:", context.user_data.get('step'))
            client_id = int(query.data.replace("client_book_", ""))
            with sqlite3.connect('appointments.db') as conn:
                c = conn.cursor()
                c.execute("SELECT name FROM clients WHERE id=?", (client_id,))
                row = c.fetchone()
            print("==> [client_book_] client row:", row)
            name = row[0] if row else "–ù–µ–≤—ñ–¥–æ–º–∏–π"
            context.user_data['booking_client_id'] = client_id
            context.user_data['step'] = 'book_procedure'
            print("==> [client_book_] step after:", context.user_data.get('step'))
            print("==> [client_book_] booking_client_id:", context.user_data.get('booking_client_id'))
            keyboard = [
                [InlineKeyboardButton("‚ú® –ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤ (—ñ–¥–µ–∞–ª—å–Ω–∞ —Ñ–æ—Ä–º–∞)", callback_data='proc_brows')],
                [InlineKeyboardButton("üé® –§–∞—Ä–±—É–≤–∞–Ω–Ω—è + –∫–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤", callback_data='proc_tint_brows')],
                [InlineKeyboardButton("üåü –õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤ (WOW-–µ—Ñ–µ–∫—Ç)", callback_data='proc_lam_brows')],
                [InlineKeyboardButton("üëÅÔ∏è –õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π (–≤–∏—Ä–∞–∑–Ω–∏–π –ø–æ–≥–ª—è–¥)", callback_data='proc_lam_lashes')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ä—Ç–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞", callback_data=f'client_{client_id}')]
            ]
            result = await context.bot.send_message(
                chat_id=query.message.chat.id,
                text=f"–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É –¥–ª—è –∑–∞–ø–∏—Å—É –∫–ª—ñ—î–Ω—Ç–∞ {name}:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            print("==> [client_book_] send_message sent, result:", result)
        except Exception as e:
            import traceback
            print("==> [client_book_] ERROR:", e)
            print(traceback.format_exc())
        return

    if query.data.startswith('client_'):
        client_id = int(query.data.replace("client_", ""))
        await show_client_card(update, context, client_id)
        return
    # --- –Ü –¥–∞–ª—ñ —ñ–Ω—à—ñ –∫–ª—ñ—î–Ω—Ç—Å—å–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó... ---
    # --- –î–õ–Ø –ö–õ–Ü–Ñ–ù–¢–ê ---
    if query.data == 'book' or query.data == 'back_to_procedure':
        keyboard = [
            [InlineKeyboardButton("‚ú® –ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤ (—ñ–¥–µ–∞–ª—å–Ω–∞ —Ñ–æ—Ä–º–∞)", callback_data='proc_brows')],
            [InlineKeyboardButton("üé® –§–∞—Ä–±—É–≤–∞–Ω–Ω—è + –∫–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤", callback_data='proc_tint_brows')],
            [InlineKeyboardButton("üåü –õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤ (WOW-–µ—Ñ–µ–∫—Ç)", callback_data='proc_lam_brows')],
            [InlineKeyboardButton("üëÅÔ∏è –õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π (–≤–∏—Ä–∞–∑–Ω–∏–π –ø–æ–≥–ª—è–¥)", callback_data='proc_lam_lashes')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='back_to_menu')]
        ]
        await query.edit_message_text(
            "‚ú® –û–±–µ—Ä–∏ —Å–≤–æ—é *–± º—é—Ç—ñ-–ø—Ä–æ—Ü–µ–¥—É—Ä—É*!\n"
            "–ü–æ–∑–Ω–∞—á —Ç—É, —è–∫–∞ –Ω–∞–¥–∏—Ö–∞—î –Ω–∞–π–±—ñ–ª—å—à–µ ‚Äî –∞–±–æ –Ω–∞—Ç–∏—Å–∫–∞–π ‚¨ÖÔ∏è —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é üåàüíñ\n\n"
            "–û–±—ñ—Ü—è—é, —Ç–≤–æ—è –∫—Ä–∞—Å–∞ –∑–∞—Å—è—î —â–µ —è—Å–∫—Ä–∞–≤—ñ—à–µ! ü´∂",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        # context.user_data.clear()  # –û–ö–†–ï–ú–û –û–ß–ò–©–£–ô –ü–Ü–°–õ–Ø –ó–ê–í–ï–†–®–ï–ù–ù–Ø –ó–ê–ü–ò–°–£, –∞ –Ω–µ —Ç—É—Ç!
        return

    if query.data == 'check_booking':
        user_id = query.from_user.id
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT id, procedure, date, time, status FROM bookings WHERE user_id=?", (user_id,))
        rows = c.fetchall()
        conn.close()
        if rows:
            for rec in rows:
                booking_id, procedure, date, time, status = rec
                msg = f"‚ú® {procedure}\nüóìÔ∏è {date} –æ {time}\n–°—Ç–∞—Ç—É—Å: *{status}*"
                buttons = []
                if status == "–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è":
                    buttons.append(InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{booking_id}"))
                    buttons.append(InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data=f"cancel_{booking_id}"))
                reply_markup = InlineKeyboardMarkup([buttons]) if buttons else None
                await query.message.reply_text(msg, reply_markup=reply_markup, parse_mode="Markdown")
        else:
            await query.message.reply_text("–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ß–∞—Å –æ–Ω–æ–≤–∏—Ç–∏ —Å–≤—ñ–π –æ–±—Ä–∞–∑! üíÑ")
        return

    # --- –í–ò–ë–Ü–† –ß–ê–°–£ –î–õ–Ø –ó–ê–ü–ò–°–£ (–ê–î–ú–Ü–ù –∞–±–æ –ó–í–ò–ß–ê–ô–ù–ò–ô –ö–õ–Ü–Ñ–ù–¢) ---


    if query.data == "master_phone":
        text = (
            f"üë©‚Äçüé® *–í–∞—à –º–∞–π—Å—Ç–µ—Ä: {MASTER_NAME}*\n"
            f"‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: `{MASTER_PHONE}`\n"
            "–ó–∞–≤–∂–¥–∏ —Ä–∞–¥–∞ –¥–æ–ø–æ–º–æ–≥—Ç–∏ ‚Äî —Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –∞–±–æ –ø–∏—à—ñ—Ç—å —É Viber/Telegram! üí¨"
        )
        await query.edit_message_text(text, parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(
                [
                    [InlineKeyboardButton("üì∏ Instagram", url=INSTAGRAM_LINK)],
                    [InlineKeyboardButton("üìç –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è", url=MASTER_GEO_LINK)],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                ]
            )
        )
        return

    if query.data.startswith('confirm_'):
        booking_id = int(query.data.replace('confirm_', ''))
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("UPDATE bookings SET status=? WHERE id=?", ("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ", booking_id))
        conn.commit()
        c.execute("SELECT procedure, date, time FROM bookings WHERE id=?", (booking_id,))
        row = c.fetchone()
        conn.close()
        if row:
            procedure, date, time = row
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
            await query.message.reply_text(
                f"‚úÖ –í–∞—à –∑–∞–ø–∏—Å –Ω–∞ {procedure} {date} –æ {time} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –Ø –∑ –Ω–µ—Ç–µ—Ä–ø—ñ–Ω–Ω—è–º —á–µ–∫–∞—é –Ω–∞ —Ç–µ–±–µ! üíñ",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        return

    if query.data.startswith('cancel_'):
        booking_id = int(query.data.replace('cancel_', ''))
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT name, procedure, date, time FROM bookings WHERE id=?", (booking_id,))
        row = c.fetchone()
        c.execute("DELETE FROM bookings WHERE id=?", (booking_id,))
        conn.commit()
        conn.close()
        if row:
            name, procedure, date, time = row
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É
            await query.message.reply_text(
                f"‚ùå –¢–≤—ñ–π –∑–∞–ø–∏—Å –Ω–∞ *{procedure}* {date} –æ {time} —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –Ø–∫—â–æ —Ö–æ—á–µ—à, —Ç–∏ –º–æ–∂–µ—à –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –∑–Ω–æ–≤—É –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é üëë",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üíé –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è —â–µ —Ä–∞–∑", callback_data='book')],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="back_to_menu")]
                ])
            )
            # –¢–Ü–õ–¨–ö–ò —è–∫—â–æ row –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É!
            await context.bot.send_message(
                chat_id=ADMIN_IDS,
                text=f"‚ùóÔ∏è–ö–ª—ñ—î–Ω—Ç {name} —Å–∫–∞—Å—É–≤–∞–≤ –∑–∞–ø–∏—Å: {procedure} {date} –æ {time}"
            )
        return

# --- –í–í–ï–î–ï–ù–ù–Ø –¢–ï–ö–°–¢–£ ---
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_step = context.user_data.get('step')
    text = update.message.text


    # --- 2. –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ ---
    if context.user_data.get('client_add'):
        await client_add_text_handler(update, context)
        return

    # --- 3. –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞ ---
    if context.user_data.get('client_search'):
        await client_search_text_handler(update, context)
        return

    # --- 4. –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏ ---
    if context.user_data.get('step') == 'edit_note':
        note = update.message.text.strip()
        client_id = context.user_data.get('edit_note_client_id')
        if client_id:
            conn = sqlite3.connect('appointments.db')
            c = conn.cursor()
            c.execute("UPDATE clients SET note=? WHERE id=?", (note, client_id))
            conn.commit()
            conn.close()
            await update.message.reply_text("–ü—Ä–∏–º—ñ—Ç–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ!")
        else:
            await update.message.reply_text("–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        context.user_data['step'] = None
        context.user_data['edit_note_client_id'] = None
        return

    # --- 5. –í–≤–µ–¥–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó –¥–∞—Ç–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
    if context.user_data.get('step') == 'stats_period_start':
        date_start = update.message.text.strip()
        context.user_data['stats_period'] = {'start': date_start}
        context.user_data['step'] = 'stats_period_end'
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –∫—ñ–Ω—Ü—è –ø–µ—Ä—ñ–æ–¥—É (–¥–¥.–º–º.—Ä—Ä—Ä—Ä):")
        return

    # --- 6. –í–≤–µ–¥–µ–Ω–Ω—è –∫—ñ–Ω—Ü–µ–≤–æ—ó –¥–∞—Ç–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
    if context.user_data.get('step') == 'stats_period_end':
        date_end = update.message.text.strip()
        date_start = context.user_data['stats_period']['start']
        context.user_data['step'] = None
        await show_stats_for_custom_period(update, context, date_start=date_start, date_end=date_end)
        return

    # --- 7. –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –≤–∏—Ç—Ä–∞—Ç–∏ ---
    if context.user_data.get('step') == 'expense_add_category':
        context.user_data['expense'] = context.user_data.get('expense', {})
        context.user_data['expense']['category'] = update.message.text.strip()
        context.user_data['expense']['date'] = datetime.now().strftime("%d.%m.%Y")
        context.user_data['step'] = 'expense_add_amount'
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É (–≥—Ä–Ω):")
        return

    # --- 8. –°—É–º–∞ –≤–∏—Ç—Ä–∞—Ç–∏ (—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è) ---
    if context.user_data.get('step') == 'expense_add_amount':
        context.user_data['expense']['amount'] = update.message.text.strip()
        data = context.user_data['expense']
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute(
            "INSERT INTO expenses (date, category, amount, note) VALUES (?, ?, ?, ?)",
            (data['date'], data['category'], data['amount'], "")
        )
        conn.commit()
        conn.close()
        context.user_data['step'] = None
        context.user_data['expense'] = None
        await update.message.reply_text(
            "‚úÖ –í–∏—Ç—Ä–∞—Ç—É –¥–æ–¥–∞–Ω–æ!",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –≤–∏—Ç—Ä–∞—Ç", callback_data="expenses_service")]]
            )
        )
        return

    # ... –î–∞–ª—ñ –º–æ–∂–µ—à –∑–∞–ª–∏—à–∞—Ç–∏ —ñ–Ω—à—ñ –±–ª–æ–∫–∏, —è–∫—â–æ –≤–æ–Ω–∏ —î ...


    # --- –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞ ---
    if context.user_data.get('client_search'):
        await client_search_text_handler(update, context)
        return

    if context.user_data.get('step') == 'edit_note':
        note = update.message.text.strip()
        client_id = context.user_data.get('edit_note_client_id')
        if client_id:
            conn = sqlite3.connect('appointments.db')
            c = conn.cursor()
            c.execute("UPDATE clients SET note=? WHERE id=?", (note, client_id))
            conn.commit()
            conn.close()
            await update.message.reply_text("–ü—Ä–∏–º—ñ—Ç–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ!")
        else:
            await update.message.reply_text("–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        context.user_data['step'] = None
        context.user_data['edit_note_client_id'] = None
        return

    if context.user_data.get('step') == 'stats_period_start':
        date_start = update.message.text.strip()
        context.user_data['stats_period'] = {'start': date_start}
        context.user_data['step'] = 'stats_period_end'
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –∫—ñ–Ω—Ü—è –ø–µ—Ä—ñ–æ–¥—É (–¥–¥.–º–º.—Ä—Ä—Ä—Ä):")
        return

    if context.user_data.get('step') == 'stats_period_end':
        date_end = update.message.text.strip()
        date_start = context.user_data['stats_period']['start']
        context.user_data['step'] = None
        await show_stats_for_custom_period(update, context, date_start=date_start, date_end=date_end)
        return

    # –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –≤–∏—Ç—Ä–∞—Ç–∏
    if context.user_data.get('step') == 'expense_add_category':
        context.user_data['expense'] = context.user_data.get('expense', {})
        context.user_data['expense']['category'] = update.message.text.strip()
        context.user_data['expense']['date'] = datetime.now().strftime("%d.%m.%Y")
        context.user_data['step'] = 'expense_add_amount'
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É (–≥—Ä–Ω):")
        return

    # –°—É–º–∞ –≤–∏—Ç—Ä–∞—Ç–∏ (—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è)
    if context.user_data.get('step') == 'expense_add_amount':
        context.user_data['expense']['amount'] = update.message.text.strip()
        data = context.user_data['expense']
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute(
            "INSERT INTO expenses (date, category, amount, note) VALUES (?, ?, ?, ?)",
            (data['date'], data['category'], data['amount'], "")
        )
        conn.commit()
        conn.close()
        context.user_data['step'] = None
        context.user_data['expense'] = None
        await update.message.reply_text("‚úÖ –í–∏—Ç—Ä–∞—Ç—É –¥–æ–¥–∞–Ω–æ!", reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –≤–∏—Ç—Ä–∞—Ç", callback_data="expenses_service")]]
        ))
        return

    # --- –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –û–ù–û–í–õ–ï–ù–û–á –ù–û–¢–ê–¢–ö–ò ---


    # --- –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–∏–º—ñ—Ç–∫–∏ –¥–æ –∑–∞–ø–∏—Å—É (–∑–∞–ª–∏—à–∞—î–º–æ —è–∫ –±—É–ª–æ) ---
    if user_step == 'add_note' and update.effective_user.id == ADMIN_IDS:
        booking_id = context.user_data['note_booking_id']
        note_text = update.message.text
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("UPDATE bookings SET note=? WHERE id=?", (note_text, booking_id))
        conn.commit()
        conn.close()
        await update.message.reply_text("–ü—Ä–∏–º—ñ—Ç–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ! üìù")
        context.user_data['step'] = None
        context.user_data['note_booking_id'] = None
        return

    # --- –Ü–Ω—à—ñ –æ–±—Ä–æ–±–∫–∏ user_step... ---
    # ... (–∑–∞–ª–∏—à–∞—î—à —Å–≤–æ—ó –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–∞–ª—ñ) ...



    # --- –ó–ú–Ü–ù–ê –¶–Ü–ù–ò –í –ü–†–ê–ô–°–Ü ---
    if user_step == 'update_price' and update.effective_user.id in ADMIN_IDS:
        service_id = context.user_data.get('edit_price_id')
        try:
            new_price = int(text.strip())
            conn = sqlite3.connect('appointments.db')
            c = conn.cursor()
            c.execute("UPDATE price_list SET price=? WHERE id=?", (new_price, service_id))
            conn.commit()
            c.execute("SELECT name FROM price_list WHERE id=?", (service_id,))
            name = c.fetchone()[0]
            conn.close()

            # ‚¨ÖÔ∏è –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø–æ—Å–ª—É–≥", callback_data="edit_price")]
            ]
            await update.message.reply_text(
                f"‚úÖ –¶—ñ–Ω—É –¥–ª—è *{name}* –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ *{new_price} –≥—Ä–Ω*!",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

        except Exception as e:
            await update.message.reply_text("‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞. –í–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª—É —Å—É–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 350)")
        context.user_data['step'] = None
        context.user_data['edit_price_id'] = None
        return

    # --- –î–æ–¥–∞–≤–∞–Ω–Ω—è/—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —á–∞—Å—É –¥–ª—è –¥–Ω—è (–∞–¥–º—ñ–Ω) ---
    if user_step == 'edit_times' and update.effective_user.id in ADMIN_IDS:
        day = context.user_data.get('edit_day')  # –º–æ–∂–µ –±—É—Ç–∏ —è–∫ "31.05", —Ç–∞–∫ —ñ "31.05.2024"
        new_times = text.strip()

        # –Ø–∫—â–æ –¥–∞—Ç–∞ –∫–æ—Ä–æ—Ç–∫–∞ ‚Äî –¥–æ–¥–∞—î–º–æ —Ä—ñ–∫
        if day and len(day) == 5:
            try:
                parsed = datetime.strptime(day, "%d.%m").replace(year=datetime.now().year)
                day = parsed.strftime("%d.%m.%Y")
            except ValueError:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –û—á—ñ–∫—É—î—Ç—å—Å—è '–¥–¥.–º–º' –∞–±–æ '–¥–¥.–º–º.—Ä—Ä—Ä—Ä'.")
                return

        # –ë–µ–∑–ø–µ—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
        try:
            datetime.strptime(day, "%d.%m.%Y")
        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è –î–∞—Ç–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ '–¥–¥.–º–º.—Ä—Ä—Ä—Ä'.")
            return

        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT id FROM schedule WHERE date = ?", (day,))
        exists = c.fetchone()
        if exists:
            c.execute("UPDATE schedule SET times=? WHERE date=?", (new_times, day))
        else:
            c.execute("INSERT INTO schedule (date, times) VALUES (?, ?)", (day, new_times))
        conn.commit()
        conn.close()

        # –î–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è ‚Äî –∫–æ—Ä–æ—Ç–∫–∞ –¥–∞—Ç–∞:
        day_short = datetime.strptime(day, "%d.%m.%Y").strftime("%d.%m")
        await update.message.reply_text(f"‚úÖ –î–ª—è –¥–Ω—è {day_short} –æ–Ω–æ–≤–ª–µ–Ω–æ –≥–æ–¥–∏–Ω–∏: {new_times}")
        context.user_data['step'] = None
        context.user_data['edit_day'] = None
        return

    # --- –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –ü–Ü–ë —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–∞–ø–∏—Å—É ---
    if user_step == 'get_fullinfo':
        print("==> [get_fullinfo] –í—Ö—ñ–¥")
        print("==> [get_fullinfo] text:", text)

        procedure = context.user_data.get('procedure')
        date = context.user_data.get('date')
        time = context.user_data.get('time')
        user_id = update.effective_user.id

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: –º—ñ–Ω—ñ–º—É–º —Ç—Ä–∏ —á–∞—Å—Ç–∏–Ω–∏ ‚Äî —ñ–º'—è, –ø—Ä—ñ–∑–≤–∏—â–µ, —Ç–µ–ª–µ—Ñ–æ–Ω
        parts = text.strip().split()
        if len(parts) < 3:
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å —è–∫ —É –ø—Ä–∏–∫–ª–∞–¥—ñ: *–û–ª—å–≥–∞ –ß–∞—Ä—ñ–≤–Ω–∞ +380680566881*",
                                            parse_mode="Markdown")
            return

        phone = parts[-1]
        name = " ".join(parts[:-1])

        import re
        if not re.match(r'^\+380\d{9}$', phone):
            await update.message.reply_text("‚ö†Ô∏è –¢–µ–ª–µ—Ñ–æ–Ω –º–∞—î –±—É—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX", parse_mode="Markdown")
            return

        if len(name.split()) < 2:
            await update.message.reply_text("‚ö†Ô∏è –í–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —ñ *—ñ–º'—è*, —ñ *–ø—Ä—ñ–∑–≤–∏—â–µ*!", parse_mode="Markdown")
            return

        try:
            conn = sqlite3.connect('appointments.db')
            c = conn.cursor()
            # –®—É–∫–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
            c.execute("SELECT id FROM clients WHERE phone = ?", (phone,))
            result = c.fetchone()

            if result:
                client_id = result[0]
            else:
                now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                c.execute(
                    "INSERT INTO clients (name, phone, user_id, note, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?)",
                    (name, phone, user_id, "", now, now))
                client_id = c.lastrowid

            # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ (–∑–∞–≤–∂–¥–∏ ‚Äî —ñ —è–∫—â–æ –Ω–æ–≤–∏–π, —ñ —è–∫—â–æ —ñ—Å–Ω—É—î)
            c.execute(
                "INSERT INTO bookings (user_id, client_id, procedure, date, time, status, note) VALUES (?, ?, ?, ?, ?, ?, ?)",
                (user_id, client_id, procedure, date, time, "–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", ""))
            booking_id = c.lastrowid
            conn.commit()
            conn.close()

            # --- –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ---
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{booking_id}"),
                 InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data=f"cancel_{booking_id}")]
            ]
            await update.message.reply_text(
                f"üéâ –¢–∏ –∑–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞ *{procedure}* {date} –æ {time}! –Ø –≤–∂–µ —á–µ–∫–∞—é –∑—É—Å—Ç—Ä—ñ—á—ñ –∑ —Ç–æ–±–æ—é, —Ç–∏ –Ω–∞–¥–∏—Ö–∞—î—à! üíñ\n\n"
                "–Ø–∫—â–æ —Ö–æ—á–µ—à ‚Äî –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏ —á–∏ –≤—ñ–¥–º—ñ–Ω—ñ –∑–∞–ø–∏—Å, –∞–±–æ –∑–∞–ø–∏—à–∏—Å—è —â–µ —Ä–∞–∑ üëë",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

        except Exception as e:
            print("‚ùå [SQL ERROR]:", e)
            await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞–ø–∏—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return

        # --- –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É ---
        try:
            msg = (
                f"üì• –ù–æ–≤–∏–π –∑–∞–ø–∏—Å:\n"
                f"–ü–Ü–ë/–¢–µ–ª–µ—Ñ–æ–Ω: {name} / {phone}\n"
                f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {procedure}\n"
                f"–î–∞—Ç–∞: {date} –æ {time}"
            )
            if isinstance(ADMIN_IDS, list):
                for admin_id in ADMIN_IDS:
                    await context.bot.send_message(chat_id=admin_id, text=msg)
            else:
                await context.bot.send_message(chat_id=ADMIN_IDS, text=msg)
        except Exception as e:
            print("‚ùå [ADMIN MSG ERROR]:", e)

        context.user_data.clear()
        return


# --- –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ---
async def send_reminder(user_id, procedure, date, time, mode="day"):
    from telegram import Bot
    bot = Bot(token=TOKEN)
    try:
        date_short = datetime.strptime(date, "%d.%m.%Y").strftime("%d.%m")
        if mode == "day":
            text = (
                f"‚è∞ –ö—Ä–∞—Å–∏–≤–∞, –Ω–∞–≥–∞–¥—É—é: –≤–∂–µ –∑–∞–≤—Ç—Ä–∞ —Ç–≤—ñ–π –± º—é—Ç—ñ-–∑–∞–ø–∏—Å –Ω–∞ {procedure} {date_short} –æ {time}! "
                "–Ø —á–µ–∫–∞—é —Ç–µ–±–µ –∑ –≥–∞—Ä–Ω–∏–º –Ω–∞—Å—Ç—Ä–æ—î–º —ñ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è–º ‚ú® –î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ, —Å–æ–Ω–µ—á–∫–æ! üíû"
            )
        elif mode == "2h":
            text = (
                f"üí¨ –¢–≤—ñ–π –± º—é—Ç—ñ-—á–∞—Å –≤–∂–µ –∑–æ–≤—Å—ñ–º —Å–∫–æ—Ä–æ ‚Äî —á–µ—Ä–µ–∑ 2 –≥–æ–¥–∏–Ω–∫–∏! {procedure} {date_short} –æ {time} üå∑ "
                "–Ø –≤–∂–µ –≥–æ—Ç—É—é –Ω–∞–π–∫—Ä–∞—â—ñ —Ñ–∞—Ä–±–∏, –ø–µ–Ω–∑–ª—ñ —Ç–∞ –≥–∞—Ä—è—á–∏–π —á–∞–π! –î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ, –∑—ñ—Ä–æ–Ω—å–∫–æ! üëë"
            )
        else:
            text = f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞–ø–∏—Å: {procedure} {date_short} –æ {time}."
        await bot.send_message(
            chat_id=user_id,
            text=text
        )
    except Exception as e:
        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {e}")

async def admin_stats_handler(update, context):
    keyboard = [
        [
            InlineKeyboardButton("–ó–∞ —Å—å–æ–≥–æ–¥–Ω—ñ", callback_data="stats_today"),
            InlineKeyboardButton("–ó–∞ —Ç–∏–∂–¥–µ–Ω—å", callback_data="stats_week"),
            InlineKeyboardButton("–ó–∞ –º—ñ—Å—è—Ü—å", callback_data="stats_month"),
        ],
        [InlineKeyboardButton("–ó–∞ –ø–µ—Ä—ñ–æ–¥", callback_data="stats_by_period")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_service")],
    ]
    await update.callback_query.edit_message_text(
        "üìä –Ø–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫–∞–∑–∞—Ç–∏?", reply_markup=InlineKeyboardMarkup(keyboard)
    )
async def show_stats_for_period(update, context, period):
    import sqlite3
    from datetime import datetime, timedelta

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥–∞—Ç–∏
    today = datetime.now().date()
    if period == 'today':
        date_list = [today.strftime("%d.%m.%Y")]
        label = "—Å—å–æ–≥–æ–¥–Ω—ñ"
    elif period == 'week':
        date_list = [(today - timedelta(days=i)).strftime("%d.%m.%Y") for i in range(7)]
        label = "–∑–∞ —Ç–∏–∂–¥–µ–Ω—å"
    elif period == 'month':
        date_list = [(today - timedelta(days=i)).strftime("%d.%m.%Y") for i in range(30)]
        label = "–∑–∞ –º—ñ—Å—è—Ü—å"
    else:
        await update.callback_query.edit_message_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–µ—Ä—ñ–æ–¥.")
        return

    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤
    c.execute(
        f"SELECT COUNT(*) FROM bookings WHERE date IN ({','.join(['?']*len(date_list))}) AND status != '–í—ñ–¥–º—ñ–Ω–µ–Ω–æ'",
        date_list
    )
    total_bookings = c.fetchone()[0] or 0

    # –î–æ—Ö—ñ–¥
    c.execute(
        f"""SELECT COALESCE(SUM(price_list.price),0) FROM bookings 
            LEFT JOIN price_list ON bookings.procedure = price_list.name
            WHERE bookings.date IN ({','.join(['?']*len(date_list))}) AND bookings.status != '–í—ñ–¥–º—ñ–Ω–µ–Ω–æ'""",
        date_list
    )
    income = c.fetchone()[0] or 0
    conn.close()

    text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {label}:\n\n"
        f"‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤: *{total_bookings}*\n"
        f"‚Ä¢ –î–æ—Ö—ñ–¥: *{income} –≥—Ä–Ω*"
    )

    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_stats")]
    ]
    await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")


import calendar

async def show_stats_for_custom_period(update, context, date_start, date_end):
    try:
        start = datetime.strptime(date_start, "%d.%m.%Y")
        end = datetime.strptime(date_end, "%d.%m.%Y")
    except Exception:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (–¥–¥.–º–º.—Ä—Ä—Ä—Ä).")
        context.user_data['step'] = 'stats_period_start'
        return

    # –ü–æ–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫ –¥–∞—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ "%d.%m.%Y"
    all_dates = [(start + timedelta(days=i)).strftime("%d.%m.%Y") for i in range((end - start).days + 1)]

    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    # –î–æ—Ö—ñ–¥
    c.execute(
        f"SELECT COALESCE(SUM(price_list.price),0) FROM bookings "
        f"LEFT JOIN price_list ON bookings.procedure = price_list.name "
        f"WHERE date IN ({','.join(['?']*len(all_dates))}) AND status='–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ'",
        all_dates
    )
    income = c.fetchone()[0] or 0

    # –í–∏—Ç—Ä–∞—Ç–∏
    c.execute(
        f"SELECT COALESCE(SUM(amount),0) FROM expenses "
        f"WHERE date IN ({','.join(['?']*len(all_dates))})",
        all_dates
    )
    expenses = c.fetchone()[0] or 0

    profit = income - expenses
    conn.close()

    keyboard = [
        [InlineKeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ –ø–µ—Ä—ñ–æ–¥", callback_data="stats_by_period")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="admin_stats")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ê–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å", callback_data="admin_service")],
    ]
    text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä—ñ–æ–¥:\n"
        f"–ó: {date_start}   –ü–æ: {date_end}\n\n"
        f"–î–æ—Ö—ñ–¥: {income} –≥—Ä–Ω\n"
        f"–í–∏—Ç—Ä–∞—Ç–∏: {expenses} –≥—Ä–Ω\n"
        f"–ß–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: {profit} –≥—Ä–Ω"
    )
    if hasattr(update, "callback_query") and update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return


# --- –í—Å—ñ —Ç–≤–æ—ó async def ... ---

async def set_day_off(update: Update, context: ContextTypes.DEFAULT_TYPE, date):
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO deleted_days (date) VALUES (?)", (date,))
    conn.commit()
    conn.close()
    await update.callback_query.edit_message_text(
        "–°—å–æ–≥–æ–¥–Ω—ñ –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î üí§.",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_schedule")]]
        )
    )

def main():
    init_db()
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    # --- –•–µ–Ω–¥–ª–µ—Ä–∏ –∫–∞—Ä—Ç–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞ ---
    app.add_handler(CallbackQueryHandler(show_client_card, pattern=r'^client_\d+$'))
    app.add_handler(CallbackQueryHandler(add_condition_start, pattern=r'^addcond_\d+$'))
    app.add_handler(CallbackQueryHandler(list_conditions_handler, pattern=r'^listcond_\d+$'))
    app.add_handler(CallbackQueryHandler(edit_note_start, pattern=r'^editnote_\d+$'))

    # --- –•–µ–Ω–¥–ª–µ—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —É–º–æ–≤ ---
    app.add_handler(CallbackQueryHandler(delete_condition, pattern=r'^delcond_\d+$'))
    app.add_handler(CallbackQueryHandler(confirm_delete, pattern='^confirm_delete$'))
    app.add_handler(CallbackQueryHandler(cancel_delete, pattern='^cancel_delete$'))

    # --- ConversationHandler –¥–ª—è —É–º–æ–≤ —Ç–∞ –Ω–æ—Ç–∞—Ç–æ–∫ ---
    app.add_handler(ConversationHandler(
        entry_points=[
            CallbackQueryHandler(add_condition_start, pattern=r'^addcond_\d+$'),
            CallbackQueryHandler(edit_condition_start, pattern=r'^editcond_\d+$'),
            CallbackQueryHandler(edit_note_start, pattern=r'^editnote_\d+$')
        ],
        states={
            ADDING_CONDITION: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_condition)],
            EDITING_CONDITION: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_edited_condition)],
            EDITING_NOTE: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_edited_note)]
        },
        fallbacks=[],
        per_message=False
    ))

    # --- –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä (–∑–∞–≤–∂–¥–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–º!) ---
    app.add_handler(CallbackQueryHandler(button_handler))

    app.run_polling()


if __name__ == "__main__":
    main()


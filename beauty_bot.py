from dotenv import load_dotenv
import os

load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMIN_ID = int(os.environ["ADMIN_ID"])

import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes,
    MessageHandler, filters
)
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, timedelta

# –Ø–∫—â–æ –Ω–µ –º–∞—î—à google_sheets.py ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–∫–æ–º–µ–Ω—Ç—É–π —Ü–µ–π —Ä—è–¥–æ–∫
try:
    from google_sheets import add_to_google_sheet
except ImportError:
    def add_to_google_sheet(*args, **kwargs):
        pass

INSTAGRAM_LINK = "https://www.instagram.com/safroniuk_brows_lashes?utm_source=ig_web_button_share_sheet&igsh=ZDNlZDc0MzIxNw=="
MASTER_PHONE = "+380976853623"
MASTER_GEO = "–≤—É–ª. –ö–∏—ó–≤—Å—å–∫–∞ 41, –ú–æ–≥–∏–ª—ñ–≤-–ü–æ–¥—ñ–ª—å—Å—å–∫–∏–π, 24000, –£–∫—Ä–∞—ó–Ω–∞"
MASTER_GEO_LINK = "https://maps.app.goo.gl/NpF45zLtbQU5o8sM7"

scheduler = BackgroundScheduler()

def init_db():
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS bookings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            phone TEXT,
            procedure TEXT,
            date TEXT,
            time TEXT,
            user_id INTEGER,
            status TEXT DEFAULT '–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è'
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS schedule (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT,
            times TEXT
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS deleted_days (
            date TEXT PRIMARY KEY
        )
    """)
    conn.commit()
    conn.close()

# --- –°–¢–ê–†–¢/–ú–ï–ù–Æ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    keyboard = [
        [InlineKeyboardButton("üëë –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É", callback_data='book')],
        [InlineKeyboardButton("üìã –ú–æ—ó –∑–∞–ø–∏—Å–∏", callback_data='check_booking')],
        [InlineKeyboardButton("üì∏ Instagram", url=INSTAGRAM_LINK)],
        [InlineKeyboardButton("üìç –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è", url=MASTER_GEO_LINK)],
        [InlineKeyboardButton("‚òéÔ∏è –ú–∞–π—Å—Ç–µ—Ä", callback_data='master_phone')]
    ]
    if user_id == ADMIN_ID:
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º—ñ–Ω —Å–µ—Ä–≤—ñ—Å", callback_data='admin_service')])
    # –Ø–∫—â–æ —Ü–µ /start —á–µ—Ä–µ–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    if hasattr(update, "message") and update.message:
        await update.message.reply_text(
            "‚ú® –í—ñ—Ç–∞—é –≤ beauty-–±–æ—Ç—ñ! –¢—É—Ç –∫–æ–∂–Ω–∞ –¥—ñ–≤—á–∏–Ω–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —á–∞—Å –¥–ª—è —Å–µ–±–µ —Ç–∞ —Å–≤–æ–≥–æ –æ–±—Ä–∞–∑—É üíñ\n\n"
            "–û–±–∏—Ä–∞–π –¥—ñ—é –Ω–∏–∂—á–µ ‚Äî —ñ –≥–∞–π–¥–∞ –¥–æ –∫—Ä–∞—Å–∏! üå∏",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.callback_query.edit_message_text(
            "‚ú® –í—ñ—Ç–∞—é –≤ beauty-–±–æ—Ç—ñ! –¢—É—Ç –∫–æ–∂–Ω–∞ –¥—ñ–≤—á–∏–Ω–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —á–∞—Å –¥–ª—è —Å–µ–±–µ —Ç–∞ —Å–≤–æ–≥–æ –æ–±—Ä–∞–∑—É üíñ\n\n"
            "–û–±–∏—Ä–∞–π –¥—ñ—é –Ω–∏–∂—á–µ ‚Äî —ñ –≥–∞–π–¥–∞ –¥–æ –∫—Ä–∞—Å–∏! üå∏",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

# --- –ê–î–ú–Ü–ù –°–ï–†–í–Ü–° ---
async def admin_service_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.callback_query
    if user_id != ADMIN_ID:
        await query.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É", show_alert=True)
        return
    keyboard = [
        [InlineKeyboardButton("üóìÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫", callback_data='set_schedule')],
        [InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –¥–µ–Ω—å –∑ –≥—Ä–∞—Ñ—ñ–∫–∞", callback_data='delete_day')],
        [InlineKeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ", callback_data='calendar')],
        [InlineKeyboardButton("üìÜ –ö–∞–ª–µ–Ω–¥–∞—Ä –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å", callback_data='weekcalendar')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data='back_to_menu')]
    ]
    await query.edit_message_text(
        "‚öôÔ∏è *–ê–¥–º—ñ–Ω —Å–µ—Ä–≤—ñ—Å:*\n\n"
        "–¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –∫–µ—Ä—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫–æ–º —Ç–∞ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –∑–∞–ø–∏—Å–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤.",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# --- INSTAGRAM/–ì–ï–û/–¢–ï–õ–ï–§–û–ù ---
async def master_phone_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        f"‚òéÔ∏è *–¢–µ–ª–µ—Ñ–æ–Ω –º–∞–π—Å—Ç—Ä–∞:*\n"
        f"`{MASTER_PHONE}`\n"
        "–ú–æ–∂–Ω–∞ –¥–∑–≤–æ–Ω–∏—Ç–∏ —á–∏ –ø–∏—Å–∞—Ç–∏ —É Viber/Telegram! üí¨"
    )
    if hasattr(update, "message") and update.message:
        await update.message.reply_text(text, parse_mode="Markdown")
    else:
        await update.callback_query.edit_message_text(text, parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]]
            )
        )

# --- –ó–ú–Ü–ù–ê –ì–†–ê–§–Ü–ö–£ (–∞–¥–º—ñ–Ω) ---
async def schedule_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id if hasattr(update, "effective_user") else update.callback_query.from_user.id
    if user_id != ADMIN_ID:
        if hasattr(update, "message") and update.message:
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        else:
            await update.callback_query.answer("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.", show_alert=True)
        return
    await update.callback_query.edit_message_text(
        "üóìÔ∏è –í–≤–µ–¥—ñ—Ç—å –≥—Ä–∞—Ñ—ñ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n\n28.05: 14:00,15:00,16:00\n29.05: 15:00,16:00",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω —Å–µ—Ä–≤—ñ—Å—É", callback_data="admin_service")]]
        )
    )
    context.user_data['step'] = 'set_schedule'

async def delete_day_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id if hasattr(update, "effective_user") else update.callback_query.from_user.id
    if user_id != ADMIN_ID:
        if hasattr(update, "message") and update.message:
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        else:
            await update.callback_query.answer("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.", show_alert=True)
        return
    today = datetime.now().date()
    dates = set()
    for i in range(7):
        d = today + timedelta(days=i)
        dates.add(d.strftime("%d.%m"))
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT DISTINCT date FROM schedule")
    for row in c.fetchall():
        dates.add(row[0])
    conn.close()
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT date FROM deleted_days")
    deleted = {row[0] for row in c.fetchall()}
    conn.close()
    dates = [d for d in dates if d not in deleted]
    dates = sorted(list(dates), key=lambda x: datetime.strptime(x + f".{datetime.now().year}", "%d.%m.%Y"))
    if not dates:
        await update.callback_query.edit_message_text("–ù–µ–º–∞—î –¥–Ω—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω —Å–µ—Ä–≤—ñ—Å—É", callback_data="admin_service")]]
            )
        )
        return
    keyboard = [
        [InlineKeyboardButton(f"‚ùå {date}", callback_data=f"delday_{date}")] for date in dates
    ]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω —Å–µ—Ä–≤—ñ—Å—É", callback_data="admin_service")])
    await update.callback_query.edit_message_text(
        "üóëÔ∏è –û–±–µ—Ä–∏ –¥–µ–Ω—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è (–≤—ñ–Ω –∑–Ω–∏–∫–Ω–µ –¥–ª—è –∑–∞–ø–∏—Å—É):",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    context.user_data['step'] = None

async def calendar_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return
    today = datetime.now().date()
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute(
        "SELECT date, time, procedure, name, phone, status FROM bookings "
        "WHERE date=? ORDER BY date, time", (today.strftime("%d.%m"),)
    )
    rows = c.fetchall()
    conn.close()
    if not rows:
        await update.callback_query.edit_message_text("–°—å–æ–≥–æ–¥–Ω—ñ –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω —Å–µ—Ä–≤—ñ—Å—É", callback_data="admin_service")]]
            )
        )
        return
    text = f"üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ {today.strftime('%d.%m.%Y')}:\n\n"
    for rec in rows:
        date, time, procedure, name, phone, status = rec
        text += (
            f"üïí {time} ‚Äî {procedure}\n"
            f"üë§ {name}, üì± {phone}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
        )
    await update.callback_query.edit_message_text(text,
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω —Å–µ—Ä–≤—ñ—Å—É", callback_data="admin_service")]]
        )
    )

async def week_calendar_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return
    today = datetime.now().date()
    week_dates = [(today + timedelta(days=i)).strftime("%d.%m") for i in range(7)]
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute(
        f"SELECT date, time, procedure, name, phone, status FROM bookings "
        f"WHERE date IN ({','.join(['?']*len(week_dates))}) ORDER BY date, time", week_dates
    )
    rows = c.fetchall()
    conn.close()
    if not rows:
        await update.callback_query.edit_message_text("–ù–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω —Å–µ—Ä–≤—ñ—Å—É", callback_data="admin_service")]]
            )
        )
        return
    text = "üìÜ –ó–∞–ø–∏—Å–∏ –Ω–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å:\n\n"
    for rec in rows:
        date, time, procedure, name, phone, status = rec
        text += (
            f"üìÖ {date} üïí {time} ‚Äî {procedure}\n"
            f"üë§ {name}, üì± {phone}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
        )
    await update.callback_query.edit_message_text(text,
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω —Å–µ—Ä–≤—ñ—Å—É", callback_data="admin_service")]]
        )
    )

# --- CALLBACK HANDLER ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    # --- –ê–¥–º—ñ–Ω —Å–µ—Ä–≤—ñ—Å ---
    if query.data == 'admin_service':
        await admin_service_handler(update, context)
        return

    # --- –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é (–Ω–∞–∑–∞–¥) ---
    if query.data == 'back_to_menu':
        await start(update, context)
        return

    # --- –¢–µ–ª–µ—Ñ–æ–Ω –º–∞–π—Å—Ç—Ä–∞ (–Ω–∞–∑–∞–¥) ---
    if query.data == 'master_phone':
        await master_phone_handler(update, context)
        return

    # --- –ó–º—ñ–Ω–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ (–∞–¥–º—ñ–Ω) ---
    if query.data == 'set_schedule':
        await schedule_handler(update, context)
        return

    if query.data == 'delete_day':
        await delete_day_handler(update, context)
        return

    if query.data == 'calendar':
        await calendar_handler(update, context)
        return

    if query.data == 'weekcalendar':
        await week_calendar_handler(update, context)
        return

    # --- –í–∏–¥–∞–ª–∏—Ç–∏ –¥–µ–Ω—å (–∞–¥–º—ñ–Ω) ---
    if query.data.startswith('delday_') and user_id == ADMIN_ID:
        date = query.data.replace('delday_', '')
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("INSERT OR IGNORE INTO deleted_days (date) VALUES (?)", (date,))
        conn.commit()
        conn.close()
        await query.edit_message_text(f"‚úÖ –î–µ–Ω—å {date} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –≥—Ä–∞—Ñ—ñ–∫–∞. –ö–ª—ñ—î–Ω—Ç–∏ –±—ñ–ª—å—à–µ –Ω–µ –ø–æ–±–∞—á–∞—Ç—å —Ü–µ–π –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å—É.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω —Å–µ—Ä–≤—ñ—Å—É", callback_data="admin_service")]]
            )
        )
        return

    # --- –ó–∞–ø–∏—Å –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É ---
    if query.data == 'book' or query.data == 'back_to_procedure':
        keyboard = [
            [InlineKeyboardButton("‚ú® –ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤ (—ñ–¥–µ–∞–ª—å–Ω–∞ —Ñ–æ—Ä–º–∞)", callback_data='proc_brows')],
            [InlineKeyboardButton("üé® –§–∞—Ä–±—É–≤–∞–Ω–Ω—è + –∫–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤", callback_data='proc_tint_brows')],
            [InlineKeyboardButton("üåü –õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤ (WOW-–µ—Ñ–µ–∫—Ç)", callback_data='proc_lam_brows')],
            [InlineKeyboardButton("üëÅÔ∏è –õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π (–≤–∏—Ä–∞–∑–Ω–∏–π –ø–æ–≥–ª—è–¥)", callback_data='proc_lam_lashes')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data='back_to_menu')]
        ]
        await query.edit_message_text(
            "‚ú® –û–±–µ—Ä–∏ —Å–≤–æ—é –± º—é—Ç—ñ-–ø—Ä–æ—Ü–µ–¥—É—Ä—É, –∫—Ä–∞—Å—É–Ω–µ! –°–µ—Ä–¥–µ–Ω—å–∫–æ–º –ø–æ–∑–Ω–∞—á —Ç—É, —è–∫–∞ –Ω–∞–¥–∏—Ö–∞—î –Ω–∞–π–±—ñ–ª—å—à–µ ‚Äî –∞–±–æ –Ω–∞—Ç–∏—Å–∫–∞–π ‚¨ÖÔ∏è —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º—Ä—ñ–π üåàüíñ\n\n–û–±—ñ—Ü—è—é, —Ç–≤–æ—è –∫—Ä–∞—Å–∞ –∑–∞—Å—è—î —â–µ —è—Å–∫—Ä–∞–≤—ñ—à–µ! ü´∂",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data.clear()
        return

    if query.data.startswith('proc_'):
        proc_map = {
            'proc_brows': '–ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤ (—ñ–¥–µ–∞–ª—å–Ω–∞ —Ñ–æ—Ä–º–∞)',
            'proc_tint_brows': '–§–∞—Ä–±—É–≤–∞–Ω–Ω—è + –∫–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤',
            'proc_lam_brows': '–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤ (WOW-–µ—Ñ–µ–∫—Ç)',
            'proc_lam_lashes': '–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π (–≤–∏—Ä–∞–∑–Ω–∏–π –ø–æ–≥–ª—è–¥)'
        }
        context.user_data['procedure'] = proc_map[query.data]
        today = datetime.now().date()
        dates = []
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT date FROM deleted_days")
        deleted = {row[0] for row in c.fetchall()}
        conn.close()
        for i in range(7):
            d = today + timedelta(days=i)
            date_str = d.strftime("%d.%m")
            if date_str not in deleted:
                dates.append(date_str)
        if not dates:
            await query.edit_message_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–Ω—ñ–≤ –¥–ª—è –∑–∞–ø–∏—Å—É. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –º–∞–π—Å—Ç—Ä–∞!")
            return
        keyboard = [
            [InlineKeyboardButton(f"üìÖ –û–±–∏—Ä–∞—é {date} üíã", callback_data=f'date_{date}')] for date in dates
        ]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø—Ä–æ—Ü–µ–¥—É—Ä", callback_data='back_to_procedure')])
        await query.edit_message_text(
            "üå∏ –Ø–∫–∏–π –¥–µ–Ω—å –∑—Ä–æ–±–∏—Ç—å —Ç–µ–±–µ —â–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ñ—à–æ—é? –û–±–∏—Ä–∞–π —Å–µ—Ä–¥–µ—á–∫–æ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—ñ –π –ª–æ–≤–∏ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è! –Ø–∫—â–æ —Ä–∞–ø—Ç–æ–º –∑–∞—Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–∏—Å–Ω–∏ ‚¨ÖÔ∏è —ñ –ø–æ–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ –≤–∏–±–æ—Ä—É, –±–æ —Ç–≤–æ—è –∫—Ä–∞—Å–∞ –≤–∞–∂–ª–∏–≤–∞! ‚ú®üíê",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data['step'] = None
        return

    if query.data.startswith('date_'):
        date = query.data.replace('date_', '')
        context.user_data['date'] = date
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT times FROM schedule WHERE date = ?", (date,))
        row = c.fetchone()
        conn.close()
        if row:
            times = [t.strip() for t in row[0].split(',')]
        else:
            day = datetime.strptime(date + f".{datetime.now().year}", "%d.%m.%Y").weekday()
            if day < 5:
                times = [f"{h:02d}:00" for h in range(14, 19)]
            else:
                times = [f"{h:02d}:00" for h in range(11, 19)]
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT time FROM bookings WHERE date = ?", (date,))
        booked_times = [row[0] for row in c.fetchall()]
        conn.close()
        free_times = [t for t in times if t not in booked_times]
        if not free_times:
            await query.edit_message_text("üòî –í—Å—ñ –≥–æ–¥–∏–Ω–∏ –Ω–∞ —Ü–µ–π –¥–µ–Ω—å –≤–∂–µ –∑–∞–π–Ω—è—Ç—ñ. –°–ø—Ä–æ–±—É–π –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –¥–µ–Ω—å!")
            return
        keyboard = [
            [InlineKeyboardButton(f"üïí {time} | –ú–æ—î —ñ–¥–µ–∞–ª—å–Ω–µ –≤—ñ–∫–æ–Ω—Ü–µ üíñ", callback_data=f'time_{time}')]
            for time in free_times
        ]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è", callback_data='back_to_date')])
        await query.edit_message_text(
            "üëë –ß–∞—Å –±—É—Ç–∏ –∑—ñ—Ä–∫–æ—é! –í—Å—ñ —ñ–¥–µ–∞–ª—å–Ω—ñ –≥–æ–¥–∏–Ω–∫–∏ —á–µ–∫–∞—é—Ç—å —Å–∞–º–µ —Ç–µ–±–µ, –æ–±–∏—Ä–∞–π –Ω–∞–π–∑—Ä—É—á–Ω—ñ—à–µ ‚ù§Ô∏è\n\n–Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞–ª–∞ ‚Äî –Ω–∞—Ç–∏—Å–∫–∞–π ‚¨ÖÔ∏è —Ç–∞ –∑–º—ñ–Ω—é–π –¥–∞—Ç—É. –ú–∏ –∑—Ä–æ–±–∏–º–æ —Ç–≤—ñ–π –¥–µ–Ω—å –æ—Å–æ–±–ª–∏–≤–∏–º! üí´",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data['step'] = None
        return

    if query.data.startswith("time_"):
        time = query.data.replace("time_", "")
        context.user_data['time'] = time
        await query.edit_message_text(
            "üíï –¢–≤–æ—è –∫—Ä–∞—Å–∞ –≤–∂–µ –º–∞–π–∂–µ —É –º–µ–Ω–µ –≤ —Ä—É–∫–∞—Ö! –ó–∞–ª–∏—à, –±—É–¥—å –ª–∞—Å–∫–∞, –Ü–º'—è, –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, —â–æ–± —è –º–æ–≥–ª–∞ —Ç–æ–±—ñ –Ω–∞–ø–∏—Å–∞—Ç–∏ –∞–±–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏ ‚ú®\n\n*–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ú–∞—Ä—ñ—è –°–∞—Ñ—Ä–æ–Ω—é–∫, +380976853623*",
            parse_mode='Markdown'
        )
        context.user_data['step'] = 'get_fullinfo'
        return

    # --- –ú–æ—ó –∑–∞–ø–∏—Å–∏ ---
    if query.data == 'check_booking':
        user_id = query.from_user.id
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT id, procedure, date, time, status FROM bookings WHERE user_id=?", (user_id,))
        rows = c.fetchall()
        conn.close()
        if rows:
            for rec in rows:
                booking_id, procedure, date, time, status = rec
                msg = f"‚ú® {procedure}\nüóìÔ∏è {date} –æ {time}\n–°—Ç–∞—Ç—É—Å: *{status}*"
                buttons = []
                if status == "–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è":
                    buttons.append(InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{booking_id}"))
                    buttons.append(InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data=f"cancel_{booking_id}"))
                reply_markup = InlineKeyboardMarkup([buttons]) if buttons else None
                await query.message.reply_text(msg, reply_markup=reply_markup, parse_mode="Markdown")
        else:
            await query.message.reply_text("–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ß–∞—Å –æ–Ω–æ–≤–∏—Ç–∏ —Å–≤—ñ–π –æ–±—Ä–∞–∑! üíÑ")
        return

    if query.data == 'back_to_date':
        procedure = context.user_data.get('procedure')
        today = datetime.now().date()
        dates = []
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT date FROM deleted_days")
        deleted = {row[0] for row in c.fetchall()}
        conn.close()
        for i in range(7):
            d = today + timedelta(days=i)
            date_str = d.strftime("%d.%m")
            if date_str not in deleted:
                dates.append(date_str)
        keyboard = [
            [InlineKeyboardButton(f"üìÖ –û–±–∏—Ä–∞—é {date} üíã", callback_data=f'date_{date}')] for date in dates
        ]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø—Ä–æ—Ü–µ–¥—É—Ä", callback_data='back_to_procedure')])
        await query.edit_message_text(
            "üå∏ –Ø–∫–∏–π –¥–µ–Ω—å –∑—Ä–æ–±–∏—Ç—å —Ç–µ–±–µ —â–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ñ—à–æ—é? –û–±–∏—Ä–∞–π —Å–µ—Ä–¥–µ—á–∫–æ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—ñ –π –ª–æ–≤–∏ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è! –Ø–∫—â–æ —Ä–∞–ø—Ç–æ–º –∑–∞—Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–∏—Å–Ω–∏ ‚¨ÖÔ∏è —ñ –ø–æ–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ –≤–∏–±–æ—Ä—É, –±–æ —Ç–≤–æ—è –∫—Ä–∞—Å–∞ –≤–∞–∂–ª–∏–≤–∞! ‚ú®üíê",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    if query.data.startswith('confirm_'):
        booking_id = int(query.data.replace('confirm_', ''))
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("UPDATE bookings SET status=? WHERE id=?", ("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ", booking_id))
        conn.commit()
        c.execute("SELECT procedure, date, time FROM bookings WHERE id=?", (booking_id,))
        row = c.fetchone()
        conn.close()
        if row:
            procedure, date, time = row
            await query.message.reply_text(
                f"‚úÖ –í–∞—à –∑–∞–ø–∏—Å –Ω–∞ {procedure} {date} –æ {time} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –Ø –∑ –Ω–µ—Ç–µ—Ä–ø—ñ–Ω–Ω—è–º —á–µ–∫–∞—é –Ω–∞ —Ç–µ–±–µ! üíñ"
            )
        return

    if query.data.startswith('cancel_'):
        booking_id = int(query.data.replace('cancel_', ''))
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT name, procedure, date, time FROM bookings WHERE id=?", (booking_id,))
        row = c.fetchone()
        c.execute("DELETE FROM bookings WHERE id=?", (booking_id,))
        conn.commit()
        conn.close()
        if row:
            name, procedure, date, time = row
            await query.message.reply_text("‚ùå –¢–≤—ñ–π –∑–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –Ø–∫—â–æ –∑–∞—Ö–æ—á–µ—à –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è ‚Äî —è –∑–∞–≤–∂–¥–∏ —Ç—É—Ç! üíû")
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"‚ùóÔ∏è–ö–ª—ñ—î–Ω—Ç {name} —Å–∫–∞—Å—É–≤–∞–≤ –∑–∞–ø–∏—Å: {procedure} {date} –æ {time}"
            )
        return

# --- –í–í–ï–î–ï–ù–ù–Ø –¢–ï–ö–°–¢–£ ---
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_step = context.user_data.get('step')
    text = update.message.text

    if user_step == 'set_schedule' and update.effective_user.id == ADMIN_ID:
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("DELETE FROM schedule")
        for line in text.strip().split('\n'):
            if ':' in line:
                date, times = line.split(':', 1)
                c.execute("INSERT INTO schedule (date, times) VALUES (?, ?)", (date.strip(), times.strip()))
        conn.commit()
        conn.close()
        await update.message.reply_text("‚úÖ –ì—Ä–∞—Ñ—ñ–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
        context.user_data['step'] = None
        return

    if user_step == 'get_fullinfo':
        context.user_data['fullinfo'] = text
        procedure = context.user_data.get('procedure')
        date = context.user_data.get('date')
        time = context.user_data.get('time')
        fullinfo = context.user_data.get('fullinfo')
        user_id = update.effective_user.id
        try:
            name, phone = [s.strip() for s in fullinfo.split(',', 1)]
        except Exception:
            name, phone = fullinfo.strip(), "N/A"
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("INSERT INTO bookings (user_id, name, phone, procedure, date, time, status) VALUES (?, ?, ?, ?, ?, ?, ?)",
                  (user_id, name, phone, procedure, date, time, "–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"))
        booking_id = c.lastrowid
        conn.commit()
        conn.close()
        add_to_google_sheet(name, "", phone, procedure, date, time)
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{booking_id}"),
             InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data=f"cancel_{booking_id}")],
            [InlineKeyboardButton("üëë –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è —â–µ", callback_data='book')],
            [InlineKeyboardButton("üìã –ú–æ—ó –∑–∞–ø–∏—Å–∏", callback_data='check_booking')],
            [InlineKeyboardButton("üì∏ Instagram", url=INSTAGRAM_LINK)],
            [InlineKeyboardButton("üìç –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è", url=MASTER_GEO_LINK)],
            [InlineKeyboardButton("‚òéÔ∏è –ú–∞–π—Å—Ç–µ—Ä", callback_data='master_phone')],
        ]
        await update.message.reply_text(
            f"üéâ –í—ñ—Ç–∞—é, —Ç–∏ –∑–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞ {procedure} {date} –æ {time}! –Ø –≤–∂–µ —á–µ–∫–∞—é –Ω–∞ –∑—É—Å—Ç—Ä—ñ—á —ñ–∑ —Ç–∞–∫–æ—é —á—É–¥–æ–≤–æ—é –¥—ñ–≤—á–∏–Ω–æ—é, —è–∫ —Ç–∏ üíñ\n\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω –º–∞–π—Å—Ç—Ä–∞: {MASTER_PHONE}\n"
            f"–ê–¥—Ä–µ—Å–∞: {MASTER_GEO}\n\n"
            "–ù–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–æ—á–∫–∏ –Ω–∏–∂—á–µ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —á–∏ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å, –∞–±–æ –∑–∞–ø–∏—à–∏—Å—è —â–µ ‚Äî –∞–¥–∂–µ –≥–∞—Ä–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ—é –∑–∞–±–∞–≥–∞—Ç–æ –Ω–µ –±—É–≤–∞—î! üå∏‚ú®",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"""üì• –ù–æ–≤–∏–π –∑–∞–ø–∏—Å:
–ü–Ü–ë/–¢–µ–ª–µ—Ñ–æ–Ω: {name} / {phone}
–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {procedure}
–î–∞—Ç–∞: {date} –æ {time}"""
        )
        event_time = datetime.strptime(f"{date} {time}", "%d.%m %H:%M")
        remind_day = event_time - timedelta(days=1)
        remind_time = remind_day.replace(hour=10, minute=0, second=0, microsecond=0)
        remind_2h = event_time - timedelta(hours=2)
        now = datetime.now()
        if remind_time > now:
            scheduler.add_job(
                send_reminder,
                'date',
                run_date=remind_time,
                args=[user_id, procedure, date, time, "day"]
            )
        if remind_2h > now:
            scheduler.add_job(
                send_reminder,
                'date',
                run_date=remind_2h,
                args=[user_id, procedure, date, time, "2h"]
            )
        scheduler.start()
        context.user_data.clear()
        return

    else:
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ —Ç–∞ –ø–æ–¥–∞—Ä—É–π—Ç–µ —Å–æ–±—ñ –∫—Ä–∞—Å—É! üíñ")

# --- –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ---
async def send_reminder(user_id, procedure, date, time, mode="day"):
    from telegram import Bot
    bot = Bot(token=TOKEN)
    try:
        if mode == "day":
            text = f"‚è∞ –ö—Ä–∞—Å–∏–≤–∞, –Ω–∞–≥–∞–¥—É—é: –≤–∂–µ –∑–∞–≤—Ç—Ä–∞ —Ç–≤—ñ–π –± º—é—Ç—ñ-–∑–∞–ø–∏—Å –Ω–∞ {procedure} {date} –æ {time}! –Ø —á–µ–∫–∞—é —Ç–µ–±–µ –∑ –≥–∞—Ä–Ω–∏–º –Ω–∞—Å—Ç—Ä–æ—î–º —ñ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è–º ‚ú® –î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ, —Å–æ–Ω–µ—á–∫–æ! üíû"
        elif mode == "2h":
            text = f"üí¨ –¢–≤—ñ–π –± º—é—Ç—ñ-—á–∞—Å –≤–∂–µ –∑–æ–≤—Å—ñ–º —Å–∫–æ—Ä–æ ‚Äî —á–µ—Ä–µ–∑ 2 –≥–æ–¥–∏–Ω–∫–∏! {procedure} {date} –æ {time} üå∑ –Ø –≤–∂–µ –≥–æ—Ç—É—é –Ω–∞–π–∫—Ä–∞—â—ñ —Ñ–∞—Ä–±–∏, –ø–µ–Ω–∑–ª—ñ —Ç–∞ –≥–∞—Ä—è—á–∏–π —á–∞–π! –î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ, –∑—ñ—Ä–æ–Ω—å–∫–æ! üëë"
        else:
            text = f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞–ø–∏—Å: {procedure} {date} –æ {time}."
        await bot.send_message(
            chat_id=user_id,
            text=text
        )
    except Exception as e:
        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {e}")

def main():
    init_db()
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    app.run_polling()

if __name__ == "__main__":
    main()

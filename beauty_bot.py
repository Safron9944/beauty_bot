import os
from telegram import (
    Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes
)
from google_sheets import add_to_google_sheet
import re

TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = 1035792183  # ‚Üê —Ç–≤—ñ–π ID

(
    MENU, CHOOSE_PROCEDURE, INPUT_DATE, INPUT_CONTACT, CHOOSE_TIME,
    CHECK_MY_BOOKINGS
) = range(6)

PROCEDURES = [
    "–ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤",
    "–§–∞—Ä–±—É–≤–∞–Ω–Ω—è —Ç–∞ –∫–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤",
    "–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤",
    "–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π"
]

TIME_OPTIONS = ["14:00", "15:00", "16:00", "17:00"]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_keyboard = [
        ["üìã –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É"],
        ["üìÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –º—ñ–π –∑–∞–ø–∏—Å"]
    ]
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
    )
    return MENU

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üìã –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É":
        reply_keyboard = [[p] for p in PROCEDURES]
        await update.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É:",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
        )
        return CHOOSE_PROCEDURE
    elif text == "üìÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –º—ñ–π –∑–∞–ø–∏—Å":
        await update.message.reply_text(
            "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, —è–∫–∏–π –≤–∏ –∑–∞–ª–∏—à–∞–ª–∏ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 0931234567):",
            reply_markup=ReplyKeyboardRemove()
        )
        return CHECK_MY_BOOKINGS
    else:
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é —ñ–∑ –º–µ–Ω—é.")
        return MENU

async def choose_procedure(update: Update, context: ContextTypes.DEFAULT_TYPE):
    procedure = update.message.text
    if procedure not in PROCEDURES:
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É —ñ–∑ —Å–ø–∏—Å–∫—É.")
        return CHOOSE_PROCEDURE
    context.user_data["procedure"] = procedure
    await update.message.reply_text(
        "–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 28.05):",
        reply_markup=ReplyKeyboardRemove()
    )
    return INPUT_DATE

async def input_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date = update.message.text.strip()
    if not re.match(r"\d{2}\.\d{2}", date):
        await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 28.05):")
        return INPUT_DATE
    context.user_data["date"] = date
    await update.message.reply_text(
        "–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë —Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –Ü–≤–∞–Ω–µ–Ω–∫–æ –ú–∞—Ä—ñ—è, 0931234567):"
    )
    return INPUT_CONTACT

async def input_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = update.message.text.strip()
    match = re.match(r"(.+),\s*([\d\+\-\(\) ]{10,})", data)
    if not match:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ü–Ü–ë —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω —É —Ñ–æ—Ä–º–∞—Ç—ñ: –Ü–≤–∞–Ω–µ–Ω–∫–æ –ú–∞—Ä—ñ—è, 0931234567")
        return INPUT_CONTACT
    name, phone = match.groups()
    context.user_data["name"] = name.strip()
    context.user_data["phone"] = phone.strip()
    reply_keyboard = [[t] for t in TIME_OPTIONS]
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
    )
    return CHOOSE_TIME

async def choose_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    time = update.message.text
    if time not in TIME_OPTIONS:
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —á–∞—Å —ñ–∑ –∫–Ω–æ–ø–æ–∫:")
        return CHOOSE_TIME
    context.user_data["time"] = time
    # –ó–∞–ø–∏—Å —É Google Sheets
    add_to_google_sheet(
        name=context.user_data["name"],
        surname="",  # –ú–æ–∂–µ—à –≤–∏–¥—ñ–ª–∏—Ç–∏ –ø—Ä—ñ–∑–≤–∏—â–µ, —è–∫—â–æ —Ç—Ä–µ–±–∞
        phone=context.user_data["phone"],
        procedure=context.user_data["procedure"],
        date=context.user_data["date"],
        time=context.user_data["time"],
    )
    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
    admin_message = (
        "–ù–æ–≤–∏–π –∑–∞–ø–∏—Å!\n"
        f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {context.user_data['procedure']}\n"
        f"–î–∞—Ç–∞: {context.user_data['date']}\n"
        f"–ß–∞—Å: {context.user_data['time']}\n"
        f"–ö–ª—ñ—î–Ω—Ç: {context.user_data['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}"
    )
    try:
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_message)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")

    await update.message.reply_text(
        f"–í–∞—Å –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ {context.user_data['procedure']} ({context.user_data['date']} –æ {context.user_data['time']}). –î—è–∫—É—î–º–æ!",
        reply_markup=ReplyKeyboardMarkup([
            ["üìã –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É", "üìÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –º—ñ–π –∑–∞–ø–∏—Å"]
        ], resize_keyboard=True)
    )
    return MENU

# –ó–∞–≥–ª—É—à–∫–∞ ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ø–∏—Å—ñ–≤
async def check_my_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    bookings = []  # –†–µ–∞–ª—ñ–∑—É–π —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é –≤ google_sheets.py
    if bookings:
        text = "\n".join([
            f"{b['procedure']} {b['date']} {b['time']}"
            for b in bookings
        ])
    else:
        text = "–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    await update.message.reply_text(
        text,
        reply_markup=ReplyKeyboardMarkup([
            ["üìã –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É", "üìÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –º—ñ–π –∑–∞–ø–∏—Å"]
        ], resize_keyboard=True)
    )
    return MENU

def main():
    application = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, menu)],
            CHOOSE_PROCEDURE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_procedure)],
            INPUT_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_date)],
            INPUT_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_contact)],
            CHOOSE_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_time)],
            CHECK_MY_BOOKINGS: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_my_bookings)],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    main()

from dotenv import load_dotenv
import os

load_dotenv()  # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–º—ñ–Ω–Ω—ñ –∑ .env
TOKEN = os.getenv('TELEGRAM_TOKEN')

import os
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes,
    MessageHandler, filters
)
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, timedelta
from google_sheets import add_to_google_sheet

ADMIN_ID = int(os.environ["ADMIN_ID"])
scheduler = BackgroundScheduler()

def init_db():
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS bookings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            surname TEXT,
            phone TEXT,
            procedure TEXT,
            date TEXT,
            time TEXT
        )
    """)
    c.execute("PRAGMA table_info(bookings)")
    columns = [col[1] for col in c.fetchall()]
    if 'user_id' not in columns:
        try:
            c.execute("ALTER TABLE bookings ADD COLUMN user_id INTEGER")
        except Exception as e:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ user_id:", e)
    conn.commit()
    add_to_google_sheet(name, surname, phone, procedure, date, time)
    conn.close()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏", callback_data='book')],
        [InlineKeyboardButton("üìÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –º—ñ–π –∑–∞–ø–∏—Å", callback_data='check_booking')]
    ]
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=InlineKeyboardMarkup(keyboard))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'book':
        keyboard = [
            [InlineKeyboardButton("–ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤", callback_data='proc_brows')],
            [InlineKeyboardButton("–§–∞—Ä–±—É–≤–∞–Ω–Ω—è —Ç–∞ –∫–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤", callback_data='proc_tint_brows')],
            [InlineKeyboardButton("–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤", callback_data='proc_lam_brows')],
            [InlineKeyboardButton("–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π", callback_data='proc_lam_lashes')]
        ]
        await query.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == 'check_booking':
        await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:")
        context.user_data['step'] = 'check_phone'

    elif query.data.startswith('proc_'):
        proc_map = {
            'proc_brows': '–ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤',
            'proc_tint_brows': '–§–∞—Ä–±—É–≤–∞–Ω–Ω—è —Ç–∞ –∫–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤',
            'proc_lam_brows': '–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤',
            'proc_lam_lashes': '–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π'
        }
        context.user_data['procedure'] = proc_map[query.data]
        await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú:")
        context.user_data['step'] = 'get_date'

    elif query.data.startswith("time_"):
        time = query.data.replace("time_", "")
        name = context.user_data['name']
        surname = context.user_data['surname']
        phone = context.user_data['phone']
        procedure = context.user_data['procedure']
        date = context.user_data['date']
        user_id = query.from_user.id

        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("INSERT INTO bookings (user_id, name, surname, phone, procedure, date, time) VALUES (?, ?, ?, ?, ?, ?, ?)",
                  (user_id, name, surname, phone, procedure, date, time))
        conn.commit()
        add_to_google_sheet(name, surname, phone, procedure, date, time)
        conn.close()

        add_to_google_sheet(name, surname, phone, procedure, date, time)

        keyboard = [
            [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏", callback_data='book')],
            [InlineKeyboardButton("üìÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –º—ñ–π –∑–∞–ø–∏—Å", callback_data='check_booking')]
        ]
        await query.message.reply_text(
            f"‚úÖ –í–∞—Å –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ {procedure} {date} –æ {time}. –î—è–∫—É—î–º–æ, {name}!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"""üì• –ù–æ–≤–∏–π –∑–∞–ø–∏—Å:
–Ü–º'—è: {name} {surname}
–¢–µ–ª–µ—Ñ–æ–Ω: {phone}
–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {procedure}
–î–∞—Ç–∞: {date} –æ {time}"""
        )

        context.user_data.clear()

<<<<<<< HEAD
# (—Ä–µ—à—Ç–∞ –∫–æ–¥—É –Ω–µ –∑–º—ñ–Ω—é–≤–∞–ª–∞—Å—è, —Ç–æ–º—É –π–æ–≥–æ –æ–ø—É—Å–∫–∞—î–º–æ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ—Ä—É)
=======
# (—Ä–µ—à—Ç–∞ –∫–æ–¥—É –Ω–µ –∑–º—ñ–Ω—é–≤–∞–ª–∞—Å—è, —Ç–æ–º—É –π–æ–≥–æ –æ–ø—É—Å–∫–∞—î–º–æ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ—Ä—É)
>>>>>>> d82f3d3 (Initial commit: Telegram beauty bot)

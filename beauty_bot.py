from dotenv import load_dotenv
import os

load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID'))
MASTER_PHONE = "+380976853623"

import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes,
    MessageHandler, filters
)
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, timedelta
from google_sheets import add_to_google_sheet

scheduler = BackgroundScheduler()
INSTAGRAM_LINK = "https://www.instagram.com/safroniuk_brows_lashes?utm_source=ig_web_button_share_sheet&igsh=ZDNlZDc0MzIxNw=="

# --- DATABASE INITIALIZATION ---
def init_db():
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS bookings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            phone TEXT,
            procedure TEXT,
            date TEXT,
            time TEXT,
            user_id INTEGER,
            status TEXT DEFAULT '–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è'
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS schedule (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT,
            times TEXT
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS deleted_days (
            date TEXT PRIMARY KEY
        )
    """)
    conn.commit()
    conn.close()

# --- HANDLERS ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_message
    keyboard = [
        [InlineKeyboardButton("üëë –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É", callback_data='book')],
        [InlineKeyboardButton("üìã –ú–æ—ó –∑–∞–ø–∏—Å–∏", callback_data='check_booking')],
        [InlineKeyboardButton("üì∏ Instagram", callback_data='instagram')],
        [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏ –º–∞–π—Å—Ç—Ä–∞", callback_data='contact')]
    ]
    await chat.reply_text(
        "‚ú® –í—ñ—Ç–∞—é –≤ beauty-–±–æ—Ç—ñ! –¢—É—Ç –∫–æ–∂–Ω–∞ –¥—ñ–≤—á–∏–Ω–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —á–∞—Å –¥–ª—è —Å–µ–±–µ —Ç–∞ —Å–≤–æ–≥–æ –æ–±—Ä–∞–∑—É üíñ\n\n"
        "–û–±–∏—Ä–∞–π –¥—ñ—é –Ω–∏–∂—á–µ ‚Äî —ñ –≥–∞–π–¥–∞ –¥–æ –∫—Ä–∞—Å–∏! üå∏",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text_user = (
        "‚ú® *–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*
/start ‚Äî –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
/mybookings ‚Äî –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–≤–æ—ó –∑–∞–ø–∏—Å–∏
/help ‚Äî —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —Ç–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/instagram ‚Äî Instagram –º–∞–π—Å—Ç—Ä–∞
/contact ‚Äî –∫–æ–Ω—Ç–∞–∫—Ç–∏ –º–∞–π—Å—Ç—Ä–∞"
    )
    text_admin = text_user + (
        "
/calendar ‚Äî –∫–∞–ª–µ–Ω–¥–∞—Ä –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ (–∞–¥–º—ñ–Ω—É)
/weekcalendar ‚Äî –∫–∞–ª–µ–Ω–¥–∞—Ä –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å (–∞–¥–º—ñ–Ω—É)
/schedule ‚Äî –∑–º—ñ–Ω–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫
/delete_day ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ –¥–µ–Ω—å –∑ –≥—Ä–∞—Ñ—ñ–∫–∞"
    )
    text = text_admin if user_id == ADMIN_ID else text_user
    await update.effective_message.reply_text(text, parse_mode='Markdown')

async def instagram_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üå∏ *–ü—ñ–¥–ø–∏—Å—É–π—Å—è –Ω–∞ –º—ñ–π Instagram!* üå∏\n\n"
        "–¢—É—Ç —Ç–∏ –∑–Ω–∞–π–¥–µ—à –º–æ—ó —Ä–æ–±–æ—Ç–∏, –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏, –∞–∫—Ç—É–∞–ª—å–Ω—ñ –∞–∫—Ü—ñ—ó —ñ —Ç—Ä–æ—Ö–∏ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è –¥–ª—è —Å–µ–±–µ:\n"
        f"{INSTAGRAM_LINK}\n\n"
        "üëë @safroniuk_brows_lashes ‚Äî —Ä–∞–∑–æ–º –¥–æ –∫—Ä–∞—Å–∏!"
    )
    msg = update.effective_message
    await msg.reply_text(text, parse_mode="Markdown", disable_web_page_preview=False)

async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = f"üìû –ù–æ–º–µ—Ä –º–∞–π—Å—Ç—Ä–∞: {MASTER_PHONE}"
    msg = update.effective_message
    await msg.reply_text(text)

# --- SCHEDULE EDITING ---
async def schedule_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.effective_message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return
    today = datetime.now().date()
    keyboard = []
    for i in range(7):
        d = today + timedelta(days=i)
        date_str = d.strftime("%d.%m")
        keyboard.append([InlineKeyboardButton(date_str, callback_data=f"edit_schedule_{date_str}")])
    await update.effective_message.reply_text(
        "üóìÔ∏è –û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    context.user_data.clear()

# --- BUTTON HANDLER ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # BACK TO MENU
    if query.data == 'back_to_menu':
        await start(update, context)
        return
    # CONTACT
    if query.data == 'contact':
        await contact_handler(update, context)
        return

    # SCHEDULE EDIT: choose date
    if query.data.startswith("edit_schedule_") and query.from_user.id == ADMIN_ID:
        date = query.data.replace("edit_schedule_", "")
        context.user_data['edit_date'] = date
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT times FROM schedule WHERE date=?", (date,))
        row = c.fetchone()
        conn.close()
        hours = row[0].split(",") if row else []
        keyboard = [
            [InlineKeyboardButton(f"‚ùå {h}", callback_data=f"remove_time_{date}_{h}")] for h in hours
        ]
        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –≥–æ–¥–∏–Ω—É", callback_data=f"add_time_{date}")])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –¥–∞—Ç", callback_data="back_to_dates")])
        await query.message.reply_text(
            f"üóìÔ∏è –ì—Ä–∞—Ñ—ñ–∫ –¥–ª—è {date} ‚Äî –ø–æ—Ç–æ—á–Ω—ñ –≥–æ–¥–∏–Ω–∏: {', '.join(hours) if hours else '–Ω–µ–º–∞—î'}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    # REMOVE TIME
    if query.data.startswith("remove_time_") and query.from_user.id == ADMIN_ID:
        _, date, hour = query.data.split("_", 2)
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT times FROM schedule WHERE date=?", (date,))
        row = c.fetchone()
        if row:
            times = [t for t in row[0].split(",") if t != hour]
            if times:
                c.execute("UPDATE schedule SET times=? WHERE date=?", (",".join(times), date))
            else:
                c.execute("DELETE FROM schedule WHERE date=?", (date,))
            conn.commit()
        conn.close()
        await query.answer("–ì–æ–¥–∏–Ω—É –≤–∏–¥–∞–ª–µ–Ω–æ.")
        # refresh menu
        await schedule_handler(update, context)
        return

    # INITIATE ADD TIME
    if query.data.startswith("add_time_") and query.from_user.id == ADMIN_ID:
        date = query.data.replace("add_time_", "")
        context.user_data['step'] = 'add_time'
        context.user_data['edit_date'] = date
        await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –≥–æ–¥–∏–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 14:30):")
        return

    # BACK TO DATES
    if query.data == "back_to_dates" and query.from_user.id == ADMIN_ID:
        await schedule_handler(update, context)
        return

    # --- existing booking logic below (book, proc_, ...)
    # (—Ç—É—Ç –≤—Å—Ç–∞–≤–∏—Ç–∏ –≤–∞—à—ñ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Å—É, —è–∫ —Ä–∞–Ω—ñ—à–µ)
    # ...

# --- TEXT HANDLER ---
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_step = context.user_data.get('step')
    text = update.message.text.strip()

    # ADD TIME STEP
    if user_step == 'add_time' and update.effective_user.id == ADMIN_ID:
        try:
            datetime.strptime(text, "%H:%M")
        except ValueError:
            await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (HH:MM).")
            return
        date = context.user_data.get('edit_date')
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT times FROM schedule WHERE date=?", (date,))
        row = c.fetchone()
        if row:
            times = set(row[0].split(","))
            times.add(text)
            new_times = ",".join(sorted(times))
            c.execute("UPDATE schedule SET times=? WHERE date=?", (new_times, date))
        else:
            c.execute("INSERT INTO schedule (date, times) VALUES (?, ?)", (date, text))
        conn.commit()
        conn.close()
        await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ –≥–æ–¥–∏–Ω—É {text} –¥–ª—è {date}.")
        context.user_data['step'] = None
        # refresh edit menu
        fake_update = update
        fake_update.callback_query = type("Q", (), {"data": f"edit_schedule_{date}", "from_user": update.effective_user, "message": update.message})
        await button_handler(fake_update, context)
        return

    # ... —ñ–Ω—à–∞ –ª–æ–≥—ñ–∫–∞ text_handler –¥–ª—è –∑–∞–ø–∏—Å—ñ–≤ ...
    context.user_data['step'] = None
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ.")

# --- REMINDERS ---
async def send_reminder(user_id, procedure, date, time, mode="day"):
    from telegram import Bot
    bot = Bot(token=TOKEN)
    if mode == "day":
        text = f"‚è∞ –ù–∞–≥–∞–¥—É—é: –∑–∞–≤—Ç—Ä–∞ —Ç–≤—ñ–π –∑–∞–ø–∏—Å –Ω–∞ {procedure} {date} –æ {time}!"
    elif mode == "2h":
        text = f"üí¨ –ó–∞–ø–∏—Å –Ω–∞ {procedure} {date} –æ {time} —á–µ—Ä–µ–∑ 2 –≥–æ–¥–∏–Ω–∏."
    else:
        text = f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞–ø–∏—Å: {procedure} {date} –æ {time}."
    try:
        await bot.send_message(chat_id=user_id, text=text)
    except Exception:
        pass

async def mybookings_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT id, procedure, date, time, status FROM bookings WHERE user_id=?", (user_id,))
    rows = c.fetchall()
    conn.close()
    if rows:
        for rec in rows:
            bidding_id, procedure, date, time, status = rec
            msg = f"‚ú® {procedure}\nüóìÔ∏è {date} –æ {time}\n–°—Ç–∞—Ç—É—Å: *{status}*"
            buttons = []
            if status == "–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è":
                buttons = [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{bidding_id}"),
                           InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data=f"cancel_{bidding_id}")]
            reply_markup = InlineKeyboardMarkup([buttons]) if buttons else None
            await update.effective_message.reply_text(msg, reply_markup=reply_markup, parse_mode="Markdown")
    else:
        await update.effective_message.reply_text("–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

# --- MAIN ---
def main():
    init_db()
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_handler))
    app.add_handler(CommandHandler("instagram", instagram_handler))
    app.add_handler(CommandHandler("contact", contact_handler))
    app.add_handler(CommandHandler("schedule", schedule_handler))
    app.add_handler(CommandHandler("delete_day", delete_day_handler))
    app.add_handler(CommandHandler("calendar", calendar_handler))
    app.add_handler(CommandHandler("weekcalendar", week_calendar_handler))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    app.run_polling()

if __name__ == "__main__":
    main()

from dotenv import load_dotenv
import os

load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID'))
MASTER_PHONE = "+380976853623"

import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes,
    MessageHandler, filters
)
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, timedelta
from google_sheets import add_to_google_sheet

scheduler = BackgroundScheduler()
INSTAGRAM_LINK = "https://www.instagram.com/safroniuk_brows_lashes?utm_source=ig_web_button_share_sheet&igsh=ZDNlZDc0MzIxNw=="

# --- DATABASE INITIALIZATION ---
def init_db():
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS bookings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            phone TEXT,
            procedure TEXT,
            date TEXT,
            time TEXT,
            user_id INTEGER,
            status TEXT DEFAULT '–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è'
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS schedule (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT,
            times TEXT
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS deleted_days (
            date TEXT PRIMARY KEY
        )
    """)
    conn.commit()
    conn.close()

# --- HANDLERS ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_message
    keyboard = [
        [InlineKeyboardButton("üëë –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É", callback_data='book')],
        [InlineKeyboardButton("üìã –ú–æ—ó –∑–∞–ø–∏—Å–∏", callback_data='check_booking')],
        [InlineKeyboardButton("üì∏ Instagram", callback_data='instagram')],
        [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏ –º–∞–π—Å—Ç—Ä–∞", callback_data='contact')]
    ]
    await chat.reply_text(
        "‚ú® –í—ñ—Ç–∞—é –≤ beauty-–±–æ—Ç—ñ! –¢—É—Ç –∫–æ–∂–Ω–∞ –¥—ñ–≤—á–∏–Ω–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —á–∞—Å –¥–ª—è —Å–µ–±–µ —Ç–∞ —Å–≤–æ–≥–æ –æ–±—Ä–∞–∑—É üíñ\n\n"
        "–û–±–∏—Ä–∞–π –¥—ñ—é –Ω–∏–∂—á–µ ‚Äî —ñ –≥–∞–π–¥–∞ –¥–æ –∫—Ä–∞—Å–∏! üå∏",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text_user = (
        "‚ú® *–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*\n"
        "/start ‚Äî –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
        "/mybookings ‚Äî –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–≤–æ—ó –∑–∞–ø–∏—Å–∏\n"
        "/help ‚Äî —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —Ç–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/instagram ‚Äî Instagram –º–∞–π—Å—Ç—Ä–∞\n"
        "/contact ‚Äî –∫–æ–Ω—Ç–∞–∫—Ç–∏ –º–∞–π—Å—Ç—Ä–∞"
    )
    text_admin = text_user + (
        "\n"
        "/calendar ‚Äî –∫–∞–ª–µ–Ω–¥–∞—Ä –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ (–∞–¥–º—ñ–Ω—É)\n"
        "/weekcalendar ‚Äî –∫–∞–ª–µ–Ω–¥–∞—Ä –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å (–∞–¥–º—ñ–Ω—É)\n"
        "/schedule ‚Äî –∑–º—ñ–Ω–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫\n"
        "/delete_day ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ –¥–µ–Ω—å –∑ –≥—Ä–∞—Ñ—ñ–∫–∞"
    )
    text = text_admin if user_id == ADMIN_ID else text_user
    await update.effective_message.reply_text(text, parse_mode='Markdown')

async def instagram_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üå∏ *–ü—ñ–¥–ø–∏—Å—É–π—Å—è –Ω–∞ –º—ñ–π Instagram!* üå∏\n\n"
        "–¢—É—Ç —Ç–∏ –∑–Ω–∞–π–¥–µ—à –º–æ—ó —Ä–æ–±–æ—Ç–∏, –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏, –∞–∫—Ç—É–∞–ª—å–Ω—ñ –∞–∫—Ü—ñ—ó —ñ —Ç—Ä–æ—Ö–∏ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è –¥–ª—è —Å–µ–±–µ:\n"
        f"{INSTAGRAM_LINK}\n\n"
        "üëë @safroniuk_brows_lashes ‚Äî —Ä–∞–∑–æ–º –¥–æ –∫—Ä–∞—Å–∏!"
    )
    msg = update.effective_message
    await msg.reply_text(text, parse_mode="Markdown", disable_web_page_preview=False)

async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text(f"üìû –ù–æ–º–µ—Ä –º–∞–π—Å—Ç—Ä–∞: {MASTER_PHONE}")

# --- SCHEDULE EDITING ---
async def schedule_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.effective_message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return
    today = datetime.now().date()
    keyboard = []
    for i in range(7):
        d = today + timedelta(days=i)
        keyboard.append([InlineKeyboardButton(d.strftime("%d.%m"), callback_data=f"edit_schedule_{d.strftime('%d.%m')}")])
    await update.effective_message.reply_text(
        "üóìÔ∏è –û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    context.user_data.clear()

async def delete_day_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.effective_message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return
    # —ñ—Å–Ω—É—é—á–∞ –ª–æ–≥—ñ–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–Ω—è...

async def calendar_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.effective_message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return
    # —ñ—Å–Ω—É—é—á–∞ –ª–æ–≥—ñ–∫–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ...

async def week_calendar_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.effective_message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return
    # —ñ—Å–Ω—É—é—á–∞ –ª–æ–≥—ñ–∫–∞ —Ç–∏–∂–Ω–µ–≤–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è...

# --- BUTTON HANDLER ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'back_to_menu':
        await start(update, context)
        return
    if query.data == 'contact':
        await contact_handler(update, context)
        return

    if query.data.startswith("edit_schedule_"):
        # –ª–æ–≥—ñ–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É...
        return
    # —ñ–Ω—à—ñ –æ–±—Ä–æ–±–∫–∏ –∫–æ–ª–±–µ–∫—ñ–≤ –¥–ª—è –∑–∞–ø–∏—Å—ñ–≤...

# --- TEXT HANDLER ---
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ª–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ç–µ–∫—Å—Ç—É, –∑–æ–∫—Ä–µ–º–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≥–æ–¥–∏–Ω
    await update.effective_message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ.")

# --- MAIN ---

def main():
    init_db()
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_handler))
    app.add_handler(CommandHandler("instagram", instagram_handler))
    app.add_handler(CommandHandler("contact", contact_handler))
    app.add_handler(CommandHandler("schedule", schedule_handler))
    app.add_handler(CommandHandler("delete_day", delete_day_handler))
    app.add_handler(CommandHandler("calendar", calendar_handler))
    app.add_handler(CommandHandler("weekcalendar", week_calendar_handler))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    app.run_polling()

if __name__ == "__main__":
    main()

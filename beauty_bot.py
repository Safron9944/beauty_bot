from dotenv import load_dotenv
import os

load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMIN_ID = int(os.environ["ADMIN_ID"])

import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes,
    MessageHandler, filters
)
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, timedelta
from google_sheets import add_to_google_sheet

scheduler = BackgroundScheduler()
INSTAGRAM_LINK = "https://www.instagram.com/safroniuk_brows_lashes?utm_source=ig_web_button_share_sheet&igsh=ZDNlZDc0MzIxNw=="

def init_db():
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS bookings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            phone TEXT,
            procedure TEXT,
            date TEXT,
            time TEXT,
            user_id INTEGER,
            status TEXT DEFAULT '–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è'
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS schedule (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT,
            times TEXT
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS deleted_days (
            date TEXT PRIMARY KEY
        )
    """)
    conn.commit()
    conn.close()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üëë –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É", callback_data='book')],
        [InlineKeyboardButton("üìã –ú–æ—ó –∑–∞–ø–∏—Å–∏", callback_data='check_booking')],
        [InlineKeyboardButton("üì∏ Instagram", callback_data='instagram')],
        [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
    ]
    await update.message.reply_text(
        "‚ú® –í—ñ—Ç–∞—é –≤ beauty-–±–æ—Ç—ñ! –¢—É—Ç –∫–æ–∂–Ω–∞ –¥—ñ–≤—á–∏–Ω–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —á–∞—Å –¥–ª—è —Å–µ–±–µ —Ç–∞ —Å–≤–æ–≥–æ –æ–±—Ä–∞–∑—É üíñ\n\n"
        "–û–±–∏—Ä–∞–π –¥—ñ—é –Ω–∏–∂—á–µ ‚Äî —ñ –≥–∞–π–¥–∞ –¥–æ –∫—Ä–∞—Å–∏! üå∏",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id == ADMIN_ID:
        text = (
            "üëë *–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*\n\n"
            "/start ‚Äî –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
            "/mybookings ‚Äî –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–≤–æ—ó –∑–∞–ø–∏—Å–∏\n"
            "/help ‚Äî —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —Ç–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
            "/instagram ‚Äî Instagram –º–∞–π—Å—Ç—Ä–∞\n"
            "/calendar ‚Äî –∫–∞–ª–µ–Ω–¥–∞—Ä –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ (–∞–¥–º—ñ–Ω—É)\n"
            "/weekcalendar ‚Äî –∫–∞–ª–µ–Ω–¥–∞—Ä –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å (–∞–¥–º—ñ–Ω—É)\n\n"
            "*–ê–¥–º—ñ–Ω—É –¥–æ—Å—Ç—É–ø–Ω–æ:*\n"
            "/schedule ‚Äî –≥—Ä–∞—Ñ—ñ–∫ –∑ –∫–Ω–æ–ø–∫–∞–º–∏"
        )
    else:
        text = (
            "‚ú® *–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*\n\n"
            "/start ‚Äî –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
            "/mybookings ‚Äî –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–≤–æ—ó –∑–∞–ø–∏—Å–∏\n"
            "/help ‚Äî —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —Ç–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
            "/instagram ‚Äî Instagram –º–∞–π—Å—Ç—Ä–∞"
        )
    await update.message.reply_text(text, parse_mode='Markdown')

async def instagram_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üå∏ *–ü—ñ–¥–ø–∏—Å—É–π—Å—è –Ω–∞ –º—ñ–π Instagram!* üå∏\n\n"
        "–¢—É—Ç —Ç–∏ –∑–Ω–∞–π–¥–µ—à –º–æ—ó —Ä–æ–±–æ—Ç–∏, –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏, –∞–∫—Ç—É–∞–ª—å–Ω—ñ –∞–∫—Ü—ñ—ó —ñ —Ç—Ä–æ—Ö–∏ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è –¥–ª—è —Å–µ–±–µ:\n"
        f"{INSTAGRAM_LINK}\n\n"
        "üëë @safroniuk_brows_lashes ‚Äî —Ä–∞–∑–æ–º –¥–æ –∫—Ä–∞—Å–∏!"
    )
    if hasattr(update, "message") and update.message:
        await update.message.reply_text(text, parse_mode="Markdown", disable_web_page_preview=False)
    else:
        await update.callback_query.message.reply_text(text, parse_mode="Markdown", disable_web_page_preview=False)

async def schedule_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return
    keyboard = [
        [InlineKeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ —Ç–∏–∂–Ω—è", callback_data='admin_schedule')]
    ]
    await update.message.reply_text("–©–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏ –∑ –≥—Ä–∞—Ñ—ñ–∫–æ–º?", reply_markup=InlineKeyboardMarkup(keyboard))
    context.user_data['step'] = None

async def delete_day_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return
    today = datetime.now().date()
    dates = set()
    for i in range(7):
        d = today + timedelta(days=i)
        dates.add(d.strftime("%d.%m"))
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT DISTINCT date FROM schedule")
    for row in c.fetchall():
        dates.add(row[0])
    conn.close()
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT date FROM deleted_days")
    deleted = {row[0] for row in c.fetchall()}
    conn.close()
    dates = [d for d in dates if d not in deleted]
    dates = sorted(list(dates), key=lambda x: datetime.strptime(x + f".{datetime.now().year}", "%d.%m.%Y"))
    if not dates:
        await update.message.reply_text("–ù–µ–º–∞—î –¥–Ω—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
        return
    keyboard = [
        [InlineKeyboardButton(f"‚ùå {date}", callback_data=f"delday_{date}")] for date in dates
    ]
    await update.message.reply_text("üóëÔ∏è –û–±–µ—Ä–∏ –¥–µ–Ω—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è (–≤—ñ–Ω –∑–Ω–∏–∫–Ω–µ –¥–ª—è –∑–∞–ø–∏—Å—É):", reply_markup=InlineKeyboardMarkup(keyboard))
    context.user_data['step'] = None

async def calendar_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return
    today = datetime.now().date()
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute(
        "SELECT date, time, procedure, name, phone, status FROM bookings "
        "WHERE date=? ORDER BY date, time", (today.strftime("%d.%m"),)
    )
    rows = c.fetchall()
    conn.close()
    if not rows:
        await update.message.reply_text("–°—å–æ–≥–æ–¥–Ω—ñ –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î.")
        return
    text = f"üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ {today.strftime('%d.%m.%Y')}:\n\n"
    for rec in rows:
        date, time, procedure, name, phone, status = rec
        text += (
            f"üïí {time} ‚Äî {procedure}\n"
            f"üë§ {name}, üì± {phone}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
        )
    await update.message.reply_text(text)

async def week_calendar_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return
    today = datetime.now().date()
    week_dates = [(today + timedelta(days=i)).strftime("%d.%m") for i in range(7)]
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute(
        f"SELECT date, time, procedure, name, phone, status FROM bookings "
        f"WHERE date IN ({','.join(['?']*len(week_dates))}) ORDER BY date, time", week_dates
    )
    rows = c.fetchall()
    conn.close()
    if not rows:
        await update.message.reply_text("–ù–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î.")
        return
    text = "üìÜ –ó–∞–ø–∏—Å–∏ –Ω–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å:\n\n"
    for rec in rows:
        date, time, procedure, name, phone, status = rec
        text += (
            f"üìÖ {date} üïí {time} ‚Äî {procedure}\n"
            f"üë§ {name}, üì± {phone}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
        )
    await update.message.reply_text(text)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    # === –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é ===
    if query.data == 'back_to_menu':
        if query.message:
            await query.message.delete()
        if update.effective_chat:
            await update.get_bot().send_message(
                chat_id=update.effective_chat.id,
                text="‚ú® –í—ñ—Ç–∞—é –≤ beauty-–±–æ—Ç—ñ! –¢—É—Ç –∫–æ–∂–Ω–∞ –¥—ñ–≤—á–∏–Ω–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —á–∞—Å –¥–ª—è —Å–µ–±–µ —Ç–∞ —Å–≤–æ–≥–æ –æ–±—Ä–∞–∑—É üíñ\n\n"
                     "–û–±–∏—Ä–∞–π –¥—ñ—é –Ω–∏–∂—á–µ ‚Äî —ñ –≥–∞–π–¥–∞ –¥–æ –∫—Ä–∞—Å–∏! üå∏",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üëë –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É", callback_data='book')],
                    [InlineKeyboardButton("üìã –ú–æ—ó –∑–∞–ø–∏—Å–∏", callback_data='check_booking')],
                    [InlineKeyboardButton("üì∏ Instagram", callback_data='instagram')],
                    [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
                ])
            )
        context.user_data.clear()
        return

    # ========== –Ü–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ï –ê–î–ú–Ü–ù-–ú–ï–ù–Æ –ì–†–ê–§–Ü–ö–ê ===============
    # –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–∞—Ç–∏ —Ç–∏–∂–Ω—è
    if query.data == "admin_schedule":
        if user_id != ADMIN_ID:
            await query.message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ –ª–∏—à–µ –∞–¥–º—ñ–Ω—É.")
            return
        today = datetime.now().date()
        week_dates = [(today + timedelta(days=i)).strftime("%d.%m") for i in range(7)]
        keyboard = [
            [InlineKeyboardButton(date, callback_data=f"admin_schedule_{date}")]
            for date in week_dates
        ]
        await query.message.reply_text("üóìÔ∏è –û–±–µ—Ä–∏ –¥–µ–Ω—å –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    # –û–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –≥–æ–¥–∏–Ω–∏ —Ü—ñ—î—ó –¥–∞—Ç–∏
    if query.data.startswith("admin_schedule_"):
        date = query.data.replace("admin_schedule_", "")
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT times FROM schedule WHERE date = ?", (date,))
        row = c.fetchone()
        conn.close()
        times = []
        if row and row[0]:
            times = [t.strip() for t in row[0].split(',') if t.strip()]
        keyboard = []
        for t in times:
            keyboard.append([InlineKeyboardButton(f"üïí {t} ‚ùå", callback_data=f"admin_del_time_{date}_{t}")])
        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —á–∞—Å", callback_data=f"admin_add_time_{date}")])
        keyboard.append([InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –¥–µ–Ω—å –ø–æ–≤–Ω—ñ—Å—Ç—é", callback_data=f"delday_{date}")])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_schedule")])
        await query.message.reply_text(f"‚è∞ –ß–∞—Å–∏ –¥–ª—è {date}:", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    # –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —á–∞—Å
    if query.data.startswith("admin_del_time_"):
        _, date, time = query.data.split("_", 2)
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT times FROM schedule WHERE date = ?", (date,))
        row = c.fetchone()
        if row and row[0]:
            times = [t.strip() for t in row[0].split(',') if t.strip() and t.strip() != time]
            new_times = ",".join(times)
            if new_times:
                c.execute("UPDATE schedule SET times = ? WHERE date = ?", (new_times, date))
            else:
                c.execute("DELETE FROM schedule WHERE date = ?", (date,))
            conn.commit()
        conn.close()
        await query.message.reply_text(f"‚è∞ –ß–∞—Å {time} –≤–∏–¥–∞–ª–µ–Ω–æ –¥–ª—è {date}.")
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –∑–Ω–æ–≤—É –º–µ–Ω—é –¥–ª—è —Ü—ñ—î—ó –¥–∞—Ç–∏
        await button_handler(update, context)
        return

    # –î–æ–¥–∞—Ç–∏ —á–∞—Å (–≤–≤–µ–¥–µ–Ω–Ω—è –≤—Ä—É—á–Ω—É)
    if query.data.startswith("admin_add_time_"):
        date = query.data.replace("admin_add_time_", "")
        context.user_data["admin_add_time_date"] = date
        await query.message.reply_text("–í–≤–µ–¥–∏ —á–∞—Å –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 16:00):")
        context.user_data["step"] = "admin_add_time"
        return

    # ...–¥–∞–ª—ñ –∑–∞–ª–∏—à–∞—î—à —Ä–µ—à—Ç—É button_handler —è–∫ –±—É–ª–æ (–ø—Ä–æ—Ü–µ–¥—É—Ä–∏, –∫–∞–ª–µ–Ω–¥–∞—Ä, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –ª–æ–≥—ñ–∫–∞)...

    # –í–∏–±—ñ—Ä –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
    if query.data == 'book' or query.data == 'back_to_procedure':
        keyboard = [
            [InlineKeyboardButton("‚ú® –ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤ (—ñ–¥–µ–∞–ª—å–Ω–∞ —Ñ–æ—Ä–º–∞)", callback_data='proc_brows')],
            [InlineKeyboardButton("üé® –§–∞—Ä–±—É–≤–∞–Ω–Ω—è + –∫–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤", callback_data='proc_tint_brows')],
            [InlineKeyboardButton("üåü –õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤ (WOW-–µ—Ñ–µ–∫—Ç)", callback_data='proc_lam_brows')],
            [InlineKeyboardButton("üëÅÔ∏è –õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π (–≤–∏—Ä–∞–∑–Ω–∏–π –ø–æ–≥–ª—è–¥)", callback_data='proc_lam_lashes')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data='back_to_menu')]
        ]
        await query.message.reply_text(
            "‚ú® –û–±–µ—Ä–∏ —Å–≤–æ—é –± º—é—Ç—ñ-–ø—Ä–æ—Ü–µ–¥—É—Ä—É, –∫—Ä–∞—Å—É–Ω–µ! –°–µ—Ä–¥–µ–Ω—å–∫–æ–º –ø–æ–∑–Ω–∞—á —Ç—É, —è–∫–∞ –Ω–∞–¥–∏—Ö–∞—î –Ω–∞–π–±—ñ–ª—å—à–µ ‚Äî –∞–±–æ –Ω–∞—Ç–∏—Å–∫–∞–π ‚¨ÖÔ∏è —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º—Ä—ñ–π üåàüíñ\n\n–û–±—ñ—Ü—è—é, —Ç–≤–æ—è –∫—Ä–∞—Å–∞ –∑–∞—Å—è—î —â–µ —è—Å–∫—Ä–∞–≤—ñ—à–µ! ü´∂",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data.clear()
        return

    # ...—ñ–Ω—à—ñ callback-–∏ (–∑–∞–ª–∏—à–∞—î—à —è–∫ —É —Ç–µ–±–µ)...

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_step = context.user_data.get('step')
    text = update.message.text

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Å—É –≤ –≥—Ä–∞—Ñ—ñ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_step == "admin_add_time":
        date = context.user_data.get("admin_add_time_date")
        new_time = text.strip()
        try:
            datetime.strptime(new_time, "%H:%M")
        except Exception:
            await update.message.reply_text("‚ùó –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM.")
            return
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT times FROM schedule WHERE date = ?", (date,))
        row = c.fetchone()
        if row and row[0]:
            times = [t.strip() for t in row[0].split(',') if t.strip()]
            if new_time in times:
                await update.message.reply_text("–¢–∞–∫–∏–π —á–∞—Å —É–∂–µ —î.")
                conn.close()
                return
            times.append(new_time)
            new_times = ",".join(sorted(times))
            c.execute("UPDATE schedule SET times = ? WHERE date = ?", (new_times, date))
        else:
            c.execute("INSERT INTO schedule (date, times) VALUES (?, ?)", (date, new_time))
        conn.commit()
        conn.close()
        await update.message.reply_text(f"üÜï –ß–∞—Å {new_time} –¥–æ–¥–∞–Ω–æ –¥–ª—è {date}!")
        await button_handler(update, context)
        context.user_data["step"] = None
        context.user_data.pop("admin_add_time_date", None)
        return

    # ...–∑–∞–ª–∏—à —ñ–Ω—à—ñ –∫—Ä–æ–∫–∏ —è–∫ —É —Ç–µ–±–µ...

def main():
    init_db()
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_handler))
    app.add_handler(CommandHandler("instagram", instagram_handler))
    app.add_handler(CommandHandler("calendar", calendar_handler))
    app.add_handler(CommandHandler("weekcalendar", week_calendar_handler))
    app.add_handler(CommandHandler("schedule", schedule_handler))
    app.add_handler(CommandHandler("delete_day", delete_day_handler))
    # ...—ñ–Ω—à—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏...
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    app.run_polling()

if __name__ == "__main__":
    main()

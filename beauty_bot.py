from dotenv import load_dotenv
import os

load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMIN_ID = int(os.environ["ADMIN_ID"])

import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes,
    MessageHandler, filters
)
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, timedelta

try:
    from google_sheets import add_to_google_sheet
except ImportError:
    def add_to_google_sheet(*args, **kwargs):
        pass

INSTAGRAM_LINK = "https://www.instagram.com/safroniuk_brows_lashes?utm_source=ig_web_button_share_sheet&igsh=ZDNlZDc0MzIxNw=="
MASTER_PHONE = "+380976853623"
MASTER_NAME = "–ú–∞—Ä—ñ—è"
MASTER_GEO = "–≤—É–ª. –ö–∏—ó–≤—Å—å–∫–∞ 41, –ú–æ–≥–∏–ª—ñ–≤-–ü–æ–¥—ñ–ª—å—Å—å–∫–∏–π, 24000, –£–∫—Ä–∞—ó–Ω–∞"
MASTER_GEO_LINK = "https://maps.app.goo.gl/n6xvT6bpMcL5QjHP9"

scheduler = BackgroundScheduler()

def init_db():
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS bookings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            phone TEXT,
            procedure TEXT,
            date TEXT,
            time TEXT,
            user_id INTEGER,
            status TEXT DEFAULT '–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è'
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS schedule (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT,
            times TEXT
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS deleted_days (
            date TEXT PRIMARY KEY
        )
    """)
    conn.commit()
    conn.close()

# --- –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    keyboard = [
        [InlineKeyboardButton("üíé –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É", callback_data='book')],
        [InlineKeyboardButton("üìã –ú–æ—ó –∑–∞–ø–∏—Å–∏", callback_data='check_booking')],
        [InlineKeyboardButton("üì∏ Instagram", url=INSTAGRAM_LINK)],
        [InlineKeyboardButton("üìç –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è", url=MASTER_GEO_LINK)],
        [InlineKeyboardButton(f"üë©‚Äçüé® –í–∞—à –º–∞–π—Å—Ç–µ—Ä: {MASTER_NAME}", callback_data='master_phone')]
    ]
    if user_id == ADMIN_ID:
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å", callback_data='admin_service')])
    welcome = (
        "‚ú® *Beauty-–±–æ—Ç* –∑—É—Å—Ç—Ä—ñ—á–∞—î —Ç–µ–±–µ –∑ –ø–æ—Å–º—ñ—à–∫–æ—é! –¢—É—Ç –∫–æ–∂–Ω–∞ –∫—Ä–∞—Å—É–Ω—è –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —Å–≤—ñ–π —Å—Ç–∏–ª—å —ñ –Ω–∞—Å—Ç—Ä—ñ–π üíñ\n\n"
        "–û–±–∏—Ä–∞–π, —â–æ —Ö–æ—á–µ—à:\n"
        "‚Äî –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É\n"
        "‚Äî –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Å–≤–æ—ó –∑–∞–ø–∏—Å–∏\n"
        "‚Äî –∑–Ω–∞–π—Ç–∏ —Å–∞–ª–æ–Ω –Ω–∞ –º–∞–ø—ñ\n"
        "‚Äî –≥–ª—è–Ω—É—Ç–∏ Instagram –∞–±–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ –º–∞–π—Å—Ç—Ä—É\n\n"
        "üå∏ –ö—Ä–∞—Å–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è —Ç—É—Ç!"
    )
    if hasattr(update, "message") and update.message:
        await update.message.reply_text(welcome, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
    else:
        await update.callback_query.edit_message_text(welcome, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")

# --- –ê–î–ú–Ü–ù –°–ï–†–í–Ü–° ---
async def admin_service_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.callback_query
    if user_id != ADMIN_ID:
        await query.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É", show_alert=True)
        return
    keyboard = [
        [InlineKeyboardButton("üóìÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –ø–æ –¥–Ω—è—Ö", callback_data='edit_schedule')],
        [InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –¥–µ–Ω—å –∑ –≥—Ä–∞—Ñ—ñ–∫–∞", callback_data='delete_day')],
        [InlineKeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ", callback_data='calendar')],
        [InlineKeyboardButton("üìÜ –ö–∞–ª–µ–Ω–¥–∞—Ä –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å", callback_data='weekcalendar')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='back_to_menu')]
    ]
    text = (
        "‚öôÔ∏è *–ê–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å*\n\n"
        "–ö–µ—Ä—É–π—Ç–µ —Ä–æ–∑–∫–ª–∞–¥–æ–º, –¥–∏–≤—ñ—Ç—å—Å—è –≤—Å—ñ –∑–∞–ø–∏—Å–∏ —ñ —Ç—Ä–∏–º–∞–π—Ç–µ –∫—Ä–∞—Å—É –ø—ñ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º üëë\n"
        "–û–±–∏—Ä–∞–π—Ç–µ –¥—ñ—é:"
    )
    await query.edit_message_text(text, parse_mode='Markdown', reply_markup=InlineKeyboardMarkup(keyboard))

# --- –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –ì–†–ê–§–Ü–ö–£ (–ê–î–ú–Ü–ù) ---
async def edit_schedule_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    # –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–Ω—ñ–≤ –Ω–∞ 10 –¥–Ω—ñ–≤ –≤–ø–µ—Ä–µ–¥ (—è–∫—ñ —î —É –≥—Ä–∞—Ñ—ñ–∫—É –∞–±–æ —è–∫–∏—Ö –Ω–µ–º–∞—î)
    today = datetime.now().date()
    dates = []
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT DISTINCT date FROM schedule")
    scheduled_dates = {row[0] for row in c.fetchall()}
    conn.close()
    for i in range(10):
        d = today + timedelta(days=i)
        date_str = d.strftime("%d.%m")
        dates.append(date_str)
    keyboard = [
        [InlineKeyboardButton(f"üóìÔ∏è {date} {'‚úÖ' if date in scheduled_dates else '‚ûï'}", callback_data=f'edit_day_{date}')]
        for date in dates
    ]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å—É", callback_data="admin_service")])
    await query.edit_message_text(
        "üåà –û–±–µ—Ä–∏ –¥–µ–Ω—å –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–±–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Å—É:\n"
        "‚Äî –ù–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –¥–µ–Ω—å\n"
        "‚Äî –î–Ω—ñ –∑ ‚úÖ ‚Äî –≤–∂–µ –º–∞—é—Ç—å –≥—Ä–∞—Ñ—ñ–∫, ‚ûï ‚Äî –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏\n"
        "‚Äî –ó–º—ñ–Ω–∏/–¥–æ–¥–∞–π –≥–æ–¥–∏–Ω–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∏ (–ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –¥–Ω—è)\n",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def edit_day_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    day = query.data.replace('edit_day_', '')
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT times FROM schedule WHERE date = ?", (day,))
    row = c.fetchone()
    conn.close()
    times = row[0] if row else ""
    context.user_data['edit_day'] = day
    text = (
        f"üóìÔ∏è *{day}*\n"
        "–í–≤–µ–¥—ñ—Ç—å –≥–æ–¥–∏–Ω–∏ –¥–ª—è —Ü—å–æ–≥–æ –¥–Ω—è —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 10:00,11:30,12:00):\n"
        f"–ü–æ—Ç–æ—á–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫: {times if times else '–ù–µ–º–∞—î'}"
    )
    await query.edit_message_text(
        text, parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –î–Ω—ñ", callback_data="edit_schedule")]])
    )
    context.user_data['step'] = 'edit_times'

# --- –Ü–ù–®–Ü –ê–î–ú–Ü–ù –§–£–ù–ö–¶–Ü–á ---
async def delete_day_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id if hasattr(update, "effective_user") else update.callback_query.from_user.id
    query = update.callback_query
    if user_id != ADMIN_ID:
        await query.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É", show_alert=True)
        return
    today = datetime.now().date()
    dates = set()
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT DISTINCT date FROM schedule")
    for row in c.fetchall():
        dates.add(row[0])
    conn.close()
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT date FROM deleted_days")
    deleted = {row[0] for row in c.fetchall()}
    conn.close()
    dates = [d for d in dates if d not in deleted]
    dates = sorted(list(dates), key=lambda x: datetime.strptime(x + f".{datetime.now().year}", "%d.%m.%Y"))
    if not dates:
        await query.edit_message_text("üå∫ –ù–µ–º–∞—î –¥–Ω—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å—É", callback_data="admin_service")]])
        )
        return
    keyboard = [
        [InlineKeyboardButton(f"‚ùå {date}", callback_data=f"delday_{date}")] for date in dates
    ]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å—É", callback_data="admin_service")])
    await query.edit_message_text(
        "üóëÔ∏è –û–±–µ—Ä–∏ –¥–µ–Ω—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ —Ä–æ–∑–∫–ª–∞–¥—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def calendar_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return
    today = datetime.now().date()
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute(
        "SELECT date, time, procedure, name, phone, status FROM bookings "
        "WHERE date=? ORDER BY date, time", (today.strftime("%d.%m"),)
    )
    rows = c.fetchall()
    conn.close()
    if not rows:
        await update.callback_query.edit_message_text("–°—å–æ–≥–æ–¥–Ω—ñ –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î üí§.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ê–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å", callback_data="admin_service")]])
        )
        return
    text = f"üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ {today.strftime('%d.%m.%Y')}:\n\n"
    for rec in rows:
        date, time, procedure, name, phone, status = rec
        text += (
            f"üïí {time} ‚Äî {procedure}\n"
            f"üë§ {name}, üì± {phone}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
        )
    await update.callback_query.edit_message_text(text,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ê–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å", callback_data="admin_service")]])
    )

async def week_calendar_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return
    today = datetime.now().date()
    week_dates = [(today + timedelta(days=i)).strftime("%d.%m") for i in range(7)]
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute(
        f"SELECT date, time, procedure, name, phone, status FROM bookings "
        f"WHERE date IN ({','.join(['?']*len(week_dates))}) ORDER BY date, time", week_dates
    )
    rows = c.fetchall()
    conn.close()
    if not rows:
        await update.callback_query.edit_message_text("–ù–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î üí§.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ê–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å", callback_data="admin_service")]])
        )
        return
    text = "üìÜ –ó–∞–ø–∏—Å–∏ –Ω–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å:\n\n"
    for rec in rows:
        date, time, procedure, name, phone, status = rec
        text += (
            f"üìÖ {date} üïí {time} ‚Äî {procedure}\n"
            f"üë§ {name}, üì± {phone}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
        )
    await update.callback_query.edit_message_text(text,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ê–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å", callback_data="admin_service")]])
    )

# --- CALLBACK HANDLER ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    # –ê–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å —Ç–∞ –≤—Å–µ —â–æ –∑ –Ω–∏–º
    if query.data == 'admin_service':
        await admin_service_handler(update, context)
        return

    if query.data == 'edit_schedule':
        await edit_schedule_handler(update, context)
        return

    if query.data.startswith('edit_day_'):
        await edit_day_handler(update, context)
        return

    if query.data == "back_to_menu":
        await start(update, context)
        return

    if query.data == "edit_schedule":
        await edit_schedule_handler(update, context)
        return

    if query.data == "delete_day":
        await delete_day_handler(update, context)
        return

    if query.data == "calendar":
        await calendar_handler(update, context)
        return

    if query.data == "weekcalendar":
        await week_calendar_handler(update, context)
        return

    if query.data.startswith("delday_") and user_id == ADMIN_ID:
        date = query.data.replace('delday_', '')
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("INSERT OR IGNORE INTO deleted_days (date) VALUES (?)", (date,))
        conn.commit()
        conn.close()
        await query.edit_message_text(f"‚úÖ –î–µ–Ω—å {date} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –≥—Ä–∞—Ñ—ñ–∫–∞. –ë—ñ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –∑–∞–ø–∏—Å—É!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ê–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å", callback_data="admin_service")]])
        )
        return

    # --- –î–õ–Ø –ö–õ–Ü–Ñ–ù–¢–ê ---
    if query.data == 'book' or query.data == 'back_to_procedure':
        keyboard = [
            [InlineKeyboardButton("‚ú® –ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤ (—ñ–¥–µ–∞–ª—å–Ω–∞ —Ñ–æ—Ä–º–∞)", callback_data='proc_brows')],
            [InlineKeyboardButton("üé® –§–∞—Ä–±—É–≤–∞–Ω–Ω—è + –∫–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤", callback_data='proc_tint_brows')],
            [InlineKeyboardButton("üåü –õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤ (WOW-–µ—Ñ–µ–∫—Ç)", callback_data='proc_lam_brows')],
            [InlineKeyboardButton("üëÅÔ∏è –õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π (–≤–∏—Ä–∞–∑–Ω–∏–π –ø–æ–≥–ª—è–¥)", callback_data='proc_lam_lashes')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='back_to_menu')]
        ]
        await query.edit_message_text(
            "‚ú® –û–±–µ—Ä–∏ —Å–≤–æ—é *–± º—é—Ç—ñ-–ø—Ä–æ—Ü–µ–¥—É—Ä—É*!\n"
            "–ü–æ–∑–Ω–∞—á —Ç—É, —è–∫–∞ –Ω–∞–¥–∏—Ö–∞—î –Ω–∞–π–±—ñ–ª—å—à–µ ‚Äî –∞–±–æ –Ω–∞—Ç–∏—Å–∫–∞–π ‚¨ÖÔ∏è —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é üåàüíñ\n\n"
            "–û–±—ñ—Ü—è—é, —Ç–≤–æ—è –∫—Ä–∞—Å–∞ –∑–∞—Å—è—î —â–µ —è—Å–∫—Ä–∞–≤—ñ—à–µ! ü´∂",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        context.user_data.clear()
        return

    if query.data.startswith('proc_'):
        proc_map = {
            'proc_brows': '–ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤ (—ñ–¥–µ–∞–ª—å–Ω–∞ —Ñ–æ—Ä–º–∞)',
            'proc_tint_brows': '–§–∞—Ä–±—É–≤–∞–Ω–Ω—è + –∫–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤',
            'proc_lam_brows': '–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤ (WOW-–µ—Ñ–µ–∫—Ç)',
            'proc_lam_lashes': '–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π (–≤–∏—Ä–∞–∑–Ω–∏–π –ø–æ–≥–ª—è–¥)'
        }
        context.user_data['procedure'] = proc_map[query.data]
        today = datetime.now().date()
        dates = []
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT date FROM deleted_days")
        deleted = {row[0] for row in c.fetchall()}
        conn.close()
        for i in range(7):
            d = today + timedelta(days=i)
            date_str = d.strftime("%d.%m")
            if date_str not in deleted:
                dates.append(date_str)
        if not dates:
            await query.edit_message_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–Ω—ñ–≤ –¥–ª—è –∑–∞–ø–∏—Å—É. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –º–∞–π—Å—Ç—Ä–∞!")
            return
        keyboard = [
            [InlineKeyboardButton(f"üìÖ –û–±–∏—Ä–∞—é {date} üíã", callback_data=f'date_{date}')] for date in dates
        ]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø—Ä–æ—Ü–µ–¥—É—Ä", callback_data='back_to_procedure')])
        await query.edit_message_text(
            "üå∏ –Ø–∫–∏–π –¥–µ–Ω—å –∑—Ä–æ–±–∏—Ç—å —Ç–µ–±–µ —â–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ñ—à–æ—é? –û–±–∏—Ä–∞–π —Å–µ—Ä–¥–µ—á–∫–æ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—ñ!\n"
            "–ü–µ—Ä–µ–¥—É–º–∞–ª–∞? –ù–∞—Ç–∏—Å–∫–∞–π ‚¨ÖÔ∏è, —ñ –æ–±–µ—Ä–∏ —ñ–Ω—à—É –ø—Ä–æ—Ü–µ–¥—É—Ä—É! ‚ú®üíê",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data['step'] = None
        return

    if query.data.startswith('date_'):
        date = query.data.replace('date_', '')
        context.user_data['date'] = date
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT times FROM schedule WHERE date = ?", (date,))
        row = c.fetchone()
        conn.close()
        if row:
            times = [t.strip() for t in row[0].split(',')]
        else:
            day = datetime.strptime(date + f".{datetime.now().year}", "%d.%m.%Y").weekday()
            if day < 5:
                times = [f"{h:02d}:00" for h in range(14, 19)]
            else:
                times = [f"{h:02d}:00" for h in range(11, 19)]
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT time FROM bookings WHERE date = ?", (date,))
        booked_times = [row[0] for row in c.fetchall()]
        conn.close()
        free_times = [t for t in times if t not in booked_times]
        if not free_times:
            await query.edit_message_text("üòî –í—Å—ñ –≥–æ–¥–∏–Ω–∏ –Ω–∞ —Ü–µ–π –¥–µ–Ω—å –≤–∂–µ –∑–∞–π–Ω—è—Ç—ñ. –°–ø—Ä–æ–±—É–π –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –¥–µ–Ω—å!")
            return
        keyboard = [
            [InlineKeyboardButton(f"üïí {time} | –ú–æ—î —ñ–¥–µ–∞–ª—å–Ω–µ –≤—ñ–∫–æ–Ω—Ü–µ üíñ", callback_data=f'time_{time}')]
            for time in free_times
        ]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è", callback_data='back_to_date')])
        await query.edit_message_text(
            "üëë –ß–∞—Å –±—É—Ç–∏ –∑—ñ—Ä–∫–æ—é! –û–±–∏—Ä–∞–π —ñ–¥–µ–∞–ª—å–Ω–∏–π —á–∞—Å ‚ù§Ô∏è\n"
            "–•–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏ –¥–∞—Ç—É? –ù–∞—Ç–∏—Å–∫–∞–π ‚¨ÖÔ∏è",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data['step'] = None
        return

    if query.data.startswith("time_"):
        time = query.data.replace("time_", "")
        context.user_data['time'] = time
        await query.edit_message_text(
            "üíï –¢–≤–æ—è –∫—Ä–∞—Å–∞ –≤–∂–µ –º–∞–π–∂–µ —É –º–µ–Ω–µ –≤ —Ä—É–∫–∞—Ö!\n"
            "–ó–∞–ª–∏—à, –±—É–¥—å –ª–∞—Å–∫–∞, *–Ü–º'—è, –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É*, —â–æ–± —è –º–æ–≥–ª–∞ —Ç–æ–±—ñ –Ω–∞–ø–∏—Å–∞—Ç–∏ –∞–±–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏ ‚ú®\n\n"
            "_–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ú–∞—Ä—ñ—è –°–∞—Ñ—Ä–æ–Ω—é–∫, +380976853623_",
            parse_mode='Markdown'
        )
        context.user_data['step'] = 'get_fullinfo'
        return

    if query.data == 'check_booking':
        user_id = query.from_user.id
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT id, procedure, date, time, status FROM bookings WHERE user_id=?", (user_id,))
        rows = c.fetchall()
        conn.close()
        if rows:
            for rec in rows:
                booking_id, procedure, date, time, status = rec
                msg = f"‚ú® {procedure}\nüóìÔ∏è {date} –æ {time}\n–°—Ç–∞—Ç—É—Å: *{status}*"
                buttons = []
                if status == "–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è":
                    buttons.append(InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{booking_id}"))
                    buttons.append(InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data=f"cancel_{booking_id}"))
                reply_markup = InlineKeyboardMarkup([buttons]) if buttons else None
                await query.message.reply_text(msg, reply_markup=reply_markup, parse_mode="Markdown")
        else:
            await query.message.reply_text("–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ß–∞—Å –æ–Ω–æ–≤–∏—Ç–∏ —Å–≤—ñ–π –æ–±—Ä–∞–∑! üíÑ")
        return

    if query.data == 'back_to_date':
        procedure = context.user_data.get('procedure')
        today = datetime.now().date()
        dates = []
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT date FROM deleted_days")
        deleted = {row[0] for row in c.fetchall()}
        conn.close()
        for i in range(7):
            d = today + timedelta(days=i)
            date_str = d.strftime("%d.%m")
            if date_str not in deleted:
                dates.append(date_str)
        keyboard = [
            [InlineKeyboardButton(f"üìÖ –û–±–∏—Ä–∞—é {date} üíã", callback_data=f'date_{date}')] for date in dates
        ]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø—Ä–æ—Ü–µ–¥—É—Ä", callback_data='back_to_procedure')])
        await query.edit_message_text(
            "üå∏ –Ø–∫–∏–π –¥–µ–Ω—å –∑—Ä–æ–±–∏—Ç—å —Ç–µ–±–µ —â–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ñ—à–æ—é? –û–±–∏—Ä–∞–π —Å–µ—Ä–¥–µ—á–∫–æ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—ñ –π –ª–æ–≤–∏ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è! –Ø–∫—â–æ —Ä–∞–ø—Ç–æ–º –∑–∞—Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–∏—Å–Ω–∏ ‚¨ÖÔ∏è —ñ –ø–æ–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ –≤–∏–±–æ—Ä—É, –±–æ —Ç–≤–æ—è –∫—Ä–∞—Å–∞ –≤–∞–∂–ª–∏–≤–∞! ‚ú®üíê",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    if query.data == "master_phone":
        text = (
            f"üë©‚Äçüé® *–í–∞—à –º–∞–π—Å—Ç–µ—Ä: {MASTER_NAME}*\n"
            f"‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: `{MASTER_PHONE}`\n"
            "–ó–∞–≤–∂–¥–∏ —Ä–∞–¥–∞ –¥–æ–ø–æ–º–æ–≥—Ç–∏ ‚Äî —Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –∞–±–æ –ø–∏—à—ñ—Ç—å —É Viber/Telegram! üí¨"
        )
        await query.edit_message_text(text, parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(
                [
                    [InlineKeyboardButton("üì∏ Instagram", url=INSTAGRAM_LINK)],
                    [InlineKeyboardButton("üìç –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è", url=MASTER_GEO_LINK)],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                ]
            )
        )
        return

    if query.data.startswith('confirm_'):
        booking_id = int(query.data.replace('confirm_', ''))
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("UPDATE bookings SET status=? WHERE id=?", ("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ", booking_id))
        conn.commit()
        c.execute("SELECT procedure, date, time FROM bookings WHERE id=?", (booking_id,))
        row = c.fetchone()
        conn.close()
        if row:
            procedure, date, time = row
            await query.message.reply_text(
                f"‚úÖ –í–∞—à –∑–∞–ø–∏—Å –Ω–∞ {procedure} {date} –æ {time} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –Ø –∑ –Ω–µ—Ç–µ—Ä–ø—ñ–Ω–Ω—è–º —á–µ–∫–∞—é –Ω–∞ —Ç–µ–±–µ! üíñ"
            )
        return

    if query.data.startswith('cancel_'):
        booking_id = int(query.data.replace('cancel_', ''))
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT name, procedure, date, time FROM bookings WHERE id=?", (booking_id,))
        row = c.fetchone()
        c.execute("DELETE FROM bookings WHERE id=?", (booking_id,))
        conn.commit()
        conn.close()
        if row:
            name, procedure, date, time = row
            await query.message.reply_text("‚ùå –¢–≤—ñ–π –∑–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –Ø–∫—â–æ –∑–∞—Ö–æ—á–µ—à –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è ‚Äî —è –∑–∞–≤–∂–¥–∏ —Ç—É—Ç! üíû")
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"‚ùóÔ∏è–ö–ª—ñ—î–Ω—Ç {name} —Å–∫–∞—Å—É–≤–∞–≤ –∑–∞–ø–∏—Å: {procedure} {date} –æ {time}"
            )
        return

# --- –í–í–ï–î–ï–ù–ù–Ø –¢–ï–ö–°–¢–£ ---
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_step = context.user_data.get('step')
    text = update.message.text

    # --- –î–æ–¥–∞–≤–∞–Ω–Ω—è/—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —á–∞—Å—É –¥–ª—è –¥–Ω—è (–∞–¥–º—ñ–Ω) ---
    if user_step == 'edit_times' and update.effective_user.id == ADMIN_ID:
        day = context.user_data.get('edit_day')
        new_times = text.strip()
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("SELECT id FROM schedule WHERE date = ?", (day,))
        exists = c.fetchone()
        if exists:
            c.execute("UPDATE schedule SET times=? WHERE date=?", (new_times, day))
        else:
            c.execute("INSERT INTO schedule (date, times) VALUES (?, ?)", (day, new_times))
        conn.commit()
        conn.close()
        await update.message.reply_text(f"‚úÖ –î–ª—è –¥–Ω—è {day} –æ–Ω–æ–≤–ª–µ–Ω–æ –≥–æ–¥–∏–Ω–∏: {new_times}")
        context.user_data['step'] = None
        context.user_data['edit_day'] = None
        return

    if user_step == 'get_fullinfo':
        context.user_data['fullinfo'] = text
        procedure = context.user_data.get('procedure')
        date = context.user_data.get('date')
        time = context.user_data.get('time')
        fullinfo = context.user_data.get('fullinfo')
        user_id = update.effective_user.id
        try:
            name, phone = [s.strip() for s in fullinfo.split(',', 1)]
        except Exception:
            name, phone = fullinfo.strip(), "N/A"
        conn = sqlite3.connect('appointments.db')
        c = conn.cursor()
        c.execute("INSERT INTO bookings (user_id, name, phone, procedure, date, time, status) VALUES (?, ?, ?, ?, ?, ?, ?)",
        update_client_visits(user_id, name, phone)
        visits = update_client_visits(user_id, name, phone)
        if visits >= 5:
            await update.message.reply_text("üéÅ –¢–∏ –≤–∂–µ –∑–∞—Å–ª—É–∂–∏–ª–∞ –ø–æ–¥–∞—Ä—É–Ω–æ–∫ –∑–∞ —Å–≤–æ—é –ª–æ—è–ª—å–Ω—ñ—Å—Ç—å! –ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—é—Ä–ø—Ä–∏–∑ üíñ")
                  (user_id, name, phone, procedure, date, time, "–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"))
        booking_id = c.lastrowid
        conn.commit()
        conn.close()
        add_to_google_sheet(name, "", phone, procedure, date, time)
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{booking_id}"),
             InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data=f"cancel_{booking_id}")],
            [InlineKeyboardButton("üíé –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è —â–µ", callback_data='book')],
            [InlineKeyboardButton("üìã –ú–æ—ó –∑–∞–ø–∏—Å–∏", callback_data='check_booking')],
            [InlineKeyboardButton("üì∏ Instagram", url=INSTAGRAM_LINK)],
            [InlineKeyboardButton("üìç –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è", url=MASTER_GEO_LINK)],
            [InlineKeyboardButton(f"üë©‚Äçüé® –ú–∞–π—Å—Ç–µ—Ä: {MASTER_NAME}", callback_data='master_phone')],
        ]
        await update.message.reply_text(
            f"üéâ –¢–∏ –∑–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞ *{procedure}* {date} –æ {time}! –Ø –≤–∂–µ —á–µ–∫–∞—é –∑—É—Å—Ç—Ä—ñ—á—ñ –∑ —Ç–æ–±–æ—é, —Ç–∏ –Ω–∞–¥–∏—Ö–∞—î—à! üíñ\n\n"
            f"üë©‚Äçüé® –ú–∞–π—Å—Ç–µ—Ä: {MASTER_NAME}\n"
            f"‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: {MASTER_PHONE}\n"
            f"üìç –ê–¥—Ä–µ—Å–∞: {MASTER_GEO}\n\n"
            "–Ø–∫—â–æ —Ö–æ—á–µ—à ‚Äî –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏ —á–∏ –≤—ñ–¥–º—ñ–Ω—ñ –∑–∞–ø–∏—Å, –∞–±–æ –∑–∞–ø–∏—à–∏—Å—è —â–µ —Ä–∞–∑ üëë",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"""üì• –ù–æ–≤–∏–π –∑–∞–ø–∏—Å:
–ü–Ü–ë/–¢–µ–ª–µ—Ñ–æ–Ω: {name} / {phone}
–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {procedure}
–î–∞—Ç–∞: {date} –æ {time}"""
        )
        event_time = datetime.strptime(f"{date} {time}", "%d.%m %H:%M")
        remind_day = event_time - timedelta(days=1)
        remind_time = remind_day.replace(hour=10, minute=0, second=0, microsecond=0)
        remind_2h = event_time - timedelta(hours=2)
        now = datetime.now()
        if remind_time > now:
            scheduler.add_job(
                send_reminder,
                'date',
                run_date=remind_time,
                args=[user_id, procedure, date, time, "day"]
            )
        if remind_2h > now:
            scheduler.add_job(
                send_reminder,
                'date',
                run_date=remind_2h,
                args=[user_id, procedure, date, time, "2h"]
            )
        scheduler.start()
        context.user_data.clear()
        return

    else:
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ —Ç–∞ –ø–æ–¥–∞—Ä—É–π—Ç–µ —Å–æ–±—ñ –∫—Ä–∞—Å—É! üíñ")

# --- –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ---
async def send_reminder(user_id, procedure, date, time, mode="day"):
    from telegram import Bot
    bot = Bot(token=TOKEN)
    try:
        if mode == "day":
            text = f"‚è∞ –ö—Ä–∞—Å–∏–≤–∞, –Ω–∞–≥–∞–¥—É—é: –≤–∂–µ –∑–∞–≤—Ç—Ä–∞ —Ç–≤—ñ–π –± º—é—Ç—ñ-–∑–∞–ø–∏—Å –Ω–∞ {procedure} {date} –æ {time}! –Ø —á–µ–∫–∞—é —Ç–µ–±–µ –∑ –≥–∞—Ä–Ω–∏–º –Ω–∞—Å—Ç—Ä–æ—î–º —ñ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è–º ‚ú® –î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ, —Å–æ–Ω–µ—á–∫–æ! üíû"
        elif mode == "2h":
            text = f"üí¨ –¢–≤—ñ–π –± º—é—Ç—ñ-—á–∞—Å –≤–∂–µ –∑–æ–≤—Å—ñ–º —Å–∫–æ—Ä–æ ‚Äî —á–µ—Ä–µ–∑ 2 –≥–æ–¥–∏–Ω–∫–∏! {procedure} {date} –æ {time} üå∑ –Ø –≤–∂–µ –≥–æ—Ç—É—é –Ω–∞–π–∫—Ä–∞—â—ñ —Ñ–∞—Ä–±–∏, –ø–µ–Ω–∑–ª—ñ —Ç–∞ –≥–∞—Ä—è—á–∏–π —á–∞–π! –î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ, –∑—ñ—Ä–æ–Ω—å–∫–æ! üëë"
        else:
            text = f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞–ø–∏—Å: {procedure} {date} –æ {time}."
        await bot.send_message(
            chat_id=user_id,
            text=text
        )
    except Exception as e:
        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {e}")

def main():
    init_db()
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    app.add_handler(CommandHandler("stats", show_statistics))
    app.add_handler(CommandHandler("search", search_client))


    app.run_polling()

if __name__ == "__main__":
    main()



# --- –î–û–î–ê–ù–û: –±–æ–Ω—É—Å–∏, VIP, –ø–æ—à—É–∫, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---

def init_db():
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS bookings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            phone TEXT,
            procedure TEXT,
            date TEXT,
            time TEXT,
            user_id INTEGER,
            status TEXT DEFAULT '–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è'
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS schedule (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT,
            times TEXT
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS deleted_days (
            date TEXT PRIMARY KEY
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS clients (
            user_id INTEGER PRIMARY KEY,
            name TEXT,
            phone TEXT,
            visits INTEGER DEFAULT 0
        )
    """)
    conn.commit()
    conn.close()

async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()

    today = datetime.now().date()
    week_ago = (today - timedelta(days=7)).strftime("%d.%m")
    c.execute("SELECT COUNT(*) FROM bookings WHERE date >= ?", (week_ago,))
    week_count = c.fetchone()[0]

    c.execute("SELECT procedure, COUNT(*) as cnt FROM bookings GROUP BY procedure ORDER BY cnt DESC LIMIT 3")
    top_procedures = c.fetchall()
    proc_text = "\n".join([f"{i+1}. {p[0]} ({p[1]})" for i, p in enumerate(top_procedures)])

    c.execute("SELECT name, visits FROM clients ORDER BY visits DESC LIMIT 3")
    top_clients = c.fetchall()
    client_text = "\n".join([f"{i+1}. {c[0]} ‚Äî {c[1]} –≤—ñ–∑–∏—Ç—ñ–≤" for i, c in enumerate(top_clients)])

    conn.close()
    text = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∞–ª–æ–Ω—É:*\n\n"
        f"üë• –ó–∞–ø–∏—Å—ñ–≤ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å: {week_count}\n\n"
        f"üî• *–¢–æ–ø-–ø—Ä–æ—Ü–µ–¥—É—Ä–∏:*\n{proc_text}\n\n"
        f"üëë *–¢–æ–ø-–∫–ª—ñ—î–Ω—Ç–∏:*\n{client_text}"
    )
    await update.message.reply_text(text, parse_mode="Markdown")

async def search_client(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return
    if not context.args:
        await update.message.reply_text("üîç –ù–∞–ø–∏—à—ñ—Ç—å /search –Ü–º'—è –∞–±–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")
        return
    keyword = " ".join(context.args).strip()
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT name, phone, visits FROM clients WHERE name LIKE ? OR phone LIKE ?", (f"%{keyword}%", f"%{keyword}%"))
    result = c.fetchone()
    conn.close()
    if result:
        name, phone, visits = result
        await update.message.reply_text(f"üë§ {name}\nüì± {phone}\n‚≠êÔ∏è –í—ñ–∑–∏—Ç—ñ–≤: {visits}")
    else:
        await update.message.reply_text("üòî –ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

# –ü—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É –æ–Ω–æ–≤–ª—é—î–º–æ visits –∫–ª—ñ—î–Ω—Ç–∞
def update_client_visits(user_id, name, phone):
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT visits FROM clients WHERE user_id = ?", (user_id,))
    row = c.fetchone()
    if row:
        visits = row[0] + 1
        c.execute("UPDATE clients SET visits=? WHERE user_id=?", (visits, user_id))
    else:
        visits = 1
        c.execute("INSERT INTO clients (user_id, name, phone, visits) VALUES (?, ?, ?, ?)",
                  (user_id, name, phone, visits))
    conn.commit()
    conn.close()
    return visits

from dotenv import load_dotenv
import os

load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')

# –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –∫—ñ–ª—å–∫–æ—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 1035792183,474236378)
ADMIN_IDS = [int(i.strip()) for i in os.environ["ADMIN_IDS"].split(",")]
print("DEBUG: ADMIN_IDS from env =", ADMIN_IDS)

import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes,
    MessageHandler, filters
)
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, timedelta
from google_sheets import add_to_google_sheet

scheduler = BackgroundScheduler()

INSTAGRAM_LINK = "https://www.instagram.com/safroniuk_brows_lashes?utm_source=ig_web_button_share_sheet&igsh=ZDNlZDc0MzIxNw=="

def init_db():
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS bookings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            phone TEXT,
            procedure TEXT,
            date TEXT,
            time TEXT,
            user_id INTEGER,
            status TEXT DEFAULT '–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è'
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS schedule (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT,
            times TEXT
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS deleted_days (
            date TEXT PRIMARY KEY
        )
    """)
    conn.commit()
    conn.close()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üëë –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É", callback_data='book')],
        [InlineKeyboardButton("üìã –ú–æ—ó –∑–∞–ø–∏—Å–∏", callback_data='check_booking')],
        [InlineKeyboardButton("üì∏ Instagram", callback_data='instagram')],
        [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
    ]
    await update.message.reply_text(
        "‚ú® –í—ñ—Ç–∞—é –≤ beauty-–±–æ—Ç—ñ! –¢—É—Ç –∫–æ–∂–Ω–∞ –¥—ñ–≤—á–∏–Ω–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —á–∞—Å –¥–ª—è —Å–µ–±–µ —Ç–∞ —Å–≤–æ–≥–æ –æ–±—Ä–∞–∑—É üíñ\n\n"
        "–û–±–∏—Ä–∞–π –¥—ñ—é –Ω–∏–∂—á–µ ‚Äî —ñ –≥–∞–π–¥–∞ –¥–æ –∫—Ä–∞—Å–∏! üå∏",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in ADMIN_IDS:
        text = (
            "üëë *–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*\n\n"
            "/start ‚Äî –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
            "/mybookings ‚Äî –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–≤–æ—ó –∑–∞–ø–∏—Å–∏\n"
            "/help ‚Äî —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —Ç–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
            "/instagram ‚Äî Instagram –º–∞–π—Å—Ç—Ä–∞\n"
            "/calendar ‚Äî –∫–∞–ª–µ–Ω–¥–∞—Ä –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ (–∞–¥–º—ñ–Ω—É)\n"
            "/weekcalendar ‚Äî –∫–∞–ª–µ–Ω–¥–∞—Ä –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å (–∞–¥–º—ñ–Ω—É)\n\n"
            "*–ê–¥–º—ñ–Ω—É –¥–æ—Å—Ç—É–ø–Ω–æ:*\n"
            "/schedule ‚Äî –∑–º—ñ–Ω–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫\n"
            "/set_schedule ‚Äî –∑–º—ñ–Ω–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)\n"
            "/delete_day ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ –¥–µ–Ω—å –∑ –≥—Ä–∞—Ñ—ñ–∫–∞"
        )
    else:
        text = (
            "‚ú® *–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*\n\n"
            "/start ‚Äî –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
            "/mybookings ‚Äî –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–≤–æ—ó –∑–∞–ø–∏—Å–∏\n"
            "/help ‚Äî —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —Ç–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
            "/instagram ‚Äî Instagram –º–∞–π—Å—Ç—Ä–∞"
        )
    await update.message.reply_text(text, parse_mode='Markdown')

async def instagram_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üå∏ *–ü—ñ–¥–ø–∏—Å—É–π—Å—è –Ω–∞ –º—ñ–π Instagram!* üå∏\n\n"
        "–¢—É—Ç —Ç–∏ –∑–Ω–∞–π–¥–µ—à –º–æ—ó —Ä–æ–±–æ—Ç–∏, –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏, –∞–∫—Ç—É–∞–ª—å–Ω—ñ –∞–∫—Ü—ñ—ó —ñ —Ç—Ä–æ—Ö–∏ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è –¥–ª—è —Å–µ–±–µ:\n"
        f"{INSTAGRAM_LINK}\n\n"
        "üëë @safroniuk_brows_lashes ‚Äî —Ä–∞–∑–æ–º –¥–æ –∫—Ä–∞—Å–∏!"
    )
    if hasattr(update, "message") and update.message:
        await update.message.reply_text(text, parse_mode="Markdown", disable_web_page_preview=False)
    else:
        await update.callback_query.message.reply_text(text, parse_mode="Markdown", disable_web_page_preview=False)

async def schedule_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return
    await update.message.reply_text(
        "üóìÔ∏è –í–≤–µ–¥—ñ—Ç—å –≥—Ä–∞—Ñ—ñ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n\n28.05: 14:00,15:00,16:00\n29.05: 15:00,16:00"
    )
    context.user_data['step'] = 'set_schedule'

async def delete_day_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return
    today = datetime.now().date()
    dates = set()
    for i in range(7):
        d = today + timedelta(days=i)
        dates.add(d.strftime("%d.%m"))
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT DISTINCT date FROM schedule")
    for row in c.fetchall():
        dates.add(row[0])
    conn.close()
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT date FROM deleted_days")
    deleted = {row[0] for row in c.fetchall()}
    conn.close()
    dates = [d for d in dates if d not in deleted]
    dates = sorted(list(dates), key=lambda x: datetime.strptime(x + f".{datetime.now().year}", "%d.%m.%Y"))
    if not dates:
        await update.message.reply_text("–ù–µ–º–∞—î –¥–Ω—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
        return
    keyboard = [
        [InlineKeyboardButton(f"‚ùå {date}", callback_data=f"delday_{date}")] for date in dates
    ]
    await update.message.reply_text("üóëÔ∏è –û–±–µ—Ä–∏ –¥–µ–Ω—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è (–≤—ñ–Ω –∑–Ω–∏–∫–Ω–µ –¥–ª—è –∑–∞–ø–∏—Å—É):", reply_markup=InlineKeyboardMarkup(keyboard))
    context.user_data['step'] = None

async def calendar_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return

    today = datetime.now().date()
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute(
        "SELECT date, time, procedure, name, phone, status FROM bookings "
        "WHERE date=? ORDER BY date, time", (today.strftime("%d.%m"),)
    )
    rows = c.fetchall()
    conn.close()

    if not rows:
        await update.message.reply_text("–°—å–æ–≥–æ–¥–Ω—ñ –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î.")
        return

    text = f"üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ {today.strftime('%d.%m.%Y')}:\n\n"
    for rec in rows:
        date, time, procedure, name, phone, status = rec
        text += (
            f"üïí {time} ‚Äî {procedure}\n"
            f"üë§ {name}, üì± {phone}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
        )
    await update.message.reply_text(text)

async def week_calendar_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return

    today = datetime.now().date()
    week_dates = [(today + timedelta(days=i)).strftime("%d.%m") for i in range(7)]
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute(
        f"SELECT date, time, procedure, name, phone, status FROM bookings "
        f"WHERE date IN ({','.join(['?']*len(week_dates))}) ORDER BY date, time", week_dates
    )
    rows = c.fetchall()
    conn.close()

    if not rows:
        await update.message.reply_text("–ù–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î.")
        return

    text = "üìÜ –ó–∞–ø–∏—Å–∏ –Ω–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å:\n\n"
    for rec in rows:
        date, time, procedure, name, phone, status = rec
        text += (
            f"üìÖ {date} üïí {time} ‚Äî {procedure}\n"
            f"üë§ {name}, üì± {phone}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
        )
    await update.message.reply_text(text)

async def mybookings_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT id, procedure, date, time, status FROM bookings WHERE user_id=?", (user_id,))
    rows = c.fetchall()
    conn.close()
    if rows:
        for rec in rows:
            booking_id, procedure, date, time, status = rec
            msg = f"‚ú® {procedure}\nüóìÔ∏è {date} –æ {time}\n–°—Ç–∞—Ç—É—Å: *{status}*"
            buttons = []
            if status == "–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è":
                buttons.append(InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{booking_id}"))
                buttons.append(InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data=f"cancel_{booking_id}"))
            reply_markup = InlineKeyboardMarkup([buttons]) if buttons else None
            await update.message.reply_text(msg, reply_markup=reply_markup, parse_mode="Markdown")
    else:
        await update.message.reply_text("–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ß–∞—Å –æ–Ω–æ–≤–∏—Ç–∏ —Å–≤—ñ–π –æ–±—Ä–∞–∑! üíÑ")

# –¢–£–¢ –í–°–¢–ê–í –°–í–û–á –§–£–ù–ö–¶–Ü–á button_handler, text_handler, send_reminder  
# (—ó—Ö–Ω—ñ–π –≤–º—ñ—Å—Ç –Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è, —Ç—ñ–ª—å–∫–∏ —É –≤—Å—ñ—Ö –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞—Ö '== ADMIN_ID' –∑–∞–º—ñ–Ω–∏ –Ω–∞ 'in ADMIN_IDS')

# –ù–∞–ø—Ä–∏–∫–ª–∞–¥:
# async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     ... (–¢–≤—ñ–π –∫–æ–¥ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏ —á–µ—Ä–µ–∑ in ADMIN_IDS)
# async def text_handler(...):
#     ...
# async def send_reminder(...):
#     ...

set_schedule_handler = schedule_handler

def main():
    init_db()
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_handler))
    app.add_handler(CommandHandler("instagram", instagram_handler))
    app.add_handler(CommandHandler("calendar", calendar_handler))
    app.add_handler(CommandHandler("weekcalendar", week_calendar_handler))
    app.add_handler(CommandHandler("schedule", schedule_handler))
    app.add_handler(CommandHandler("set_schedule", schedule_handler))
    app.add_handler(CommandHandler("delete_day", delete_day_handler))
    app.add_handler(CommandHandler("mybookings", mybookings_handler))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    app.run_polling()

if __name__ == "__main__":
    main()
